{
  "api/Jiro.App.Extensions.Configurator.html": {
    "href": "api/Jiro.App.Extensions.Configurator.html",
    "title": "Class Configurator | Jiro Documentation",
    "keywords": "Class Configurator Namespace Jiro.App.Extensions Assembly Jiro.App.dll Provides static extension methods for configuring services, options, and HTTP clients for the Jiro application. public static class Configurator Inheritance object Configurator Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods AddHttpClients(IServiceCollection, IConfiguration) Configures HTTP clients for external API communication, including weather, geolocation, and general-purpose clients. public static IServiceCollection AddHttpClients(this IServiceCollection services, IConfiguration configuration) Parameters services IServiceCollection The service collection to add HTTP clients to. configuration IConfiguration The configuration instance for HTTP client settings. Returns IServiceCollection The service collection with configured HTTP clients for method chaining. AddOptions(IServiceCollection, IConfiguration) Configures application options from the provided configuration, including chat and logging options. public static IServiceCollection AddOptions(this IServiceCollection services, IConfiguration configuration) Parameters services IServiceCollection The service collection to configure options for. configuration IConfiguration The configuration instance containing option values. Returns IServiceCollection The service collection with configured options for method chaining. AddServices(IServiceCollection, IConfiguration) Adds all required services to the dependency injection container, including command handlers, AI clients, repositories, and core services. public static IServiceCollection AddServices(this IServiceCollection services, IConfiguration config) Parameters services IServiceCollection The service collection to add services to. config IConfiguration The configuration instance used to configure services. Returns IServiceCollection The service collection with added services for method chaining."
  },
  "api/Jiro.App.Extensions.ServiceCollectionExtensions.html": {
    "href": "api/Jiro.App.Extensions.ServiceCollectionExtensions.html",
    "title": "Class ServiceCollectionExtensions | Jiro Documentation",
    "keywords": "Class ServiceCollectionExtensions Namespace Jiro.App.Extensions Assembly Jiro.App.dll Extension methods for configuring Jiro communication services public static class ServiceCollectionExtensions Inheritance object ServiceCollectionExtensions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods AddJiroCommunication(IServiceCollection, IConfiguration) Adds the WebSocket and gRPC communication services to the service collection. This configures the architecture where WebSocket (SignalR) receives commands and gRPC sends results. public static IServiceCollection AddJiroCommunication(this IServiceCollection services, IConfiguration configuration) Parameters services IServiceCollection The service collection configuration IConfiguration The configuration Returns IServiceCollection The service collection for chaining"
  },
  "api/Jiro.App.Extensions.html": {
    "href": "api/Jiro.App.Extensions.html",
    "title": "Namespace Jiro.App.Extensions | Jiro Documentation",
    "keywords": "Namespace Jiro.App.Extensions Classes Configurator Provides static extension methods for configuring services, options, and HTTP clients for the Jiro application. ServiceCollectionExtensions Extension methods for configuring Jiro communication services"
  },
  "api/Jiro.App.Interceptors.InstanceContextInterceptor.html": {
    "href": "api/Jiro.App.Interceptors.InstanceContextInterceptor.html",
    "title": "Class InstanceContextInterceptor | Jiro Documentation",
    "keywords": "Class InstanceContextInterceptor Namespace Jiro.App.Interceptors Assembly Jiro.App.dll gRPC interceptor that sets the InstanceContext based on request metadata. public class InstanceContextInterceptor : Interceptor Inheritance object Interceptor InstanceContextInterceptor Inherited Members Interceptor.BlockingUnaryCall<TRequest, TResponse>(TRequest, ClientInterceptorContext<TRequest, TResponse>, Interceptor.BlockingUnaryCallContinuation<TRequest, TResponse>) Interceptor.AsyncUnaryCall<TRequest, TResponse>(TRequest, ClientInterceptorContext<TRequest, TResponse>, Interceptor.AsyncUnaryCallContinuation<TRequest, TResponse>) Interceptor.AsyncServerStreamingCall<TRequest, TResponse>(TRequest, ClientInterceptorContext<TRequest, TResponse>, Interceptor.AsyncServerStreamingCallContinuation<TRequest, TResponse>) Interceptor.AsyncClientStreamingCall<TRequest, TResponse>(ClientInterceptorContext<TRequest, TResponse>, Interceptor.AsyncClientStreamingCallContinuation<TRequest, TResponse>) Interceptor.AsyncDuplexStreamingCall<TRequest, TResponse>(ClientInterceptorContext<TRequest, TResponse>, Interceptor.AsyncDuplexStreamingCallContinuation<TRequest, TResponse>) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors InstanceContextInterceptor(IServiceProvider, ILogger<InstanceContextInterceptor>) public InstanceContextInterceptor(IServiceProvider serviceProvider, ILogger<InstanceContextInterceptor> logger) Parameters serviceProvider IServiceProvider logger ILogger<InstanceContextInterceptor> Methods ClientStreamingServerHandler<TRequest, TResponse>(IAsyncStreamReader<TRequest>, ServerCallContext, ClientStreamingServerMethod<TRequest, TResponse>) Server-side handler for intercepting client streaming call. public override Task<TResponse> ClientStreamingServerHandler<TRequest, TResponse>(IAsyncStreamReader<TRequest> requestStream, ServerCallContext context, ClientStreamingServerMethod<TRequest, TResponse> continuation) where TRequest : class where TResponse : class Parameters requestStream IAsyncStreamReader<TRequest> The request stream of the incoming invocation. context ServerCallContext An instance of ServerCallContext representing the context of the invocation. continuation ClientStreamingServerMethod<TRequest, TResponse> A delegate that asynchronously proceeds with the invocation, calling the next interceptor in the chain, or the service request handler, in case of the last interceptor and return the response value of the RPC. The interceptor can choose to call it zero or more times at its discretion. Returns Task<TResponse> A future representing the response value of the RPC. The interceptor can simply return the return value from the continuation intact, or an arbitrary response value as it sees fit. The interceptor has the ability to wrap or substitute the request stream when calling the continuation. Type Parameters TRequest Request message type for this method. TResponse Response message type for this method. DuplexStreamingServerHandler<TRequest, TResponse>(IAsyncStreamReader<TRequest>, IServerStreamWriter<TResponse>, ServerCallContext, DuplexStreamingServerMethod<TRequest, TResponse>) Server-side handler for intercepting bidirectional streaming calls. public override Task DuplexStreamingServerHandler<TRequest, TResponse>(IAsyncStreamReader<TRequest> requestStream, IServerStreamWriter<TResponse> responseStream, ServerCallContext context, DuplexStreamingServerMethod<TRequest, TResponse> continuation) where TRequest : class where TResponse : class Parameters requestStream IAsyncStreamReader<TRequest> The request stream of the incoming invocation. responseStream IServerStreamWriter<TResponse> The response stream of the incoming invocation. context ServerCallContext An instance of ServerCallContext representing the context of the invocation. continuation DuplexStreamingServerMethod<TRequest, TResponse> A delegate that asynchronously proceeds with the invocation, calling the next interceptor in the chain, or the service request handler, in case of the last interceptor and the interceptor can choose to call it zero or more times at its discretion. The interceptor has the ability to wrap or substitute the request and response streams when calling the continuation. Returns Task Type Parameters TRequest Request message type for this method. TResponse Response message type for this method. ServerStreamingServerHandler<TRequest, TResponse>(TRequest, IServerStreamWriter<TResponse>, ServerCallContext, ServerStreamingServerMethod<TRequest, TResponse>) Server-side handler for intercepting server streaming call. public override Task ServerStreamingServerHandler<TRequest, TResponse>(TRequest request, IServerStreamWriter<TResponse> responseStream, ServerCallContext context, ServerStreamingServerMethod<TRequest, TResponse> continuation) where TRequest : class where TResponse : class Parameters request TRequest The request value of the incoming invocation. responseStream IServerStreamWriter<TResponse> The response stream of the incoming invocation. context ServerCallContext An instance of ServerCallContext representing the context of the invocation. continuation ServerStreamingServerMethod<TRequest, TResponse> A delegate that asynchronously proceeds with the invocation, calling the next interceptor in the chain, or the service request handler, in case of the last interceptor and the interceptor can choose to call it zero or more times at its discretion. The interceptor has the ability to wrap or substitute the request value and the response stream when calling the continuation. Returns Task Type Parameters TRequest Request message type for this method. TResponse Response message type for this method. UnaryServerHandler<TRequest, TResponse>(TRequest, ServerCallContext, UnaryServerMethod<TRequest, TResponse>) Server-side handler for intercepting and incoming unary call. public override Task<TResponse> UnaryServerHandler<TRequest, TResponse>(TRequest request, ServerCallContext context, UnaryServerMethod<TRequest, TResponse> continuation) where TRequest : class where TResponse : class Parameters request TRequest The request value of the incoming invocation. context ServerCallContext An instance of ServerCallContext representing the context of the invocation. continuation UnaryServerMethod<TRequest, TResponse> A delegate that asynchronously proceeds with the invocation, calling the next interceptor in the chain, or the service request handler, in case of the last interceptor and return the response value of the RPC. The interceptor can choose to call it zero or more times at its discretion. Returns Task<TResponse> A future representing the response value of the RPC. The interceptor can simply return the return value from the continuation intact, or an arbitrary response value as it sees fit. Type Parameters TRequest Request message type for this method. TResponse Response message type for this method."
  },
  "api/Jiro.App.Interceptors.html": {
    "href": "api/Jiro.App.Interceptors.html",
    "title": "Namespace Jiro.App.Interceptors | Jiro Documentation",
    "keywords": "Namespace Jiro.App.Interceptors Classes InstanceContextInterceptor gRPC interceptor that sets the InstanceContext based on request metadata."
  },
  "api/Jiro.App.Middleware.InstanceContextMiddleware.html": {
    "href": "api/Jiro.App.Middleware.InstanceContextMiddleware.html",
    "title": "Class InstanceContextMiddleware | Jiro Documentation",
    "keywords": "Class InstanceContextMiddleware Namespace Jiro.App.Middleware Assembly Jiro.App.dll Middleware that sets the InstanceContext based on HTTP request headers or query parameters. Used for WebSocket connections and HTTP API requests. public class InstanceContextMiddleware Inheritance object InstanceContextMiddleware Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors InstanceContextMiddleware(RequestDelegate, ILogger<InstanceContextMiddleware>) public InstanceContextMiddleware(RequestDelegate next, ILogger<InstanceContextMiddleware> logger) Parameters next RequestDelegate logger ILogger<InstanceContextMiddleware> Methods InvokeAsync(HttpContext) public Task InvokeAsync(HttpContext context) Parameters context HttpContext Returns Task"
  },
  "api/Jiro.App.Middleware.html": {
    "href": "api/Jiro.App.Middleware.html",
    "title": "Namespace Jiro.App.Middleware | Jiro Documentation",
    "keywords": "Namespace Jiro.App.Middleware Classes InstanceContextMiddleware Middleware that sets the InstanceContext based on HTTP request headers or query parameters. Used for WebSocket connections and HTTP API requests."
  },
  "api/Jiro.App.Services.GrpcExceptionInterceptor.html": {
    "href": "api/Jiro.App.Services.GrpcExceptionInterceptor.html",
    "title": "Class GrpcExceptionInterceptor | Jiro Documentation",
    "keywords": "Class GrpcExceptionInterceptor Namespace Jiro.App.Services Assembly Jiro.App.dll gRPC interceptor for centralized exception handling and logging public class GrpcExceptionInterceptor : Interceptor Inheritance object Interceptor GrpcExceptionInterceptor Inherited Members Interceptor.BlockingUnaryCall<TRequest, TResponse>(TRequest, ClientInterceptorContext<TRequest, TResponse>, Interceptor.BlockingUnaryCallContinuation<TRequest, TResponse>) Interceptor.AsyncServerStreamingCall<TRequest, TResponse>(TRequest, ClientInterceptorContext<TRequest, TResponse>, Interceptor.AsyncServerStreamingCallContinuation<TRequest, TResponse>) Interceptor.AsyncClientStreamingCall<TRequest, TResponse>(ClientInterceptorContext<TRequest, TResponse>, Interceptor.AsyncClientStreamingCallContinuation<TRequest, TResponse>) Interceptor.AsyncDuplexStreamingCall<TRequest, TResponse>(ClientInterceptorContext<TRequest, TResponse>, Interceptor.AsyncDuplexStreamingCallContinuation<TRequest, TResponse>) Interceptor.UnaryServerHandler<TRequest, TResponse>(TRequest, ServerCallContext, UnaryServerMethod<TRequest, TResponse>) Interceptor.ClientStreamingServerHandler<TRequest, TResponse>(IAsyncStreamReader<TRequest>, ServerCallContext, ClientStreamingServerMethod<TRequest, TResponse>) Interceptor.ServerStreamingServerHandler<TRequest, TResponse>(TRequest, IServerStreamWriter<TResponse>, ServerCallContext, ServerStreamingServerMethod<TRequest, TResponse>) Interceptor.DuplexStreamingServerHandler<TRequest, TResponse>(IAsyncStreamReader<TRequest>, IServerStreamWriter<TResponse>, ServerCallContext, DuplexStreamingServerMethod<TRequest, TResponse>) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors GrpcExceptionInterceptor(ILogger<GrpcExceptionInterceptor>) public GrpcExceptionInterceptor(ILogger<GrpcExceptionInterceptor> logger) Parameters logger ILogger<GrpcExceptionInterceptor> Methods AsyncUnaryCall<TRequest, TResponse>(TRequest, ClientInterceptorContext<TRequest, TResponse>, AsyncUnaryCallContinuation<TRequest, TResponse>) Intercepts unary gRPC calls to handle exceptions public override AsyncUnaryCall<TResponse> AsyncUnaryCall<TRequest, TResponse>(TRequest request, ClientInterceptorContext<TRequest, TResponse> context, Interceptor.AsyncUnaryCallContinuation<TRequest, TResponse> continuation) where TRequest : class where TResponse : class Parameters request TRequest context ClientInterceptorContext<TRequest, TResponse> continuation Interceptor.AsyncUnaryCallContinuation<TRequest, TResponse> Returns AsyncUnaryCall<TResponse> Type Parameters TRequest TResponse ShouldRetryGeneralError(Exception) Determines if a general exception should be retried public static bool ShouldRetryGeneralError(Exception exception) Parameters exception Exception The exception to evaluate Returns bool True if the operation should be retried ShouldRetryGrpcError(RpcException) Determines if a gRPC exception indicates a retriable error public static bool ShouldRetryGrpcError(RpcException rpcException) Parameters rpcException RpcException The RPC exception to evaluate Returns bool True if the operation should be retried"
  },
  "api/Jiro.App.Services.ICommandQueueMonitor.html": {
    "href": "api/Jiro.App.Services.ICommandQueueMonitor.html",
    "title": "Interface ICommandQueueMonitor | Jiro Documentation",
    "keywords": "Interface ICommandQueueMonitor Namespace Jiro.App.Services Assembly Jiro.App.dll Interface for monitoring command execution queue public interface ICommandQueueMonitor Properties ActiveCommandCount Gets the current number of executing commands int ActiveCommandCount { get; } Property Value int ActiveCommandIds Gets the list of currently executing command IDs IEnumerable<string> ActiveCommandIds { get; } Property Value IEnumerable<string> FailedCommands Gets the number of commands that failed long FailedCommands { get; } Property Value long SuccessfulCommands Gets the number of commands that completed successfully long SuccessfulCommands { get; } Property Value long TotalCommandsProcessed Gets the total number of commands processed since startup long TotalCommandsProcessed { get; } Property Value long"
  },
  "api/Jiro.App.Services.IJiroGrpcService.html": {
    "href": "api/Jiro.App.Services.IJiroGrpcService.html",
    "title": "Interface IJiroGrpcService | Jiro Documentation",
    "keywords": "Interface IJiroGrpcService Namespace Jiro.App.Services Assembly Jiro.App.dll Interface for sending command results via gRPC public interface IJiroGrpcService Methods SendCommandErrorAsync(string, string, string) Sends an error result to the server Task SendCommandErrorAsync(string commandSyncId, string errorMessage, string sessionId) Parameters commandSyncId string The command synchronization ID errorMessage string The error message sessionId string Session ID Returns Task A task representing the async operation SendCommandResultAsync(string, CommandResponse, string) Sends a successful command result to the server Task SendCommandResultAsync(string commandSyncId, CommandResponse commandResult, string sessionId) Parameters commandSyncId string The command synchronization ID commandResult CommandResponse The command execution result sessionId string Session ID (possibly newly generated) Returns Task A task representing the async operation"
  },
  "api/Jiro.App.Services.JiroWebSocketService.html": {
    "href": "api/Jiro.App.Services.JiroWebSocketService.html",
    "title": "Class JiroWebSocketService | Jiro Documentation",
    "keywords": "Class JiroWebSocketService Namespace Jiro.App.Services Assembly Jiro.App.dll Hosted service that manages WebSocket communication using IJiroClientHub public class JiroWebSocketService : BackgroundService, IDisposable, ICommandQueueMonitor Inheritance object BackgroundService JiroWebSocketService Implements IDisposable ICommandQueueMonitor Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors JiroWebSocketService(IServiceScopeFactory, ILogger<JiroWebSocketService>, ICommandHandlerService, IOptions<JiroCloudOptions>, IJiroInstance, IJiroGrpcService) Initializes a new instance of the JiroWebSocketService public JiroWebSocketService(IServiceScopeFactory scopeFactory, ILogger<JiroWebSocketService> logger, ICommandHandlerService commandHandler, IOptions<JiroCloudOptions> jiroCloudOptions, IJiroInstance jiroClientHub, IJiroGrpcService grpcService) Parameters scopeFactory IServiceScopeFactory Service scope factory for creating scoped services logger ILogger<JiroWebSocketService> Logger instance commandHandler ICommandHandlerService Command handler service jiroCloudOptions IOptions<JiroCloudOptions> jiroClientHub IJiroInstance WebSocket client hub interface grpcService IJiroGrpcService gRPC service for sending command results Properties ActiveCommandCount Gets the current number of executing commands public int ActiveCommandCount { get; } Property Value int ActiveCommandIds Gets the list of currently executing command IDs public IEnumerable<string> ActiveCommandIds { get; } Property Value IEnumerable<string> FailedCommands Gets the number of commands that failed public long FailedCommands { get; } Property Value long SuccessfulCommands Gets the number of commands that completed successfully public long SuccessfulCommands { get; } Property Value long TotalCommandsProcessed Gets the total number of commands processed since startup public long TotalCommandsProcessed { get; } Property Value long Methods Dispose() Disposes the service and cleans up resources public override void Dispose() ExecuteAsync(CancellationToken) Main execution loop for the background service protected override Task ExecuteAsync(CancellationToken stoppingToken) Parameters stoppingToken CancellationToken Cancellation token for stopping the service Returns Task Task representing the async operation StartAsync(CancellationToken) Starts the WebSocket service and establishes connection public override Task StartAsync(CancellationToken cancellationToken) Parameters cancellationToken CancellationToken Cancellation token Returns Task Task representing the async operation StopAsync(CancellationToken) Stops the WebSocket service and closes connections public override Task StopAsync(CancellationToken cancellationToken) Parameters cancellationToken CancellationToken Cancellation token Returns Task Task representing the async operation"
  },
  "api/Jiro.App.Services.SocketRetryPolicy.html": {
    "href": "api/Jiro.App.Services.SocketRetryPolicy.html",
    "title": "Class SocketRetryPolicy | Jiro Documentation",
    "keywords": "Class SocketRetryPolicy Namespace Jiro.App.Services Assembly Jiro.App.dll Custom retry policy: first 5 retries are short, then 1 minute constant interval public class SocketRetryPolicy Inheritance object SocketRetryPolicy Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods NextRetryDelay(RetryContext) Returns the next retry delay based on the retry context. public TimeSpan? NextRetryDelay(RetryContext retryContext) Parameters retryContext RetryContext The retry context provided by SignalR. Returns TimeSpan? The delay before the next retry attempt."
  },
  "api/Jiro.App.Services.WebSocketConnection.html": {
    "href": "api/Jiro.App.Services.WebSocketConnection.html",
    "title": "Class WebSocketConnection | Jiro Documentation",
    "keywords": "Class WebSocketConnection Namespace Jiro.App.Services Assembly Jiro.App.dll SignalR implementation of the WebSocket connection interface public class WebSocketConnection : JiroInstanceBase, IJiroInstance, IDisposable Inheritance object JiroInstanceBase WebSocketConnection Implements IJiroInstance IDisposable Inherited Members JiroInstanceBase._hubConnection JiroInstanceBase._logger JiroInstanceBase._connectionSemaphore JiroInstanceBase.SetupEvents() JiroInstanceBase.InitializeAsync(string, string, Action<Exception, string>, CancellationToken) JiroInstanceBase.CleanupAsync() JiroInstanceBase.ReceiveLogsStreamAsync(string, ChannelReader<LogEntry>) JiroInstanceBase.ReceiveSessionMessagesStreamAsync(string, ChannelReader<ChatMessage>) JiroInstanceBase.Closed JiroInstanceBase.Reconnecting JiroInstanceBase.Reconnected JiroInstanceBase.CommandReceived JiroInstanceBase.LogsRequested JiroInstanceBase.LogsStreamRequested JiroInstanceBase.SessionRequested JiroInstanceBase.SessionMessagesStreamRequested JiroInstanceBase.SessionsRequested JiroInstanceBase.ConfigRequested JiroInstanceBase.ConfigUpdateRequested JiroInstanceBase.CustomThemesRequested JiroInstanceBase.CommandsMetadataRequested JiroInstanceBase.RemoveSessionRequested JiroInstanceBase.UpdateSessionRequested JiroInstanceBase.MachineInfoRequested object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors WebSocketConnection(HubConnection, ILogger<WebSocketConnection>, IOptions<JiroCloudOptions>, IServiceScopeFactory, ICommandHandlerService, WebSocketExceptionHandler) Initializes a new instance of the WebSocketConnection public WebSocketConnection(HubConnection connection, ILogger<WebSocketConnection> logger, IOptions<JiroCloudOptions> jiroCloudOptions, IServiceScopeFactory scopeFactory, ICommandHandlerService commandHandler, WebSocketExceptionHandler exceptionHandler) Parameters connection HubConnection The SignalR HubConnection logger ILogger<WebSocketConnection> The logger jiroCloudOptions IOptions<JiroCloudOptions> The JiroCloud configuration options scopeFactory IServiceScopeFactory Service scope factory for creating scoped services commandHandler ICommandHandlerService Command handler service exceptionHandler WebSocketExceptionHandler Exception handler for WebSocket errors Properties IsConnected Gets the current connection state public bool IsConnected { get; } Property Value bool Methods Dispose() Disposes the SignalRWebSocketConnection public void Dispose() SetupHandlers() Sets up custom event handlers for business logic protected override void SetupHandlers() StartAsync(CancellationToken) Starts the WebSocket connection public Task StartAsync(CancellationToken cancellationToken = default) Parameters cancellationToken CancellationToken Cancellation token Returns Task Task representing the async operation StopAsync(CancellationToken) Stops the WebSocket connection public Task StopAsync(CancellationToken cancellationToken = default) Parameters cancellationToken CancellationToken Cancellation token Returns Task Task representing the async operation"
  },
  "api/Jiro.App.Services.WebSocketExceptionHandler.html": {
    "href": "api/Jiro.App.Services.WebSocketExceptionHandler.html",
    "title": "Class WebSocketExceptionHandler | Jiro Documentation",
    "keywords": "Class WebSocketExceptionHandler Namespace Jiro.App.Services Assembly Jiro.App.dll Centralized exception handler for WebSocket operations public class WebSocketExceptionHandler Inheritance object WebSocketExceptionHandler Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors WebSocketExceptionHandler(ILogger<WebSocketExceptionHandler>) public WebSocketExceptionHandler(ILogger<WebSocketExceptionHandler> logger) Parameters logger ILogger<WebSocketExceptionHandler> Methods HandleConnectionException(Exception, string) Handles exceptions during WebSocket connection lifecycle public void HandleConnectionException(Exception exception, string operation) Parameters exception Exception The exception that occurred operation string The operation that failed (e.g., \"Connect\", \"Disconnect\", \"Reconnect\") HandleEventException(Exception, string, string?) Handles exceptions during event handler execution public void HandleEventException(Exception exception, string eventName, string? additionalContext = null) Parameters exception Exception The exception that occurred eventName string The event that failed additionalContext string Additional context information HandleException(Exception, string, string, string?) Handles exceptions in WebSocket operations and returns appropriate error responses public ErrorResponse HandleException(Exception exception, string requestId, string commandName, string? context = null) Parameters exception Exception The exception that occurred requestId string The request ID for tracking commandName string The command name that failed context string Additional context information Returns ErrorResponse Error response to send to the client ShouldRetry(Exception) Determines if an exception should be retried public static bool ShouldRetry(Exception exception) Parameters exception Exception The exception to evaluate Returns bool True if the operation should be retried"
  },
  "api/Jiro.App.Services.html": {
    "href": "api/Jiro.App.Services.html",
    "title": "Namespace Jiro.App.Services | Jiro Documentation",
    "keywords": "Namespace Jiro.App.Services Classes GrpcExceptionInterceptor gRPC interceptor for centralized exception handling and logging JiroWebSocketService Hosted service that manages WebSocket communication using IJiroClientHub SocketRetryPolicy Custom retry policy: first 5 retries are short, then 1 minute constant interval WebSocketConnection SignalR implementation of the WebSocket connection interface WebSocketExceptionHandler Centralized exception handler for WebSocket operations Interfaces ICommandQueueMonitor Interface for monitoring command execution queue IJiroGrpcService Interface for sending command results via gRPC"
  },
  "api/Jiro.App.Setup.AppConfigurator.html": {
    "href": "api/Jiro.App.Setup.AppConfigurator.html",
    "title": "Class AppConfigurator | Jiro Documentation",
    "keywords": "Class AppConfigurator Namespace Jiro.App.Setup Assembly Jiro.App.dll Provides configuration functionality for the Jiro application, including event configuration and database migration. public class AppConfigurator Inheritance object AppConfigurator Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors AppConfigurator(IHost) Initializes a new instance of the AppConfigurator class. public AppConfigurator(IHost app) Parameters app IHost The host application instance used for dependency injection and service resolution. Methods ConfigureEvents() Configures the application events, including logging events setup. public AppConfigurator ConfigureEvents() Returns AppConfigurator The current AppConfigurator instance for method chaining. Migrate() Executes database migrations for the Jiro application context. public AppConfigurator Migrate() Returns AppConfigurator The current AppConfigurator instance for method chaining."
  },
  "api/Jiro.App.Setup.EnvironmentConfigurator.html": {
    "href": "api/Jiro.App.Setup.EnvironmentConfigurator.html",
    "title": "Class EnvironmentConfigurator | Jiro Documentation",
    "keywords": "Class EnvironmentConfigurator Namespace Jiro.App.Setup Assembly Jiro.App.dll Provides configuration functionality for environment setup, including folder creation and configuration file management. public class EnvironmentConfigurator Inheritance object EnvironmentConfigurator Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors EnvironmentConfigurator(ConfigurationManager) Initializes a new instance of the EnvironmentConfigurator class. public EnvironmentConfigurator(ConfigurationManager config) Parameters config ConfigurationManager The configuration manager used for environment setup. Methods PrepareDefaultFolders() Creates default application folders if they don't exist. Uses configurable paths from DataPaths section or falls back to defaults. JIRO_ prefixed environment variables automatically override these configuration values. public EnvironmentConfigurator PrepareDefaultFolders() Returns EnvironmentConfigurator The current EnvironmentConfigurator instance for method chaining. PrepareLogsFolder() Prepares the logs folder based on the Serilog configuration, creating directories as needed. public EnvironmentConfigurator PrepareLogsFolder() Returns EnvironmentConfigurator The current EnvironmentConfigurator instance for method chaining."
  },
  "api/Jiro.App.Setup.EventsConfigurator.html": {
    "href": "api/Jiro.App.Setup.EventsConfigurator.html",
    "title": "Class EventsConfigurator | Jiro Documentation",
    "keywords": "Class EventsConfigurator Namespace Jiro.App.Setup Assembly Jiro.App.dll Provides configuration for application events, particularly for logging events from command handlers. public class EventsConfigurator Inheritance object EventsConfigurator Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors EventsConfigurator(ILogger<EventsConfigurator>, ICommandHandlerService) Initializes a new instance of the EventsConfigurator class. public EventsConfigurator(ILogger<EventsConfigurator> logger, ICommandHandlerService commandHandlerService) Parameters logger ILogger<EventsConfigurator> The logger instance for recording events. commandHandlerService ICommandHandlerService The command handler service to configure events for. Methods ConfigureLoggingEvents() Configures logging events by subscribing to the command handler's OnLog event. public void ConfigureLoggingEvents() OnCommandLog(string, object[]) Handles command log events by forwarding the message and arguments to the logger as information-level logs. public void OnCommandLog(string message, object[] args) Parameters message string The log message template. args object[] The arguments to format into the message template."
  },
  "api/Jiro.App.Setup.html": {
    "href": "api/Jiro.App.Setup.html",
    "title": "Namespace Jiro.App.Setup | Jiro Documentation",
    "keywords": "Namespace Jiro.App.Setup Classes AppConfigurator Provides configuration functionality for the Jiro application, including event configuration and database migration. EnvironmentConfigurator Provides configuration functionality for environment setup, including folder creation and configuration file management. EventsConfigurator Provides configuration for application events, particularly for logging events from command handlers."
  },
  "api/Jiro.App.Validation.ConfigurationValidator.html": {
    "href": "api/Jiro.App.Validation.ConfigurationValidator.html",
    "title": "Class ConfigurationValidator | Jiro Documentation",
    "keywords": "Class ConfigurationValidator Namespace Jiro.App.Validation Assembly Jiro.App.dll Provides comprehensive validation for Jiro application configuration. Validates all required settings before app startup and provides clear error messages. public static class ConfigurationValidator Inheritance object ConfigurationValidator Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods PrintValidationResults(List<string>, bool) Prints configuration validation results to the console with color coding. public static void PrintValidationResults(List<string> errors, bool isTestMode = false) Parameters errors List<string> List of validation errors isTestMode bool Whether the application is running in test mode ValidateSettings(IConfiguration, bool) Validates all required configuration settings and returns detailed error messages. In test mode, also sets default values for missing configurations. public static List<string> ValidateSettings(IConfiguration configuration, bool isTestMode = false) Parameters configuration IConfiguration The configuration manager to validate isTestMode bool Whether the application is running in test mode Returns List<string> A list of validation errors. Empty list indicates valid configuration."
  },
  "api/Jiro.App.Validation.html": {
    "href": "api/Jiro.App.Validation.html",
    "title": "Namespace Jiro.App.Validation | Jiro Documentation",
    "keywords": "Namespace Jiro.App.Validation Classes ConfigurationValidator Provides comprehensive validation for Jiro application configuration. Validates all required settings before app startup and provides clear error messages."
  },
  "api/Jiro.Core.Abstraction.BaseRepository-3.html": {
    "href": "api/Jiro.Core.Abstraction.BaseRepository-3.html",
    "title": "Class BaseRepository<TKeyType, TEntity, TContext> | Jiro Documentation",
    "keywords": "Class BaseRepository<TKeyType, TEntity, TContext> Namespace Jiro.Core.Abstraction Assembly Jiro.Core.dll Base repository implementation providing common data access operations. public class BaseRepository<TKeyType, TEntity, TContext> : IRepository<TKeyType, TEntity> where TKeyType : IConvertible where TEntity : DbModel<TKeyType>, new() where TContext : DbContext, new() Type Parameters TKeyType The type of the entity's primary key. TEntity The type of the entity. TContext The type of the database context. Inheritance object BaseRepository<TKeyType, TEntity, TContext> Implements IRepository<TKeyType, TEntity> Derived ChatSessionRepository MessageRepository Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors BaseRepository(TContext) Initializes a new instance of the BaseRepository<TKeyType, TEntity, TContext> class. public BaseRepository(TContext context) Parameters context TContext The database context. Fields _context The database context used for data access. protected readonly TContext _context Field Value TContext Methods AddAsync(TEntity?) Adds a new entity to the repository. public virtual Task<bool> AddAsync(TEntity? entity) Parameters entity TEntity The entity to add. Returns Task<bool> True if the entity was added successfully, false otherwise. AddRangeAsync(IEnumerable<TEntity>) Adds a collection of entities to the repository. public virtual Task<bool> AddRangeAsync(IEnumerable<TEntity> entities) Parameters entities IEnumerable<TEntity> The entities to add. Returns Task<bool> True if the entities were added successfully, false otherwise. AsQueryable() Gets an IQueryable for the entity set. public virtual IQueryable<TEntity> AsQueryable() Returns IQueryable<TEntity> An IQueryable of entities. GetAsync(TKeyType) Gets an entity by its primary key. public virtual Task<TEntity?> GetAsync(TKeyType id) Parameters id TKeyType The primary key value. Returns Task<TEntity> The entity if found, null otherwise. RemoveAsync(TKeyType) Removes an entity by its primary key. public virtual Task<bool> RemoveAsync(TKeyType id) Parameters id TKeyType The primary key value. Returns Task<bool> True if the entity was removed successfully, false otherwise. RemoveAsync(TEntity?) Removes an entity from the repository. public virtual Task<bool> RemoveAsync(TEntity? entity) Parameters entity TEntity The entity to remove. Returns Task<bool> True if the entity was removed successfully, false otherwise. RemoveRangeAsync(IEnumerable<TEntity>) Removes a collection of entities from the repository. public Task<bool> RemoveRangeAsync(IEnumerable<TEntity> entity) Parameters entity IEnumerable<TEntity> The entities to remove. Returns Task<bool> True if the entities were removed successfully, false otherwise. SaveChangesAsync() Saves all pending changes to the database. public virtual Task SaveChangesAsync() Returns Task A task representing the asynchronous save operation. UpdateAsync(TEntity?) Updates an existing entity in the repository. public virtual Task UpdateAsync(TEntity? entity) Parameters entity TEntity The entity to update. Returns Task A task representing the asynchronous operation. UpdateRange(IEnumerable<TEntity>) Updates a collection of entities in the repository. public virtual Task UpdateRange(IEnumerable<TEntity> entities) Parameters entities IEnumerable<TEntity> The entities to update. Returns Task A task representing the asynchronous operation."
  },
  "api/Jiro.Core.Abstraction.DbModel-1.html": {
    "href": "api/Jiro.Core.Abstraction.DbModel-1.html",
    "title": "Class DbModel<TKey> | Jiro Documentation",
    "keywords": "Class DbModel<TKey> Namespace Jiro.Core.Abstraction Assembly Jiro.Core.dll Base class for database entities with a generic primary key. public abstract class DbModel<TKey> where TKey : IConvertible Type Parameters TKey The type of the primary key. Inheritance object DbModel<TKey> Derived IdentityDbModel<TKey, TUserKey> ChatSession Message RefreshToken Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties Id Gets or sets the primary key for this entity. [Key] public virtual TKey Id { get; set; } Property Value TKey"
  },
  "api/Jiro.Core.Abstraction.IIdentityRepository-2.html": {
    "href": "api/Jiro.Core.Abstraction.IIdentityRepository-2.html",
    "title": "Interface IIdentityRepository<Tkey, TEntity> | Jiro Documentation",
    "keywords": "Interface IIdentityRepository<Tkey, TEntity> Namespace Jiro.Core.Abstraction Assembly Jiro.Core.dll Defines the contract for an identity-aware repository that extends the basic repository functionality with user context filtering capabilities. public interface IIdentityRepository<Tkey, TEntity> : IRepository<Tkey, TEntity> where Tkey : IConvertible where TEntity : IdentityDbModel<Tkey, string> Type Parameters Tkey The type of the entity's key that must implement IConvertible. TEntity The type of the entity that must inherit from IdentityDbModel. Inherited Members IRepository<Tkey, TEntity>.AsQueryable() IRepository<Tkey, TEntity>.GetAsync(Tkey) IRepository<Tkey, TEntity>.AddAsync(TEntity) IRepository<Tkey, TEntity>.AddRangeAsync(IEnumerable<TEntity>) IRepository<Tkey, TEntity>.RemoveAsync(Tkey) IRepository<Tkey, TEntity>.RemoveAsync(TEntity) IRepository<Tkey, TEntity>.RemoveRangeAsync(IEnumerable<TEntity>) IRepository<Tkey, TEntity>.UpdateAsync(TEntity) IRepository<Tkey, TEntity>.UpdateRange(IEnumerable<TEntity>) IRepository<Tkey, TEntity>.SaveChangesAsync() Methods AsIdentityQueryable() Returns an IQueryable<T> for the entity type filtered by the current user's identity. IQueryable<TEntity> AsIdentityQueryable() Returns IQueryable<TEntity> An IQueryable<T> instance containing only entities belonging to the current user."
  },
  "api/Jiro.Core.Abstraction.IRepository-2.html": {
    "href": "api/Jiro.Core.Abstraction.IRepository-2.html",
    "title": "Interface IRepository<Tkey, TEntity> | Jiro Documentation",
    "keywords": "Interface IRepository<Tkey, TEntity> Namespace Jiro.Core.Abstraction Assembly Jiro.Core.dll Defines the contract for a generic repository that provides basic CRUD operations for entities. public interface IRepository<Tkey, TEntity> where Tkey : IConvertible where TEntity : DbModel<Tkey> Type Parameters Tkey The type of the entity's key that must implement IConvertible. TEntity The type of the entity that must inherit from DbModel<TKey>. Methods AddAsync(TEntity?) Adds a new entity to the repository. Task<bool> AddAsync(TEntity? entity) Parameters entity TEntity The entity to add. Returns Task<bool> A task that represents the asynchronous operation. The task result indicates whether the operation was successful. AddRangeAsync(IEnumerable<TEntity>) Adds multiple entities to the repository. Task<bool> AddRangeAsync(IEnumerable<TEntity> entities) Parameters entities IEnumerable<TEntity> The collection of entities to add. Returns Task<bool> A task that represents the asynchronous operation. The task result indicates whether the operation was successful. AsQueryable() Returns an IQueryable<T> for the entity type to enable complex queries. IQueryable<TEntity> AsQueryable() Returns IQueryable<TEntity> An IQueryable<T> instance for the entity type. GetAsync(Tkey) Retrieves an entity by its unique identifier. Task<TEntity?> GetAsync(Tkey id) Parameters id Tkey The unique identifier of the entity. Returns Task<TEntity> A task that represents the asynchronous operation. The task result contains the entity or null if not found. RemoveAsync(Tkey) Removes an entity from the repository by its unique identifier. Task<bool> RemoveAsync(Tkey id) Parameters id Tkey The unique identifier of the entity to remove. Returns Task<bool> A task that represents the asynchronous operation. The task result indicates whether the operation was successful. RemoveAsync(TEntity?) Removes the specified entity from the repository. Task<bool> RemoveAsync(TEntity? entity) Parameters entity TEntity The entity to remove. Returns Task<bool> A task that represents the asynchronous operation. The task result indicates whether the operation was successful. RemoveRangeAsync(IEnumerable<TEntity>) Removes multiple entities from the repository. Task<bool> RemoveRangeAsync(IEnumerable<TEntity> entity) Parameters entity IEnumerable<TEntity> The collection of entities to remove. Returns Task<bool> A task that represents the asynchronous operation. The task result indicates whether the operation was successful. SaveChangesAsync() Saves all pending changes to the underlying data store. Task SaveChangesAsync() Returns Task A task that represents the asynchronous operation. UpdateAsync(TEntity?) Updates an existing entity in the repository. Task UpdateAsync(TEntity? entity) Parameters entity TEntity The entity to update. Returns Task A task that represents the asynchronous operation. UpdateRange(IEnumerable<TEntity>) Updates multiple entities in the repository. Task UpdateRange(IEnumerable<TEntity> entities) Parameters entities IEnumerable<TEntity> The collection of entities to update. Returns Task A task that represents the asynchronous operation."
  },
  "api/Jiro.Core.Abstraction.IdentityBaseRepository-3.html": {
    "href": "api/Jiro.Core.Abstraction.IdentityBaseRepository-3.html",
    "title": "Class IdentityBaseRepository<TKeyType, TEntity, TContext> | Jiro Documentation",
    "keywords": "Class IdentityBaseRepository<TKeyType, TEntity, TContext> Namespace Jiro.Core.Abstraction Assembly Jiro.Core.dll Base repository implementation for identity-aware entities that provides CRUD operations with user context filtering. public class IdentityBaseRepository<TKeyType, TEntity, TContext> : IIdentityRepository<TKeyType, TEntity>, IRepository<TKeyType, TEntity> where TKeyType : IConvertible where TEntity : IdentityDbModel<TKeyType, string>, new() where TContext : IdentityDbContext<AppUser, AppRole, string, IdentityUserClaim<string>, AppUserRole, IdentityUserLogin<string>, IdentityRoleClaim<string>, IdentityUserToken<string>>, new() Type Parameters TKeyType The type of the primary key for the entity. TEntity The entity type that inherits from IdentityDbModel. TContext The database context type that inherits from IdentityDbContext. Inheritance object IdentityBaseRepository<TKeyType, TEntity, TContext> Implements IIdentityRepository<TKeyType, TEntity> IRepository<TKeyType, TEntity> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors IdentityBaseRepository(TContext, ICommandContext) Initializes a new instance of the IdentityBaseRepository class. public IdentityBaseRepository(TContext context, ICommandContext currentUser) Parameters context TContext The database context to use for operations. currentUser ICommandContext The current user context for identity filtering. Fields _context The database context instance used for data operations. protected readonly TContext _context Field Value TContext Methods AddAsync(TEntity?) Asynchronously adds a new entity to the repository if it doesn't already exist for the current user. public virtual Task<bool> AddAsync(TEntity? entity) Parameters entity TEntity The entity to add. Returns Task<bool> True if the entity was added successfully; otherwise, false. AddRangeAsync(IEnumerable<TEntity>) Asynchronously adds a collection of entities to the repository. public virtual Task<bool> AddRangeAsync(IEnumerable<TEntity> entities) Parameters entities IEnumerable<TEntity> The entities to add. Returns Task<bool> True if the entities were added successfully; otherwise, false. AsIdentityQueryable() Returns a queryable interface for entities filtered by the current user's identity. public virtual IQueryable<TEntity> AsIdentityQueryable() Returns IQueryable<TEntity> An IQueryable of entities belonging to the current user. AsQueryable() Returns a queryable interface for all entities in the repository without identity filtering. public virtual IQueryable<TEntity> AsQueryable() Returns IQueryable<TEntity> An IQueryable of all entities. GetAsync(TKeyType) Asynchronously retrieves an entity by its ID for the current user. public virtual Task<TEntity?> GetAsync(TKeyType id) Parameters id TKeyType The ID of the entity to retrieve. Returns Task<TEntity> The entity if found; otherwise, null. RemoveAsync(TKeyType) Asynchronously removes an entity by its ID for the current user. public virtual Task<bool> RemoveAsync(TKeyType id) Parameters id TKeyType The ID of the entity to remove. Returns Task<bool> True if the entity was removed successfully; otherwise, false. RemoveAsync(TEntity?) Asynchronously removes the specified entity for the current user. public virtual Task<bool> RemoveAsync(TEntity? entity) Parameters entity TEntity The entity to remove. Returns Task<bool> True if the entity was removed successfully; otherwise, false. RemoveRangeAsync(IEnumerable<TEntity>) Asynchronously removes a collection of entities from the repository. public Task<bool> RemoveRangeAsync(IEnumerable<TEntity> entity) Parameters entity IEnumerable<TEntity> The entities to remove. Returns Task<bool> True if the entities were removed successfully; otherwise, false. SaveChangesAsync() Asynchronously saves all changes made to the repository. public virtual Task SaveChangesAsync() Returns Task A task representing the asynchronous save operation. UpdateAsync(TEntity?) Asynchronously updates the specified entity in the repository. public virtual Task UpdateAsync(TEntity? entity) Parameters entity TEntity The entity to update. Returns Task A task representing the asynchronous operation. UpdateRange(IEnumerable<TEntity>) Asynchronously updates a collection of entities in the repository. public virtual Task UpdateRange(IEnumerable<TEntity> entities) Parameters entities IEnumerable<TEntity> The entities to update. Returns Task A task representing the asynchronous operation."
  },
  "api/Jiro.Core.Abstraction.IdentityDbModel-2.html": {
    "href": "api/Jiro.Core.Abstraction.IdentityDbModel-2.html",
    "title": "Class IdentityDbModel<TKey, TUserKey> | Jiro Documentation",
    "keywords": "Class IdentityDbModel<TKey, TUserKey> Namespace Jiro.Core.Abstraction Assembly Jiro.Core.dll Base class for database entities that are associated with a specific user, extending the basic DbModel functionality. public class IdentityDbModel<TKey, TUserKey> : DbModel<TKey> where TKey : IConvertible where TUserKey : IConvertible Type Parameters TKey The type of the primary key for the entity. TUserKey The type of the user identifier key. Inheritance object DbModel<TKey> IdentityDbModel<TKey, TUserKey> Inherited Members DbModel<TKey>.Id object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties UserId Gets or sets the identifier of the user who owns this entity. public virtual TUserKey UserId { get; set; } Property Value TUserKey"
  },
  "api/Jiro.Core.Abstraction.html": {
    "href": "api/Jiro.Core.Abstraction.html",
    "title": "Namespace Jiro.Core.Abstraction | Jiro Documentation",
    "keywords": "Namespace Jiro.Core.Abstraction Classes BaseRepository<TKeyType, TEntity, TContext> Base repository implementation providing common data access operations. DbModel<TKey> Base class for database entities with a generic primary key. IdentityBaseRepository<TKeyType, TEntity, TContext> Base repository implementation for identity-aware entities that provides CRUD operations with user context filtering. IdentityDbModel<TKey, TUserKey> Base class for database entities that are associated with a specific user, extending the basic DbModel functionality. Interfaces IIdentityRepository<Tkey, TEntity> Defines the contract for an identity-aware repository that extends the basic repository functionality with user context filtering capabilities. IRepository<Tkey, TEntity> Defines the contract for a generic repository that provides basic CRUD operations for entities."
  },
  "api/Jiro.Core.Attributes.AnomifyAttribute.html": {
    "href": "api/Jiro.Core.Attributes.AnomifyAttribute.html",
    "title": "Class AnomifyAttribute | Jiro Documentation",
    "keywords": "Class AnomifyAttribute Namespace Jiro.Core.Attributes Assembly Jiro.Core.dll Attribute used to mark properties that should be anonymized or obfuscated in logs or output. This attribute can be applied to properties to indicate they contain sensitive data. [AttributeUsage(AttributeTargets.Property)] public class AnomifyAttribute : Attribute Inheritance object Attribute AnomifyAttribute Inherited Members Attribute.Equals(object) Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, bool) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, bool) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, bool) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, bool) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, bool) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, bool) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, bool) Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, bool) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, bool) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module, Type, bool) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, bool) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, bool) Attribute.GetHashCode() Attribute.IsDefaultAttribute() Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, bool) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, bool) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, bool) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, bool) Attribute.Match(object) Attribute.TypeId object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString()"
  },
  "api/Jiro.Core.Attributes.html": {
    "href": "api/Jiro.Core.Attributes.html",
    "title": "Namespace Jiro.Core.Attributes | Jiro Documentation",
    "keywords": "Namespace Jiro.Core.Attributes Classes AnomifyAttribute Attribute used to mark properties that should be anonymized or obfuscated in logs or output. This attribute can be applied to properties to indicate they contain sensitive data."
  },
  "api/Jiro.Core.Commands.BaseCommands.BaseCommand.html": {
    "href": "api/Jiro.Core.Commands.BaseCommands.BaseCommand.html",
    "title": "Class BaseCommand | Jiro Documentation",
    "keywords": "Class BaseCommand Namespace Jiro.Core.Commands.BaseCommands Assembly Jiro.Core.dll Base command module that provides fundamental commands available in all Jiro instances. [CommandModule(\"BaseCommands\")] public class BaseCommand : ICommandBase Inheritance object BaseCommand Implements ICommandBase Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors BaseCommand(IHelpService) Initializes a new instance of the BaseCommand class. public BaseCommand(IHelpService helpService) Parameters helpService IHelpService The help service for generating command documentation. Methods Help() Displays help information for all available commands and their syntax. [Command(\"help\", CommandType.Text, \"\", \"Shows all available commands and their syntax\")] public Task<ICommandResult> Help() Returns Task<ICommandResult> A task representing the asynchronous operation that returns command help information."
  },
  "api/Jiro.Core.Commands.BaseCommands.html": {
    "href": "api/Jiro.Core.Commands.BaseCommands.html",
    "title": "Namespace Jiro.Core.Commands.BaseCommands | Jiro Documentation",
    "keywords": "Namespace Jiro.Core.Commands.BaseCommands Classes BaseCommand Base command module that provides fundamental commands available in all Jiro instances."
  },
  "api/Jiro.Core.Commands.Chat.ChatCommand.html": {
    "href": "api/Jiro.Core.Commands.Chat.ChatCommand.html",
    "title": "Class ChatCommand | Jiro Documentation",
    "keywords": "Class ChatCommand Namespace Jiro.Core.Commands.Chat Assembly Jiro.Core.dll Command module that provides chat functionality using AI conversation services. [CommandModule(\"Chat\")] public class ChatCommand : ICommandBase Inheritance object ChatCommand Implements ICommandBase Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors ChatCommand(IPersonalizedConversationService, ICommandContext, IMessageManager, IInstanceMetadataAccessor, ILogger<ChatCommand>) Initializes a new instance of the ChatCommand class. public ChatCommand(IPersonalizedConversationService chatService, ICommandContext commandContext, IMessageManager messageManager, IInstanceMetadataAccessor instanceMetadataAccessor, ILogger<ChatCommand> logger) Parameters chatService IPersonalizedConversationService The personalized conversation service. commandContext ICommandContext The command context. messageManager IMessageManager The message manager. instanceMetadataAccessor IInstanceMetadataAccessor The instance metadata accessor. logger ILogger<ChatCommand> The logger for this command. Exceptions ArgumentNullException Thrown when any of the required parameters is null. Methods Chat(string) Processes a chat prompt using the AI conversation service and returns the response. [Command(\"chat\", CommandType.Text, \"\", \"\")] public Task<ICommandResult> Chat(string prompt) Parameters prompt string The user's chat prompt or message. Returns Task<ICommandResult> A task representing the asynchronous operation that returns the AI's response. Exceptions JiroException Thrown when the session is not found. ClearSession() Clears the current session by removing the session ID from the command context. [Command(\"reset\", CommandType.Text, \"\", \"Clears the current session\")] public Task ClearSession() Returns Task A completed task."
  },
  "api/Jiro.Core.Commands.Chat.html": {
    "href": "api/Jiro.Core.Commands.Chat.html",
    "title": "Namespace Jiro.Core.Commands.Chat | Jiro Documentation",
    "keywords": "Namespace Jiro.Core.Commands.Chat Classes ChatCommand Command module that provides chat functionality using AI conversation services."
  },
  "api/Jiro.Core.Commands.ComplexCommandResults.SessionResult.html": {
    "href": "api/Jiro.Core.Commands.ComplexCommandResults.SessionResult.html",
    "title": "Class SessionResult | Jiro Documentation",
    "keywords": "Class SessionResult Namespace Jiro.Core.Commands.ComplexCommandResults Assembly Jiro.Core.dll Represents a chat session result containing session metadata and associated messages. public class SessionResult Inheritance object SessionResult Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors SessionResult() Initializes a new instance of the SessionResult class. public SessionResult() SessionResult(Session) Initializes a new instance of the SessionResult class based on a session model. public SessionResult(Session session) Parameters session Session The session model to convert from. Properties CreatedAt Gets or sets the date and time when the session was created. public DateTime CreatedAt { get; set; } Property Value DateTime LastUpdatedAt Gets or sets the date and time when the session was last updated. public DateTime LastUpdatedAt { get; set; } Property Value DateTime Messages Gets or sets the collection of trimmed messages associated with the session. public List<TrimmedMessageResult> Messages { get; set; } Property Value List<TrimmedMessageResult> SessionId Gets or sets the unique identifier for the chat session. public string SessionId { get; set; } Property Value string"
  },
  "api/Jiro.Core.Commands.ComplexCommandResults.TrimmedMessageResult.html": {
    "href": "api/Jiro.Core.Commands.ComplexCommandResults.TrimmedMessageResult.html",
    "title": "Class TrimmedMessageResult | Jiro Documentation",
    "keywords": "Class TrimmedMessageResult Namespace Jiro.Core.Commands.ComplexCommandResults Assembly Jiro.Core.dll Represents a simplified message result containing essential message information for command responses. public class TrimmedMessageResult Inheritance object TrimmedMessageResult Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors TrimmedMessageResult() Initializes a new instance of the TrimmedMessageResult class. public TrimmedMessageResult() TrimmedMessageResult(string, string, bool, DateTime, MessageType) Initializes a new instance of the TrimmedMessageResult class with specified values. public TrimmedMessageResult(string id, string content, bool isUser, DateTime createdAt, MessageType type) Parameters id string The unique identifier of the message. content string The text content of the message. isUser bool A value indicating whether the message was sent by a user. createdAt DateTime The date and time when the message was created. type MessageType The type of the message. Properties Content Gets or sets the text content of the message. public string Content { get; set; } Property Value string CreatedAt Gets or sets the date and time when the message was created. public DateTime CreatedAt { get; set; } Property Value DateTime Id Gets or sets the unique identifier of the message. public string Id { get; set; } Property Value string IsUser Gets or sets a value indicating whether the message was sent by a user (true) or assistant (false). public bool IsUser { get; set; } Property Value bool Type Gets or sets the type of the message (text, image, etc.). public MessageType Type { get; set; } Property Value MessageType"
  },
  "api/Jiro.Core.Commands.ComplexCommandResults.html": {
    "href": "api/Jiro.Core.Commands.ComplexCommandResults.html",
    "title": "Namespace Jiro.Core.Commands.ComplexCommandResults | Jiro Documentation",
    "keywords": "Namespace Jiro.Core.Commands.ComplexCommandResults Classes SessionResult Represents a chat session result containing session metadata and associated messages. TrimmedMessageResult Represents a simplified message result containing essential message information for command responses."
  },
  "api/Jiro.Core.Commands.Net.NetCommands.html": {
    "href": "api/Jiro.Core.Commands.Net.NetCommands.html",
    "title": "Class NetCommands | Jiro Documentation",
    "keywords": "Class NetCommands Namespace Jiro.Core.Commands.Net Assembly Jiro.Core.dll Command module that provides network-related operations such as HTTP requests. [CommandModule(\"Net\")] public class NetCommands : ICommandBase Inheritance object NetCommands Implements ICommandBase Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors NetCommands(IHttpClientFactory) Initializes a new instance of the NetCommands class. public NetCommands(IHttpClientFactory clientFactory) Parameters clientFactory IHttpClientFactory The HTTP client factory for creating HTTP clients. Methods Get(string) Performs an HTTP GET request to the specified URL and returns the response content. [Command(\"GET\", CommandType.Text, \"\", \"\")] public Task<ICommandResult> Get(string url) Parameters url string The URL to send the GET request to. Returns Task<ICommandResult> A task representing the asynchronous operation that returns the response content wrapped in a markdown code block."
  },
  "api/Jiro.Core.Commands.Net.html": {
    "href": "api/Jiro.Core.Commands.Net.html",
    "title": "Namespace Jiro.Core.Commands.Net | Jiro Documentation",
    "keywords": "Namespace Jiro.Core.Commands.Net Classes NetCommands Command module that provides network-related operations such as HTTP requests."
  },
  "api/Jiro.Core.Commands.System.SystemCommand.html": {
    "href": "api/Jiro.Core.Commands.System.SystemCommand.html",
    "title": "Class SystemCommand | Jiro Documentation",
    "keywords": "Class SystemCommand Namespace Jiro.Core.Commands.System Assembly Jiro.Core.dll System administration commands for Jiro instance management [CommandModule(\"System\")] public class SystemCommand : ICommandBase Inheritance object SystemCommand Implements ICommandBase Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors SystemCommand(ILogger<SystemCommand>, ICommandContext, IMessageManager, IHelpService, IConfiguration, ILogsProviderService, IConfigProviderService, IThemeService, IInstanceMetadataAccessor) Initializes a new instance of the SystemCommand class public SystemCommand(ILogger<SystemCommand> logger, ICommandContext commandContext, IMessageManager messageManager, IHelpService helpService, IConfiguration configuration, ILogsProviderService logsProviderService, IConfigProviderService configProviderService, IThemeService themeService, IInstanceMetadataAccessor instanceMetadataAccessor) Parameters logger ILogger<SystemCommand> commandContext ICommandContext messageManager IMessageManager helpService IHelpService configuration IConfiguration logsProviderService ILogsProviderService configProviderService IConfigProviderService themeService IThemeService instanceMetadataAccessor IInstanceMetadataAccessor Methods GetCommandsMetadata() Retrieves metadata about available commands [Command(\"getCommandsMetadata\", CommandType.Text, \"\", \"Retrieves metadata about available commands\")] public Task<ICommandResult> GetCommandsMetadata() Returns Task<ICommandResult> GetConfig() Retrieves current system configuration [Command(\"getConfig\", CommandType.Text, \"\", \"Retrieves current system configuration\")] public Task<ICommandResult> GetConfig() Returns Task<ICommandResult> GetCustomThemes() Retrieves available custom themes [Command(\"getCustomThemes\", CommandType.Text, \"\", \"Retrieves available custom themes\")] public Task<ICommandResult> GetCustomThemes() Returns Task<ICommandResult> GetLogs(string?, int) Retrieves system logs with optional filtering [Command(\"getLogs\", CommandType.Text, \"\", \"Retrieves system logs with optional level and limit filtering\")] public Task<ICommandResult> GetLogs(string? level = null, int limit = 100) Parameters level string limit int Returns Task<ICommandResult> GetSessionInfo() Shows current session information - demonstrates session context availability [Command(\"sessionInfo\", CommandType.Text, \"\", \"Shows current session information\")] public Task<ICommandResult> GetSessionInfo() Returns Task<ICommandResult> GetSessions() Retrieves all chat sessions for the current instance [Command(\"getSessions\", CommandType.Text, \"\", \"Retrieves all chat sessions for the current instance\")] public Task<ICommandResult> GetSessions() Returns Task<ICommandResult> UpdateConfig(string) Updates system configuration (limited scope for security) [Command(\"updateConfig\", CommandType.Text, \"\", \"Updates system configuration\")] public Task<ICommandResult> UpdateConfig(string config) Parameters config string Returns Task<ICommandResult>"
  },
  "api/Jiro.Core.Commands.System.html": {
    "href": "api/Jiro.Core.Commands.System.html",
    "title": "Namespace Jiro.Core.Commands.System | Jiro Documentation",
    "keywords": "Namespace Jiro.Core.Commands.System Classes SystemCommand System administration commands for Jiro instance management"
  },
  "api/Jiro.Core.Commands.Weather.WeatherCommand.html": {
    "href": "api/Jiro.Core.Commands.Weather.WeatherCommand.html",
    "title": "Class WeatherCommand | Jiro Documentation",
    "keywords": "Class WeatherCommand Namespace Jiro.Core.Commands.Weather Assembly Jiro.Core.dll Command module that provides weather forecast functionality with graphical data visualization. [CommandModule(\"Weather\")] public class WeatherCommand : ICommandBase Inheritance object WeatherCommand Implements ICommandBase Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors WeatherCommand(IWeatherService, IMessageManager) Initializes a new instance of the WeatherCommand class. public WeatherCommand(IWeatherService weatherService, IMessageManager messageManager) Parameters weatherService IWeatherService The weather service for retrieving weather data. messageManager IMessageManager The message manager for handling messages. Exceptions ArgumentNullException Thrown when any of the required parameters is null. Methods Weather(string, int) Retrieves and displays weather forecast data for the specified location as a graph. [Command(\"weather\", CommandType.Graph, \"weather \\\"Location\\\" [daysRange]\", \"Shows weather forecast for the specified location (24 hours by default)\")] public Task<ICommandResult> Weather(string location, int daysRange) Parameters location string The location for which to retrieve weather data. daysRange int The number of days to include in the forecast (1-7 days, defaults to 1). Returns Task<ICommandResult> A task representing the asynchronous operation that returns weather graph data."
  },
  "api/Jiro.Core.Commands.Weather.html": {
    "href": "api/Jiro.Core.Commands.Weather.html",
    "title": "Namespace Jiro.Core.Commands.Weather | Jiro Documentation",
    "keywords": "Namespace Jiro.Core.Commands.Weather Classes WeatherCommand Command module that provides weather forecast functionality with graphical data visualization."
  },
  "api/Jiro.Core.Constants.AI.html": {
    "href": "api/Jiro.Core.Constants.AI.html",
    "title": "Class AI | Jiro Documentation",
    "keywords": "Class AI Namespace Jiro.Core.Constants Assembly Jiro.Core.dll Contains AI model identifiers and configuration constants. public class AI Inheritance object AI Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Fields Gpt3Model The identifier for the GPT-3.5 Turbo model. public const string Gpt3Model = \"gpt-3.5-turbo\" Field Value string Gpt4Model The identifier for the GPT-4 Turbo model. public const string Gpt4Model = \"gpt-4-turbo\" Field Value string Gpt4oMiniModel The identifier for the GPT-4o Mini model. public const string Gpt4oMiniModel = \"gpt-4o-mini\" Field Value string Gpt4oModel The identifier for the GPT-4o Turbo model. public const string Gpt4oModel = \"gpt-4o-turbo\" Field Value string"
  },
  "api/Jiro.Core.Constants.AgentMetadata.html": {
    "href": "api/Jiro.Core.Constants.AgentMetadata.html",
    "title": "Class AgentMetadata | Jiro Documentation",
    "keywords": "Class AgentMetadata Namespace Jiro.Core.Constants Assembly Jiro.Core.dll Contains metadata information about the Jiro agent. public class AgentMetadata Inheritance object AgentMetadata Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Fields CachePrefix The prefix used for cache keys to identify Jiro-related cached data. public const string CachePrefix = \"JIRO\" Field Value string Name The name of the agent. public const string Name = \"Jiro\" Field Value string"
  },
  "api/Jiro.Core.Constants.ApiEndpoints.html": {
    "href": "api/Jiro.Core.Constants.ApiEndpoints.html",
    "title": "Class ApiEndpoints | Jiro Documentation",
    "keywords": "Class ApiEndpoints Namespace Jiro.Core.Constants Assembly Jiro.Core.dll Contains API endpoint constants for external service integrations. These endpoints are deprecated and marked for removal. public class ApiEndpoints Inheritance object ApiEndpoints Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Fields CHAT_GPT_COMPLETIONS The API endpoint for ChatGPT completions. This endpoint is obsolete and should not be used. [Obsolete] public const string CHAT_GPT_COMPLETIONS = \"chat/completions\" Field Value string GPT_COMPLETIONS The API endpoint for GPT completions. This endpoint is obsolete and should not be used. [Obsolete] public const string GPT_COMPLETIONS = \"completions\" Field Value string"
  },
  "api/Jiro.Core.Constants.CacheKeys.html": {
    "href": "api/Jiro.Core.Constants.CacheKeys.html",
    "title": "Class CacheKeys | Jiro Documentation",
    "keywords": "Class CacheKeys Namespace Jiro.Core.Constants Assembly Jiro.Core.dll Contains cache key constants used for storing and retrieving data from the cache. public class CacheKeys Inheritance object CacheKeys Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Fields ComputedPersonaMessageKey The cache key for storing the computed persona message. public const string ComputedPersonaMessageKey = \"JIRO::ComputedPersona\" Field Value string CorePersonaMessageKey The cache key for storing the core persona message. public const string CorePersonaMessageKey = \"JIRO::Persona\" Field Value string InstanceKey The cache key for storing the instance ID of the Jiro agent. public const string InstanceKey = \"JIRO::Instance\" Field Value string SessionKey The cache key for storing session data. public const string SessionKey = \"JIRO::Session\" Field Value string SessionsKey The cache key for storing session information. public const string SessionsKey = \"JIRO::Sessions\" Field Value string"
  },
  "api/Jiro.Core.Constants.CookieNames.html": {
    "href": "api/Jiro.Core.Constants.CookieNames.html",
    "title": "Class CookieNames | Jiro Documentation",
    "keywords": "Class CookieNames Namespace Jiro.Core.Constants Assembly Jiro.Core.dll Contains cookie name constants used for authentication and session management. public class CookieNames Inheritance object CookieNames Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Fields ACCESS_TOKEN The cookie name for storing access tokens. public const string ACCESS_TOKEN = \"X-Access-Token\" Field Value string REFRESH_TOKEN The cookie name for storing refresh tokens. public const string REFRESH_TOKEN = \"X-Refresh-Token\" Field Value string"
  },
  "api/Jiro.Core.Constants.Environment.html": {
    "href": "api/Jiro.Core.Constants.Environment.html",
    "title": "Class Environment | Jiro Documentation",
    "keywords": "Class Environment Namespace Jiro.Core.Constants Assembly Jiro.Core.dll Contains environment variable names used throughout the Jiro application. public class Environment Inheritance object Environment Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Fields MessageFetchCount The environment variable name for configuring the number of messages to fetch from the cache. public const string MessageFetchCount = \"JIRO_MESSAGE_FETCH_COUNT\" Field Value string"
  },
  "api/Jiro.Core.Constants.HttpClients.html": {
    "href": "api/Jiro.Core.Constants.HttpClients.html",
    "title": "Class HttpClients | Jiro Documentation",
    "keywords": "Class HttpClients Namespace Jiro.Core.Constants Assembly Jiro.Core.dll Contains names of HTTP clients used in the Jiro application. public class HttpClients Inheritance object HttpClients Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Fields GEOLOCATION_CLIENT The name of the HTTP client used for geolocation-related operations. public const string GEOLOCATION_CLIENT = \"GeoLocationClient\" Field Value string JIRO The name of the HTTP client used for Jiro-specific operations. public const string JIRO = \"Jiro\" Field Value string JIRO_GRPC The name of the HTTP client used for Jiro-specific gRPC operations. public const string JIRO_GRPC = \"JiroGrpc\" Field Value string WEATHER_CLIENT The name of the HTTP client used for weather-related operations. public const string WEATHER_CLIENT = \"WeatherClient\" Field Value string"
  },
  "api/Jiro.Core.Constants.Paths.html": {
    "href": "api/Jiro.Core.Constants.Paths.html",
    "title": "Class Paths | Jiro Documentation",
    "keywords": "Class Paths Namespace Jiro.Core.Constants Assembly Jiro.Core.dll Contains file system path constants used by the application. public class Paths Inheritance object Paths Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Fields MessageBasePath The base directory path for storing message files. public static string MessageBasePath Field Value string"
  },
  "api/Jiro.Core.Constants.Policies.html": {
    "href": "api/Jiro.Core.Constants.Policies.html",
    "title": "Class Policies | Jiro Documentation",
    "keywords": "Class Policies Namespace Jiro.Core.Constants Assembly Jiro.Core.dll Contains authorization policy name constants used throughout the application. public class Policies Inheritance object Policies Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Fields WHITE_LIST The name of the whitelist authorization policy that restricts access to whitelisted users. public const string WHITE_LIST = \"whitelist\" Field Value string"
  },
  "api/Jiro.Core.Constants.Roles.html": {
    "href": "api/Jiro.Core.Constants.Roles.html",
    "title": "Class Roles | Jiro Documentation",
    "keywords": "Class Roles Namespace Jiro.Core.Constants Assembly Jiro.Core.dll Contains user role constants used for authorization and access control. public class Roles Inheritance object Roles Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Fields ADMIN The administrator role with full system access privileges. public const string ADMIN = \"admin\" Field Value string SERVER The server role used for system-to-system communication. public const string SERVER = \"server\" Field Value string USER The standard user role with basic access privileges. public const string USER = \"user\" Field Value string"
  },
  "api/Jiro.Core.Constants.html": {
    "href": "api/Jiro.Core.Constants.html",
    "title": "Namespace Jiro.Core.Constants | Jiro Documentation",
    "keywords": "Namespace Jiro.Core.Constants Classes AI Contains AI model identifiers and configuration constants. AgentMetadata Contains metadata information about the Jiro agent. ApiEndpoints Contains API endpoint constants for external service integrations. These endpoints are deprecated and marked for removal. CacheKeys Contains cache key constants used for storing and retrieving data from the cache. CookieNames Contains cookie name constants used for authentication and session management. Environment Contains environment variable names used throughout the Jiro application. HttpClients Contains names of HTTP clients used in the Jiro application. Paths Contains file system path constants used by the application. Policies Contains authorization policy name constants used throughout the application. Roles Contains user role constants used for authorization and access control."
  },
  "api/Jiro.Core.DTO.AssignRoleDTO.html": {
    "href": "api/Jiro.Core.DTO.AssignRoleDTO.html",
    "title": "Class AssignRoleDTO | Jiro Documentation",
    "keywords": "Class AssignRoleDTO Namespace Jiro.Core.DTO Assembly Jiro.Core.dll Data transfer object for role assignment requests to assign a specific role to a user. public class AssignRoleDTO Inheritance object AssignRoleDTO Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties Role Gets or sets the name of the role to assign to the user. public string Role { get; set; } Property Value string UserId Gets or sets the unique identifier of the user to assign the role to. public string UserId { get; set; } Property Value string"
  },
  "api/Jiro.Core.DTO.ChangeEmailDTO.html": {
    "href": "api/Jiro.Core.DTO.ChangeEmailDTO.html",
    "title": "Class ChangeEmailDTO | Jiro Documentation",
    "keywords": "Class ChangeEmailDTO Namespace Jiro.Core.DTO Assembly Jiro.Core.dll Data transfer object for email change requests, requiring the new email and current password for verification. public class ChangeEmailDTO Inheritance object ChangeEmailDTO Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties NewEmail Gets or sets the new email address to change to. public string NewEmail { get; set; } Property Value string Password Gets or sets the current password for verification of the change request. public string Password { get; set; } Property Value string"
  },
  "api/Jiro.Core.DTO.ChangePasswordDTO.html": {
    "href": "api/Jiro.Core.DTO.ChangePasswordDTO.html",
    "title": "Class ChangePasswordDTO | Jiro Documentation",
    "keywords": "Class ChangePasswordDTO Namespace Jiro.Core.DTO Assembly Jiro.Core.dll Data transfer object for password change requests, requiring both current and new passwords. public class ChangePasswordDTO Inheritance object ChangePasswordDTO Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties CurrentPassword Gets or sets the current password for verification of the change request. public string CurrentPassword { get; set; } Property Value string NewPassword Gets or sets the new password to change to. public string NewPassword { get; set; } Property Value string"
  },
  "api/Jiro.Core.DTO.ChatGpt.html": {
    "href": "api/Jiro.Core.DTO.ChatGpt.html",
    "title": "Class ChatGpt | Jiro Documentation",
    "keywords": "Class ChatGpt Namespace Jiro.Core.DTO Assembly Jiro.Core.dll Configuration settings specific to ChatGPT functionality. public class ChatGpt Inheritance object ChatGpt Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties SystemMessage Gets or sets the system message that defines the AI assistant's personality and behavior. [JsonPropertyName(\"SystemMessage\")] public string? SystemMessage { get; set; } Property Value string"
  },
  "api/Jiro.Core.DTO.ConnectionStrings.html": {
    "href": "api/Jiro.Core.DTO.ConnectionStrings.html",
    "title": "Class ConnectionStrings | Jiro Documentation",
    "keywords": "Class ConnectionStrings Namespace Jiro.Core.DTO Assembly Jiro.Core.dll Database connection strings configuration. public class ConnectionStrings Inheritance object ConnectionStrings Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties JiroContext Gets or sets the connection string for the main Jiro database context. [JsonPropertyName(\"JiroContext\")] public string? JiroContext { get; set; } Property Value string"
  },
  "api/Jiro.Core.DTO.Gpt.html": {
    "href": "api/Jiro.Core.DTO.Gpt.html",
    "title": "Class Gpt | Jiro Documentation",
    "keywords": "Class Gpt Namespace Jiro.Core.DTO Assembly Jiro.Core.dll Configuration settings for GPT AI service integration. public class Gpt Inheritance object Gpt Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties AuthToken Gets or sets the authentication token for accessing the GPT API. [JsonPropertyName(\"AuthToken\")] public string? AuthToken { get; set; } Property Value string BaseUrl Gets or sets the base URL for the GPT API service. [JsonPropertyName(\"BaseUrl\")] public string? BaseUrl { get; set; } Property Value string ChatGpt Gets or sets the ChatGPT-specific configuration settings. [JsonPropertyName(\"ChatGpt\")] public ChatGpt? ChatGpt { get; set; } Property Value ChatGpt Enable Gets or sets a value indicating whether GPT functionality is enabled. [JsonPropertyName(\"Enable\")] public bool? Enable { get; set; } Property Value bool? FineTune Gets or sets a value indicating whether fine-tuning features are enabled. [JsonPropertyName(\"FineTune\")] public bool? FineTune { get; set; } Property Value bool? Organization Gets or sets the organization identifier for the GPT API. [JsonPropertyName(\"Organization\")] public string? Organization { get; set; } Property Value string SingleGpt Gets or sets the single GPT model configuration settings. [JsonPropertyName(\"SingleGpt\")] public SingleGpt? SingleGpt { get; set; } Property Value SingleGpt UseChatGpt Gets or sets a value indicating whether to use ChatGPT instead of legacy GPT models. [JsonPropertyName(\"UseChatGpt\")] public bool? UseChatGpt { get; set; } Property Value bool?"
  },
  "api/Jiro.Core.DTO.InstanceConfigDTO.html": {
    "href": "api/Jiro.Core.DTO.InstanceConfigDTO.html",
    "title": "Class InstanceConfigDTO | Jiro Documentation",
    "keywords": "Class InstanceConfigDTO Namespace Jiro.Core.DTO Assembly Jiro.Core.dll Data transfer object representing the complete configuration for a Jiro instance. public class InstanceConfigDTO Inheritance object InstanceConfigDTO Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties AllowedHosts Gets or sets the allowed hosts configuration for CORS and security. [JsonPropertyName(\"AllowedHosts\")] public string? AllowedHosts { get; set; } Property Value string ConnectionStrings Gets or sets the database connection strings configuration. [JsonPropertyName(\"ConnectionStrings\")] public ConnectionStrings? ConnectionStrings { get; set; } Property Value ConnectionStrings Gpt Gets or sets the GPT AI service configuration settings. [JsonPropertyName(\"Gpt\")] public Gpt? Gpt { get; set; } Property Value Gpt Log Gets or sets the logging configuration settings. [JsonPropertyName(\"Log\")] public Log? Log { get; set; } Property Value Log Whitelist Gets or sets a value indicating whether whitelist functionality is enabled. [JsonPropertyName(\"Whitelist\")] public bool? Whitelist { get; set; } Property Value bool? urls Gets or sets the URLs configuration for the application hosting. [JsonPropertyName(\"urls\")] public string? urls { get; set; } Property Value string"
  },
  "api/Jiro.Core.DTO.JiroPromptDTO.html": {
    "href": "api/Jiro.Core.DTO.JiroPromptDTO.html",
    "title": "Class JiroPromptDTO | Jiro Documentation",
    "keywords": "Class JiroPromptDTO Namespace Jiro.Core.DTO Assembly Jiro.Core.dll Data transfer object for Jiro prompt requests containing user input. public class JiroPromptDTO Inheritance object JiroPromptDTO Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties Prompt Gets or sets the user prompt or command to be processed. public string Prompt { get; set; } Property Value string"
  },
  "api/Jiro.Core.DTO.Log.html": {
    "href": "api/Jiro.Core.DTO.Log.html",
    "title": "Class Log | Jiro Documentation",
    "keywords": "Class Log Namespace Jiro.Core.DTO Assembly Jiro.Core.dll Logging configuration settings for the application. public class Log Inheritance object Log Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties AspNetCoreLevel Gets or sets the log level specifically for ASP.NET Core framework logs. [JsonPropertyName(\"AspNetCoreLevel\")] public string? AspNetCoreLevel { get; set; } Property Value string DatabaseLevel Gets or sets the log level for database-related operations. [JsonPropertyName(\"DatabaseLevel\")] public string? DatabaseLevel { get; set; } Property Value string LogLevel Gets or sets the default log level for the application. [JsonPropertyName(\"LogLevel\")] public string? LogLevel { get; set; } Property Value string SystemLevel Gets or sets the log level for system-level operations and services. [JsonPropertyName(\"SystemLevel\")] public string? SystemLevel { get; set; } Property Value string TimeInterval Gets or sets the time interval for log rotation or aggregation. [JsonPropertyName(\"TimeInterval\")] public string? TimeInterval { get; set; } Property Value string"
  },
  "api/Jiro.Core.DTO.LoginUsernameDTO.html": {
    "href": "api/Jiro.Core.DTO.LoginUsernameDTO.html",
    "title": "Class LoginUsernameDTO | Jiro Documentation",
    "keywords": "Class LoginUsernameDTO Namespace Jiro.Core.DTO Assembly Jiro.Core.dll Data transfer object for user login requests using username and password. public class LoginUsernameDTO Inheritance object LoginUsernameDTO Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties Password Gets or sets the password for authentication. public string Password { get; set; } Property Value string Username Gets or sets the username for authentication. public string Username { get; set; } Property Value string"
  },
  "api/Jiro.Core.DTO.RegisterDTO.html": {
    "href": "api/Jiro.Core.DTO.RegisterDTO.html",
    "title": "Class RegisterDTO | Jiro Documentation",
    "keywords": "Class RegisterDTO Namespace Jiro.Core.DTO Assembly Jiro.Core.dll Data transfer object for user registration requests. public class RegisterDTO Inheritance object RegisterDTO Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties Email Gets or sets the email address for the new account. public string Email { get; set; } Property Value string Password Gets or sets the password for the new account. public string Password { get; set; } Property Value string Username Gets or sets the desired username for the new account. public string Username { get; set; } Property Value string"
  },
  "api/Jiro.Core.DTO.SingleGpt.html": {
    "href": "api/Jiro.Core.DTO.SingleGpt.html",
    "title": "Class SingleGpt | Jiro Documentation",
    "keywords": "Class SingleGpt Namespace Jiro.Core.DTO Assembly Jiro.Core.dll Configuration settings for single GPT model operations. public class SingleGpt Inheritance object SingleGpt Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties ContextMessage Gets or sets the context message that provides background information to the AI model. [JsonPropertyName(\"ContextMessage\")] public string? ContextMessage { get; set; } Property Value string Model Gets or sets the specific GPT model identifier to use for requests. [JsonPropertyName(\"Model\")] public string? Model { get; set; } Property Value string Stop Gets or sets the stop sequences that signal the model to stop generating text. [JsonPropertyName(\"Stop\")] public string? Stop { get; set; } Property Value string TokenLimit Gets or sets the maximum number of tokens allowed per request. [JsonPropertyName(\"TokenLimit\")] public int? TokenLimit { get; set; } Property Value int?"
  },
  "api/Jiro.Core.DTO.UserIdDTO.html": {
    "href": "api/Jiro.Core.DTO.UserIdDTO.html",
    "title": "Class UserIdDTO | Jiro Documentation",
    "keywords": "Class UserIdDTO Namespace Jiro.Core.DTO Assembly Jiro.Core.dll Data transfer object containing a user identifier for operations that require only the user ID. public class UserIdDTO Inheritance object UserIdDTO Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties UserId Gets or sets the unique identifier of the user. public string UserId { get; set; } Property Value string"
  },
  "api/Jiro.Core.DTO.UserInfoDTO.html": {
    "href": "api/Jiro.Core.DTO.UserInfoDTO.html",
    "title": "Class UserInfoDTO | Jiro Documentation",
    "keywords": "Class UserInfoDTO Namespace Jiro.Core.DTO Assembly Jiro.Core.dll Data transfer object containing user information for display and management purposes. public class UserInfoDTO Inheritance object UserInfoDTO Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties AccountCreatedDate Gets or sets the date and time when the user account was created. public DateTime AccountCreatedDate { get; set; } Property Value DateTime Email Gets or sets the user's email address. public string Email { get; set; } Property Value string Id Gets or sets the unique identifier of the user. public string Id { get; set; } Property Value string IsWhitelisted Gets or sets a value indicating whether the user is whitelisted for access. public bool IsWhitelisted { get; set; } Property Value bool Roles Gets or sets the array of roles assigned to the user. public string[]? Roles { get; set; } Property Value string[] Username Gets or sets the user's username. public string Username { get; set; } Property Value string"
  },
  "api/Jiro.Core.DTO.WhitelistedUserDTO.html": {
    "href": "api/Jiro.Core.DTO.WhitelistedUserDTO.html",
    "title": "Class WhitelistedUserDTO | Jiro Documentation",
    "keywords": "Class WhitelistedUserDTO Namespace Jiro.Core.DTO Assembly Jiro.Core.dll Data transfer object representing a user with whitelist status information. public class WhitelistedUserDTO Inheritance object WhitelistedUserDTO Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties Email Gets or sets the email address of the user. public string Email { get; set; } Property Value string Id Gets or sets the unique identifier of the user. public string Id { get; set; } Property Value string IsWhitelisted Gets or sets a value indicating whether the user is whitelisted for access. public bool IsWhitelisted { get; set; } Property Value bool Username Gets or sets the username of the user. public string Username { get; set; } Property Value string"
  },
  "api/Jiro.Core.DTO.html": {
    "href": "api/Jiro.Core.DTO.html",
    "title": "Namespace Jiro.Core.DTO | Jiro Documentation",
    "keywords": "Namespace Jiro.Core.DTO Classes AssignRoleDTO Data transfer object for role assignment requests to assign a specific role to a user. ChangeEmailDTO Data transfer object for email change requests, requiring the new email and current password for verification. ChangePasswordDTO Data transfer object for password change requests, requiring both current and new passwords. ChatGpt Configuration settings specific to ChatGPT functionality. ConnectionStrings Database connection strings configuration. Gpt Configuration settings for GPT AI service integration. InstanceConfigDTO Data transfer object representing the complete configuration for a Jiro instance. JiroPromptDTO Data transfer object for Jiro prompt requests containing user input. Log Logging configuration settings for the application. LoginUsernameDTO Data transfer object for user login requests using username and password. RegisterDTO Data transfer object for user registration requests. SingleGpt Configuration settings for single GPT model operations. UserIdDTO Data transfer object containing a user identifier for operations that require only the user ID. UserInfoDTO Data transfer object containing user information for display and management purposes. WhitelistedUserDTO Data transfer object representing a user with whitelist status information."
  },
  "api/Jiro.Core.IRepositories.IChatSessionRepository.html": {
    "href": "api/Jiro.Core.IRepositories.IChatSessionRepository.html",
    "title": "Interface IChatSessionRepository | Jiro Documentation",
    "keywords": "Interface IChatSessionRepository Namespace Jiro.Core.IRepositories Assembly Jiro.Core.dll Defines the contract for chat session repository operations that manage chat session data persistence. public interface IChatSessionRepository : IRepository<string, ChatSession> Inherited Members IRepository<string, ChatSession>.AsQueryable() IRepository<string, ChatSession>.GetAsync(string) IRepository<string, ChatSession>.AddAsync(ChatSession) IRepository<string, ChatSession>.AddRangeAsync(IEnumerable<ChatSession>) IRepository<string, ChatSession>.RemoveAsync(string) IRepository<string, ChatSession>.RemoveAsync(ChatSession) IRepository<string, ChatSession>.RemoveRangeAsync(IEnumerable<ChatSession>) IRepository<string, ChatSession>.UpdateAsync(ChatSession) IRepository<string, ChatSession>.UpdateRange(IEnumerable<ChatSession>) IRepository<string, ChatSession>.SaveChangesAsync()"
  },
  "api/Jiro.Core.IRepositories.IMessageRepository.html": {
    "href": "api/Jiro.Core.IRepositories.IMessageRepository.html",
    "title": "Interface IMessageRepository | Jiro Documentation",
    "keywords": "Interface IMessageRepository Namespace Jiro.Core.IRepositories Assembly Jiro.Core.dll Defines the contract for message repository operations that manage chat message data persistence. public interface IMessageRepository : IRepository<string, Message> Inherited Members IRepository<string, Message>.AsQueryable() IRepository<string, Message>.GetAsync(string) IRepository<string, Message>.AddAsync(Message) IRepository<string, Message>.AddRangeAsync(IEnumerable<Message>) IRepository<string, Message>.RemoveAsync(string) IRepository<string, Message>.RemoveAsync(Message) IRepository<string, Message>.RemoveRangeAsync(IEnumerable<Message>) IRepository<string, Message>.UpdateAsync(Message) IRepository<string, Message>.UpdateRange(IEnumerable<Message>) IRepository<string, Message>.SaveChangesAsync()"
  },
  "api/Jiro.Core.IRepositories.html": {
    "href": "api/Jiro.Core.IRepositories.html",
    "title": "Namespace Jiro.Core.IRepositories | Jiro Documentation",
    "keywords": "Namespace Jiro.Core.IRepositories Interfaces IChatSessionRepository Defines the contract for chat session repository operations that manage chat session data persistence. IMessageRepository Defines the contract for message repository operations that manage chat message data persistence."
  },
  "api/Jiro.Core.JiroException.html": {
    "href": "api/Jiro.Core.JiroException.html",
    "title": "Class JiroException | Jiro Documentation",
    "keywords": "Class JiroException Namespace Jiro.Core Assembly Jiro.Core.dll Represents an exception specific to the Jiro application domain with user-friendly messages and detailed error information. public class JiroException : Exception Inheritance object Exception JiroException Inherited Members Exception.GetBaseException() Exception.GetType() Exception.ToString() Exception.Data Exception.HelpLink Exception.HResult Exception.InnerException Exception.Message Exception.Source Exception.StackTrace Exception.TargetSite Exception.SerializeObjectState object.Equals(object) object.Equals(object, object) object.GetHashCode() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors JiroException(Exception, string) Initializes a new instance of the JiroException class with an inner exception and user message. public JiroException(Exception exception, string userMessage) Parameters exception Exception The inner exception that caused this exception. userMessage string The user-friendly error message. JiroException(Exception, string, params string[]) Initializes a new instance of the JiroException class with an inner exception, user message, and additional details. public JiroException(Exception exception, string userMessage, params string[] details) Parameters exception Exception The inner exception that caused this exception. userMessage string The user-friendly error message. details string[] Additional error details. JiroException(string) Initializes a new instance of the JiroException class with a user message. public JiroException(string userMessage) Parameters userMessage string The user-friendly error message. JiroException(string, params string[]) Initializes a new instance of the JiroException class with a user message and additional details. public JiroException(string userMessage, params string[] details) Parameters userMessage string The user-friendly error message. details string[] Additional error details. Properties Details Gets or sets additional error details that provide more context about the exception. public string[] Details { get; set; } Property Value string[] UserMessage Gets or sets the user-friendly error message that can be displayed to end users. public string UserMessage { get; set; } Property Value string"
  },
  "api/Jiro.Core.Models.AppRole.html": {
    "href": "api/Jiro.Core.Models.AppRole.html",
    "title": "Class AppRole | Jiro Documentation",
    "keywords": "Class AppRole Namespace Jiro.Core.Models Assembly Jiro.Core.dll Represents an application role with extended properties beyond the base ASP.NET Core Identity role. public class AppRole : IdentityRole Inheritance object IdentityRole<string> IdentityRole AppRole Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties UserRoles Gets or sets the collection of user-role associations for this role. public virtual ICollection<AppUserRole>? UserRoles { get; set; } Property Value ICollection<AppUserRole>"
  },
  "api/Jiro.Core.Models.AppUser.html": {
    "href": "api/Jiro.Core.Models.AppUser.html",
    "title": "Class AppUser | Jiro Documentation",
    "keywords": "Class AppUser Namespace Jiro.Core.Models Assembly Jiro.Core.dll Represents an application user with extended properties beyond the base ASP.NET Core Identity user. public class AppUser : IdentityUser Inheritance object IdentityUser<string> IdentityUser AppUser Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties AccountCreatedDate Gets or sets the date and time when the user account was created. public DateTime AccountCreatedDate { get; set; } Property Value DateTime RefreshTokens Gets or sets the collection of refresh tokens associated with this user for authentication purposes. public virtual List<RefreshToken>? RefreshTokens { get; set; } Property Value List<RefreshToken> UserRoles Gets or sets the collection of user roles associated with this user. public virtual ICollection<AppUserRole> UserRoles { get; set; } Property Value ICollection<AppUserRole>"
  },
  "api/Jiro.Core.Models.AppUserRole.html": {
    "href": "api/Jiro.Core.Models.AppUserRole.html",
    "title": "Class AppUserRole | Jiro Documentation",
    "keywords": "Class AppUserRole Namespace Jiro.Core.Models Assembly Jiro.Core.dll Represents the many-to-many relationship between users and roles in the application. public class AppUserRole : IdentityUserRole<string> Inheritance object IdentityUserRole<string> AppUserRole Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties Role Gets or sets the role associated with this user-role relationship. public virtual AppRole Role { get; set; } Property Value AppRole User Gets or sets the user associated with this user-role relationship. public virtual AppUser User { get; set; } Property Value AppUser"
  },
  "api/Jiro.Core.Models.ChatSession.html": {
    "href": "api/Jiro.Core.Models.ChatSession.html",
    "title": "Class ChatSession | Jiro Documentation",
    "keywords": "Class ChatSession Namespace Jiro.Core.Models Assembly Jiro.Core.dll Represents a chat session containing conversation messages and metadata. public class ChatSession : DbModel<string> Inheritance object DbModel<string> ChatSession Inherited Members DbModel<string>.Id object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties CreatedAt Gets or sets the date and time when the chat session was created. public DateTime CreatedAt { get; set; } Property Value DateTime Description Gets or sets the description of the chat session. public string Description { get; set; } Property Value string LastUpdatedAt Gets or sets the date and time when the chat session was last updated. public DateTime LastUpdatedAt { get; set; } Property Value DateTime Messages Gets or sets the collection of messages in this chat session. public List<Message> Messages { get; set; } Property Value List<Message> Name Gets or sets the name of the chat session. public string Name { get; set; } Property Value string"
  },
  "api/Jiro.Core.Models.Message.html": {
    "href": "api/Jiro.Core.Models.Message.html",
    "title": "Class Message | Jiro Documentation",
    "keywords": "Class Message Namespace Jiro.Core.Models Assembly Jiro.Core.dll Represents a message in a chat session, containing user or assistant content. public class Message : DbModel<string> Inheritance object DbModel<string> Message Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties Content Gets or sets the content of the message. public string Content { get; set; } Property Value string CreatedAt Gets or sets the timestamp when this message was created. public DateTime CreatedAt { get; set; } Property Value DateTime Id Gets or sets the unique identifier for the message. Must be set explicitly. public override string Id { get; set; } Property Value string InstanceId Gets or sets the instance identifier associated with this message. public string InstanceId { get; set; } Property Value string IsUser Gets or sets a value indicating whether this message was sent by a user. public bool IsUser { get; set; } Property Value bool SessionId Gets or sets the session identifier that this message belongs to. public string SessionId { get; set; } Property Value string Type Gets or sets the type of the message (text, graph, image, etc.). public MessageType Type { get; set; } Property Value MessageType"
  },
  "api/Jiro.Core.Models.MessageType.html": {
    "href": "api/Jiro.Core.Models.MessageType.html",
    "title": "Enum MessageType | Jiro Documentation",
    "keywords": "Enum MessageType Namespace Jiro.Core.Models Assembly Jiro.Core.dll Defines the different types of content that can be contained in a message. public enum MessageType Fields Graph = 1 Graph or chart content. Image = 2 Image content. Text = 0 Plain text message content."
  },
  "api/Jiro.Core.Models.RefreshToken.html": {
    "href": "api/Jiro.Core.Models.RefreshToken.html",
    "title": "Class RefreshToken | Jiro Documentation",
    "keywords": "Class RefreshToken Namespace Jiro.Core.Models Assembly Jiro.Core.dll Represents a refresh token used for authentication token renewal. public class RefreshToken : DbModel<int> Inheritance object DbModel<int> RefreshToken Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties Created Gets or sets the date and time when this token was created. public DateTime Created { get; set; } Property Value DateTime CreatedByIp Gets or sets the IP address from which this token was created. public string? CreatedByIp { get; set; } Property Value string Expires Gets or sets the date and time when this token expires. public DateTime Expires { get; set; } Property Value DateTime Id Gets or sets the unique identifier for this refresh token. [Key] [JsonIgnore] public override int Id { get; set; } Property Value int IsActive Gets a value indicating whether this token is currently active (not expired and not revoked). public bool IsActive { get; } Property Value bool IsExpired Gets a value indicating whether this token has expired. public bool IsExpired { get; } Property Value bool IsRevoked Gets a value indicating whether this token has been revoked. public bool IsRevoked { get; } Property Value bool ReasonRevoked Gets or sets the reason why this token was revoked. public string? ReasonRevoked { get; set; } Property Value string Revoked Gets or sets the date and time when this token was revoked, if applicable. public DateTime? Revoked { get; set; } Property Value DateTime? RevokedByIp Gets or sets the IP address from which this token was revoked. public string? RevokedByIp { get; set; } Property Value string Token Gets or sets the token string value. public string? Token { get; set; } Property Value string"
  },
  "api/Jiro.Core.Models.html": {
    "href": "api/Jiro.Core.Models.html",
    "title": "Namespace Jiro.Core.Models | Jiro Documentation",
    "keywords": "Namespace Jiro.Core.Models Classes AppRole Represents an application role with extended properties beyond the base ASP.NET Core Identity role. AppUser Represents an application user with extended properties beyond the base ASP.NET Core Identity user. AppUserRole Represents the many-to-many relationship between users and roles in the application. ChatSession Represents a chat session containing conversation messages and metadata. Message Represents a message in a chat session, containing user or assistant content. RefreshToken Represents a refresh token used for authentication token renewal. Enums MessageType Defines the different types of content that can be contained in a message."
  },
  "api/Jiro.Core.Options.ApplicationOptions.html": {
    "href": "api/Jiro.Core.Options.ApplicationOptions.html",
    "title": "Class ApplicationOptions | Jiro Documentation",
    "keywords": "Class ApplicationOptions Namespace Jiro.Core.Options Assembly Jiro.Core.dll Configuration options for core application settings including API configuration. These values can be overridden using JIRO_ prefixed environment variables. public class ApplicationOptions : IOption Inheritance object ApplicationOptions Implements IOption Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Fields Application Configuration section name for application settings. This class maps to root-level configuration properties. public const string Application = \"\" Field Value string Properties JiroApi Gets or sets the Jiro API base URL. Can be overridden with JIRO_JiroApi environment variable. public string JiroApi { get; set; } Property Value string Whitelist Gets or sets whether whitelist functionality is enabled. Can be overridden with JIRO_Whitelist environment variable. public bool Whitelist { get; set; } Property Value bool Methods GetValidationErrors() Gets validation error messages for missing required configuration. public IEnumerable<string> GetValidationErrors() Returns IEnumerable<string> List of validation error messages. IsValid() Validates that required configuration values are provided. public bool IsValid() Returns bool True if configuration is valid, false otherwise."
  },
  "api/Jiro.Core.Options.BotOptions.html": {
    "href": "api/Jiro.Core.Options.BotOptions.html",
    "title": "Class BotOptions | Jiro Documentation",
    "keywords": "Class BotOptions Namespace Jiro.Core.Options Assembly Jiro.Core.dll Configuration options for bot-related settings including authentication tokens and message limits. public class BotOptions : IOption Inheritance object BotOptions Implements IOption Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Fields Bot The configuration section name for bot options. public const string Bot = \"Bot\" Field Value string Properties MaxTokens Gets or sets the maximum number of tokens allowed for AI model requests. public int MaxTokens { get; set; } Property Value int MessageFetchCount Gets or sets the number of messages to fetch in chat operations. public int MessageFetchCount { get; set; } Property Value int OpenAIKey Gets or sets the OpenAI API key for chat functionality. This value is anonymized in logs. public string OpenAIKey { get; set; } Property Value string Token Gets or sets the bot authentication token. This value is anonymized in logs. public string Token { get; set; } Property Value string"
  },
  "api/Jiro.Core.Options.ChatOptions.html": {
    "href": "api/Jiro.Core.Options.ChatOptions.html",
    "title": "Class ChatOptions | Jiro Documentation",
    "keywords": "Class ChatOptions Namespace Jiro.Core.Options Assembly Jiro.Core.dll Configuration options for chat functionality including AI model settings and authentication. public class ChatOptions : IOption Inheritance object ChatOptions Implements IOption Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Fields Chat The configuration section name for chat options. public const string Chat = \"Chat\" Field Value string Properties AuthToken Gets or sets the authentication token for accessing the AI service. public string AuthToken { get; set; } Property Value string Enabled Gets or sets a value indicating whether chat functionality is enabled. public bool Enabled { get; set; } Property Value bool Model Gets or sets the AI model to use for chat responses. public string Model { get; set; } Property Value string SystemMessage Gets or sets the system message that defines the AI assistant's personality and behavior. public string SystemMessage { get; set; } Property Value string TokenLimit Gets or sets the maximum number of tokens allowed for chat operations. public int TokenLimit { get; set; } Property Value int"
  },
  "api/Jiro.Core.Options.DataPathsOptions.html": {
    "href": "api/Jiro.Core.Options.DataPathsOptions.html",
    "title": "Class DataPathsOptions | Jiro Documentation",
    "keywords": "Class DataPathsOptions Namespace Jiro.Core.Options Assembly Jiro.Core.dll Configuration options for data storage paths used throughout the Jiro application. These paths can be overridden using JIRO_ prefixed environment variables. public class DataPathsOptions : IOption Inheritance object DataPathsOptions Implements IOption Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Fields DataPaths Configuration section name for data paths. public const string DataPaths = \"DataPaths\" Field Value string Properties AbsoluteLogsPath Gets the absolute path for logs. public string AbsoluteLogsPath { get; } Property Value string AbsoluteMessagesPath Gets the absolute path for messages. public string AbsoluteMessagesPath { get; } Property Value string AbsolutePluginsPath Gets the absolute path for plugins. public string AbsolutePluginsPath { get; } Property Value string AbsoluteThemesPath Gets the absolute path for themes. public string AbsoluteThemesPath { get; } Property Value string Logs Gets or sets the path for storing log files. Can be overridden with JIRO_DataPaths__Logs environment variable. public string Logs { get; set; } Property Value string Messages Gets or sets the path for storing message files. Can be overridden with JIRO_DataPaths__Messages environment variable. public string Messages { get; set; } Property Value string Plugins Gets or sets the path for storing plugin/module files. Can be overridden with JIRO_DataPaths__Plugins environment variable. public string Plugins { get; set; } Property Value string Themes Gets or sets the path for storing theme files. Can be overridden with JIRO_DataPaths__Themes environment variable. public string Themes { get; set; } Property Value string Methods ResolvePath(string) Resolves a path to an absolute path based on the application base directory. public static string ResolvePath(string path) Parameters path string The path to resolve. Returns string An absolute path."
  },
  "api/Jiro.Core.Options.IOption.html": {
    "href": "api/Jiro.Core.Options.IOption.html",
    "title": "Interface IOption | Jiro Documentation",
    "keywords": "Interface IOption Namespace Jiro.Core.Options Assembly Jiro.Core.dll Marker interface for configuration option classes that can be registered and injected as strongly-typed configuration. public interface IOption"
  },
  "api/Jiro.Core.Options.JiroCloudOptions.GrpcOptions.html": {
    "href": "api/Jiro.Core.Options.JiroCloudOptions.GrpcOptions.html",
    "title": "Class JiroCloudOptions.GrpcOptions | Jiro Documentation",
    "keywords": "Class JiroCloudOptions.GrpcOptions Namespace Jiro.Core.Options Assembly Jiro.Core.dll Configuration options for gRPC communication with JiroCloud. public class JiroCloudOptions.GrpcOptions Inheritance object JiroCloudOptions.GrpcOptions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties MaxRetries Gets or sets the maximum number of retry attempts for gRPC calls. Can be overridden with JIRO_JiroCloud__Grpc__MaxRetries environment variable. public int MaxRetries { get; set; } Property Value int ServerUrl Gets or sets the gRPC server URL. Can be overridden with JIRO_JiroCloud__Grpc__ServerUrl environment variable. public string ServerUrl { get; set; } Property Value string TimeoutMs Gets or sets the gRPC timeout in milliseconds. Can be overridden with JIRO_JiroCloud__Grpc__TimeoutMs environment variable. public int TimeoutMs { get; set; } Property Value int"
  },
  "api/Jiro.Core.Options.JiroCloudOptions.WebSocketOptions.html": {
    "href": "api/Jiro.Core.Options.JiroCloudOptions.WebSocketOptions.html",
    "title": "Class JiroCloudOptions.WebSocketOptions | Jiro Documentation",
    "keywords": "Class JiroCloudOptions.WebSocketOptions Namespace Jiro.Core.Options Assembly Jiro.Core.dll Configuration options for WebSocket communication with JiroCloud. public class JiroCloudOptions.WebSocketOptions Inheritance object JiroCloudOptions.WebSocketOptions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties HandshakeTimeoutMs Gets or sets the handshake timeout in milliseconds. Can be overridden with JIRO_JiroCloud__WebSocket__HandshakeTimeoutMs environment variable. public int HandshakeTimeoutMs { get; set; } Property Value int Headers Gets or sets additional headers to send with WebSocket connections. public Dictionary<string, string> Headers { get; set; } Property Value Dictionary<string, string> HubUrl Gets or sets the SignalR hub URL for WebSocket connections. Can be overridden with JIRO_JiroCloud__WebSocket__HubUrl environment variable. public string HubUrl { get; set; } Property Value string KeepAliveIntervalMs Gets or sets the keep-alive interval in milliseconds. Can be overridden with JIRO_JiroCloud__WebSocket__KeepAliveIntervalMs environment variable. public int KeepAliveIntervalMs { get; set; } Property Value int ReconnectionAttempts Gets or sets the maximum number of reconnection attempts. Can be overridden with JIRO_JiroCloud__WebSocket__ReconnectionAttempts environment variable. public int ReconnectionAttempts { get; set; } Property Value int ReconnectionDelayMs Gets or sets the delay between reconnection attempts in milliseconds. Can be overridden with JIRO_JiroCloud__WebSocket__ReconnectionDelayMs environment variable. public int ReconnectionDelayMs { get; set; } Property Value int ServerTimeoutMs Gets or sets the server timeout in milliseconds. Can be overridden with JIRO_JiroCloud__WebSocket__ServerTimeoutMs environment variable. public int ServerTimeoutMs { get; set; } Property Value int"
  },
  "api/Jiro.Core.Options.JiroCloudOptions.html": {
    "href": "api/Jiro.Core.Options.JiroCloudOptions.html",
    "title": "Class JiroCloudOptions | Jiro Documentation",
    "keywords": "Class JiroCloudOptions Namespace Jiro.Core.Options Assembly Jiro.Core.dll Configuration options for JiroCloud API and services integration. These options can be overridden using JIRO_ prefixed environment variables. public class JiroCloudOptions : IOption Inheritance object JiroCloudOptions Implements IOption Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Fields JiroCloud Configuration section name for JiroCloud options. public const string JiroCloud = \"JiroCloud\" Field Value string Properties ApiKey Gets or sets the API key for JiroCloud authentication. Can be overridden with JIRO_JiroCloud__ApiKey environment variable. public string ApiKey { get; set; } Property Value string ApiUrl Gets or sets the base URL for JiroCloud API. Can be overridden with JIRO_JiroCloud__ApiUrl environment variable. public string ApiUrl { get; set; } Property Value string Remarks This URL is used for making API requests to JiroCloud services. Default value is set to \"https://jiro.huebytes.com/api\". Grpc Gets or sets the gRPC configuration for JiroCloud communication. public JiroCloudOptions.GrpcOptions Grpc { get; set; } Property Value JiroCloudOptions.GrpcOptions WebSocket Gets or sets the WebSocket configuration for JiroCloud communication. public JiroCloudOptions.WebSocketOptions WebSocket { get; set; } Property Value JiroCloudOptions.WebSocketOptions"
  },
  "api/Jiro.Core.Options.LogOptions.html": {
    "href": "api/Jiro.Core.Options.LogOptions.html",
    "title": "Class LogOptions | Jiro Documentation",
    "keywords": "Class LogOptions Namespace Jiro.Core.Options Assembly Jiro.Core.dll Configuration options for logging settings including log levels for different application components. public class LogOptions : IOption Inheritance object LogOptions Implements IOption Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Fields Log The configuration section name for log options. public const string Log = \"Log\" Field Value string Properties AspNetCoreLevel Gets or sets the log level for ASP.NET Core framework components. public string AspNetCoreLevel { get; set; } Property Value string DatabaseLevel Gets or sets the log level for database operations and Entity Framework. public string DatabaseLevel { get; set; } Property Value string LogLevel Gets or sets the default log level for the application. public string LogLevel { get; set; } Property Value string SystemLevel Gets or sets the log level for system-level operations and services. public string SystemLevel { get; set; } Property Value string TimeInterval Gets or sets the time interval configuration for log operations. public string TimeInterval { get; set; } Property Value string"
  },
  "api/Jiro.Core.Options.html": {
    "href": "api/Jiro.Core.Options.html",
    "title": "Namespace Jiro.Core.Options | Jiro Documentation",
    "keywords": "Namespace Jiro.Core.Options Classes ApplicationOptions Configuration options for core application settings including API configuration. These values can be overridden using JIRO_ prefixed environment variables. BotOptions Configuration options for bot-related settings including authentication tokens and message limits. ChatOptions Configuration options for chat functionality including AI model settings and authentication. DataPathsOptions Configuration options for data storage paths used throughout the Jiro application. These paths can be overridden using JIRO_ prefixed environment variables. JiroCloudOptions Configuration options for JiroCloud API and services integration. These options can be overridden using JIRO_ prefixed environment variables. JiroCloudOptions.GrpcOptions Configuration options for gRPC communication with JiroCloud. JiroCloudOptions.WebSocketOptions Configuration options for WebSocket communication with JiroCloud. LogOptions Configuration options for logging settings including log levels for different application components. Interfaces IOption Marker interface for configuration option classes that can be registered and injected as strongly-typed configuration."
  },
  "api/Jiro.Core.Services.Admin.AdminService.html": {
    "href": "api/Jiro.Core.Services.Admin.AdminService.html",
    "title": "Class AdminService | Jiro Documentation",
    "keywords": "Class AdminService Namespace Jiro.Core.Services.Admin Assembly Jiro.Core.dll public class AdminService Inheritance object AdminService Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors AdminService() public AdminService()"
  },
  "api/Jiro.Core.Services.Admin.html": {
    "href": "api/Jiro.Core.Services.Admin.html",
    "title": "Namespace Jiro.Core.Services.Admin | Jiro Documentation",
    "keywords": "Namespace Jiro.Core.Services.Admin Classes AdminService"
  },
  "api/Jiro.Core.Services.CommandContext.CommandContext.html": {
    "href": "api/Jiro.Core.Services.CommandContext.CommandContext.html",
    "title": "Class CommandContext | Jiro Documentation",
    "keywords": "Class CommandContext Namespace Jiro.Core.Services.CommandContext Assembly Jiro.Core.dll public class CommandContext : InstanceContext, ICommandContext, IInstanceContext Inheritance object InstanceContext CommandContext Implements ICommandContext IInstanceContext Inherited Members InstanceContext.InstanceId InstanceContext.SessionId InstanceContext.SetContext(string, string) InstanceContext.ClearContext() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties Data Gets the collection of contextual data associated with the current command execution. public Dictionary<string, object> Data { get; } Property Value Dictionary<string, object> Methods SetCurrentInstance(string?) Sets the current instance identifier for command execution context. public void SetCurrentInstance(string? instanceId) Parameters instanceId string The instance identifier to set, or null to clear. SetData(IEnumerable<KeyValuePair<string, object>>) Sets the contextual data for the current command execution. public void SetData(IEnumerable<KeyValuePair<string, object>> data) Parameters data IEnumerable<KeyValuePair<string, object>> The collection of key-value pairs to set as contextual data. SetSessionId(string) Sets the session identifier for the current command execution context. public void SetSessionId(string sessionId) Parameters sessionId string The session identifier to set."
  },
  "api/Jiro.Core.Services.CommandContext.ICommandContext.html": {
    "href": "api/Jiro.Core.Services.CommandContext.ICommandContext.html",
    "title": "Interface ICommandContext | Jiro Documentation",
    "keywords": "Interface ICommandContext Namespace Jiro.Core.Services.CommandContext Assembly Jiro.Core.dll Defines the contract for command context services that maintain execution state and metadata during command processing. Extends IInstanceContext with command-specific functionality. public interface ICommandContext : IInstanceContext Inherited Members IInstanceContext.InstanceId IInstanceContext.SessionId IInstanceContext.SetContext(string, string) IInstanceContext.ClearContext() Properties Data Gets the collection of contextual data associated with the current command execution. Dictionary<string, object> Data { get; } Property Value Dictionary<string, object> Methods SetCurrentInstance(string?) Sets the current instance identifier for command execution context. void SetCurrentInstance(string? instanceId) Parameters instanceId string The instance identifier to set, or null to clear. SetData(IEnumerable<KeyValuePair<string, object>>) Sets the contextual data for the current command execution. void SetData(IEnumerable<KeyValuePair<string, object>> data) Parameters data IEnumerable<KeyValuePair<string, object>> The collection of key-value pairs to set as contextual data. SetSessionId(string) Sets the session identifier for the current command execution context. void SetSessionId(string sessionId) Parameters sessionId string The session identifier to set."
  },
  "api/Jiro.Core.Services.CommandContext.html": {
    "href": "api/Jiro.Core.Services.CommandContext.html",
    "title": "Namespace Jiro.Core.Services.CommandContext | Jiro Documentation",
    "keywords": "Namespace Jiro.Core.Services.CommandContext Classes CommandContext Interfaces ICommandContext Defines the contract for command context services that maintain execution state and metadata during command processing. Extends IInstanceContext with command-specific functionality."
  },
  "api/Jiro.Core.Services.CommandHandler.CommandHandlerService.html": {
    "href": "api/Jiro.Core.Services.CommandHandler.CommandHandlerService.html",
    "title": "Class CommandHandlerService | Jiro Documentation",
    "keywords": "Class CommandHandlerService Namespace Jiro.Core.Services.CommandHandler Assembly Jiro.Core.dll Service responsible for parsing, executing, and handling commands within the Jiro system. public class CommandHandlerService : ICommandHandlerService Inheritance object CommandHandlerService Implements ICommandHandlerService Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors CommandHandlerService(CommandsContext, ILogger<CommandHandlerService>) Initializes a new instance of the CommandHandlerService class. public CommandHandlerService(CommandsContext commandModule, ILogger<CommandHandlerService> logger) Parameters commandModule CommandsContext The commands context containing available commands. logger ILogger<CommandHandlerService> The logger instance for recording command execution information. Methods ExecuteCommandAsync(IServiceProvider, string) Executes a command based on the provided prompt string. public Task<CommandResponse> ExecuteCommandAsync(IServiceProvider scopedProvider, string prompt) Parameters scopedProvider IServiceProvider The scoped service provider for dependency injection. prompt string The command prompt to parse and execute. Returns Task<CommandResponse> A task that represents the asynchronous operation, containing the command response. Events OnLog Event triggered when a log message is generated during command execution. public event Action<string, object[]>? OnLog Event Type Action<string, object[]>"
  },
  "api/Jiro.Core.Services.CommandHandler.ICommandHandlerService.html": {
    "href": "api/Jiro.Core.Services.CommandHandler.ICommandHandlerService.html",
    "title": "Interface ICommandHandlerService | Jiro Documentation",
    "keywords": "Interface ICommandHandlerService Namespace Jiro.Core.Services.CommandHandler Assembly Jiro.Core.dll Defines the contract for command handling services that process and execute user commands. public interface ICommandHandlerService Methods ExecuteCommandAsync(IServiceProvider, string) Executes a command based on the provided prompt using the specified service provider scope. Task<CommandResponse> ExecuteCommandAsync(IServiceProvider scopedProvider, string prompt) Parameters scopedProvider IServiceProvider The scoped service provider containing the required dependencies. prompt string The user prompt or command to execute. Returns Task<CommandResponse> A task that represents the asynchronous operation. The task result contains the command response. Events OnLog Occurs when a command execution event needs to be logged. event Action<string, object[]>? OnLog Event Type Action<string, object[]>"
  },
  "api/Jiro.Core.Services.CommandHandler.html": {
    "href": "api/Jiro.Core.Services.CommandHandler.html",
    "title": "Namespace Jiro.Core.Services.CommandHandler | Jiro Documentation",
    "keywords": "Namespace Jiro.Core.Services.CommandHandler Classes CommandHandlerService Service responsible for parsing, executing, and handling commands within the Jiro system. Interfaces ICommandHandlerService Defines the contract for command handling services that process and execute user commands."
  },
  "api/Jiro.Core.Services.CommandSystem.CommandMetadata.html": {
    "href": "api/Jiro.Core.Services.CommandSystem.CommandMetadata.html",
    "title": "Class CommandMetadata | Jiro Documentation",
    "keywords": "Class CommandMetadata Namespace Jiro.Core.Services.CommandSystem Assembly Jiro.Core.dll Represents metadata for a command. public class CommandMetadata Inheritance object CommandMetadata Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Properties CommandDescription Gets or sets the description of the command. public string CommandDescription { get; set; } Property Value string CommandName Gets or sets the name of the command. public string CommandName { get; set; } Property Value string CommandSyntax Gets or sets the syntax of the command. public string CommandSyntax { get; set; } Property Value string Keywords Gets or sets the keywords associated with the command. public string[] Keywords { get; set; } Property Value string[] ModuleName Gets or sets the name of the module containing the command. public string ModuleName { get; set; } Property Value string Parameters Gets or sets the parameters of the command. public Dictionary<string, Type> Parameters { get; set; } Property Value Dictionary<string, Type> Methods ToString() Returns a string representation of the command metadata. public override string ToString() Returns string A string containing the command name and description."
  },
  "api/Jiro.Core.Services.CommandSystem.HelpService.html": {
    "href": "api/Jiro.Core.Services.CommandSystem.HelpService.html",
    "title": "Class HelpService | Jiro Documentation",
    "keywords": "Class HelpService Namespace Jiro.Core.Services.CommandSystem Assembly Jiro.Core.dll Provides functionality to generate and manage help messages for commands and modules. public class HelpService : IHelpService Inheritance object HelpService Implements IHelpService Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors HelpService(CommandsContext) Initializes a new instance of the HelpService class. public HelpService(CommandsContext commandsContainer) Parameters commandsContainer CommandsContext The container for commands and modules. Properties CommandMeta Gets the metadata for commands. public List<CommandMetadata> CommandMeta { get; } Property Value List<CommandMetadata> HelpMessage Gets the generated help message. public string HelpMessage { get; } Property Value string Methods CreateHelpMessage() Creates the help message by iterating through commands and modules. public void CreateHelpMessage()"
  },
  "api/Jiro.Core.Services.CommandSystem.IHelpService.html": {
    "href": "api/Jiro.Core.Services.CommandSystem.IHelpService.html",
    "title": "Interface IHelpService | Jiro Documentation",
    "keywords": "Interface IHelpService Namespace Jiro.Core.Services.CommandSystem Assembly Jiro.Core.dll Provides functionality to generate and manage help messages for commands and modules. public interface IHelpService Properties CommandMeta Gets the metadata for commands. List<CommandMetadata> CommandMeta { get; } Property Value List<CommandMetadata> HelpMessage Gets the generated help message. string HelpMessage { get; } Property Value string Methods CreateHelpMessage() Creates the help message by iterating through commands and modules. void CreateHelpMessage()"
  },
  "api/Jiro.Core.Services.CommandSystem.html": {
    "href": "api/Jiro.Core.Services.CommandSystem.html",
    "title": "Namespace Jiro.Core.Services.CommandSystem | Jiro Documentation",
    "keywords": "Namespace Jiro.Core.Services.CommandSystem Classes CommandMetadata Represents metadata for a command. HelpService Provides functionality to generate and manage help messages for commands and modules. Interfaces IHelpService Provides functionality to generate and manage help messages for commands and modules."
  },
  "api/Jiro.Core.Services.Configuration.IConfigProviderService.html": {
    "href": "api/Jiro.Core.Services.Configuration.IConfigProviderService.html",
    "title": "Interface IConfigProviderService | Jiro Documentation",
    "keywords": "Interface IConfigProviderService Namespace Jiro.Core.Services.Configuration Assembly Jiro.Core.dll Service for retrieving and updating system configuration public interface IConfigProviderService Methods GetConfigAsync() Retrieves current system configuration Task<SystemConfigResponse> GetConfigAsync() Returns Task<SystemConfigResponse> The current system configuration UpdateConfigAsync(string) Updates system configuration (limited scope for security) Task<ConfigUpdateResponse> UpdateConfigAsync(string configJson) Parameters configJson string The configuration JSON to update Returns Task<ConfigUpdateResponse> The update response"
  },
  "api/Jiro.Core.Services.Configuration.Models.ConfigUpdateResponse.html": {
    "href": "api/Jiro.Core.Services.Configuration.Models.ConfigUpdateResponse.html",
    "title": "Class ConfigUpdateResponse | Jiro Documentation",
    "keywords": "Class ConfigUpdateResponse Namespace Jiro.Core.Services.Configuration.Models Assembly Jiro.Core.dll Configuration update response public class ConfigUpdateResponse Inheritance object ConfigUpdateResponse Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties Message Gets or sets the response message describing the result of the update operation. public string Message { get; set; } Property Value string Note Gets or sets an additional note about the configuration update. public string Note { get; set; } Property Value string ReceivedKeys Gets or sets the array of configuration keys that were received in the update request. public string[] ReceivedKeys { get; set; } Property Value string[] Success Gets or sets a value indicating whether the configuration update was successful. public bool Success { get; set; } Property Value bool"
  },
  "api/Jiro.Core.Services.Configuration.Models.ConfigurationSection.html": {
    "href": "api/Jiro.Core.Services.Configuration.Models.ConfigurationSection.html",
    "title": "Class ConfigurationSection | Jiro Documentation",
    "keywords": "Class ConfigurationSection Namespace Jiro.Core.Services.Configuration.Models Assembly Jiro.Core.dll Configuration section details public class ConfigurationSection Inheritance object ConfigurationSection Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties Chat Gets or sets the chat configuration settings. public object? Chat { get; set; } Property Value object Features Gets or sets the features configuration settings. public FeaturesConfig Features { get; set; } Property Value FeaturesConfig"
  },
  "api/Jiro.Core.Services.Configuration.Models.FeaturesConfig.html": {
    "href": "api/Jiro.Core.Services.Configuration.Models.FeaturesConfig.html",
    "title": "Class FeaturesConfig | Jiro Documentation",
    "keywords": "Class FeaturesConfig Namespace Jiro.Core.Services.Configuration.Models Assembly Jiro.Core.dll Features configuration public class FeaturesConfig Inheritance object FeaturesConfig Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties ChatEnabled Gets or sets a value indicating whether chat functionality is enabled. public bool ChatEnabled { get; set; } Property Value bool GrpcEnabled Gets or sets a value indicating whether gRPC functionality is enabled. public bool GrpcEnabled { get; set; } Property Value bool WeatherEnabled Gets or sets a value indicating whether weather functionality is enabled. public bool WeatherEnabled { get; set; } Property Value bool WebSocketEnabled Gets or sets a value indicating whether WebSocket functionality is enabled. public bool WebSocketEnabled { get; set; } Property Value bool"
  },
  "api/Jiro.Core.Services.Configuration.Models.SystemConfigResponse.html": {
    "href": "api/Jiro.Core.Services.Configuration.Models.SystemConfigResponse.html",
    "title": "Class SystemConfigResponse | Jiro Documentation",
    "keywords": "Class SystemConfigResponse Namespace Jiro.Core.Services.Configuration.Models Assembly Jiro.Core.dll System configuration response public class SystemConfigResponse Inheritance object SystemConfigResponse Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties ApplicationName Gets or sets the name of the application. public string ApplicationName { get; set; } Property Value string Configuration Gets or sets the application configuration details. public ConfigurationSection Configuration { get; set; } Property Value ConfigurationSection Environment Gets or sets the deployment environment (e.g., Development, Production). public string Environment { get; set; } Property Value string InstanceId Gets or sets the unique identifier of the application instance. public string? InstanceId { get; set; } Property Value string SystemInfo Gets or sets the system information details. public SystemInfo SystemInfo { get; set; } Property Value SystemInfo Uptime Gets or sets the application uptime. public TimeSpan Uptime { get; set; } Property Value TimeSpan Version Gets or sets the application version. public string? Version { get; set; } Property Value string"
  },
  "api/Jiro.Core.Services.Configuration.Models.SystemInfo.html": {
    "href": "api/Jiro.Core.Services.Configuration.Models.SystemInfo.html",
    "title": "Class SystemInfo | Jiro Documentation",
    "keywords": "Class SystemInfo Namespace Jiro.Core.Services.Configuration.Models Assembly Jiro.Core.dll System information public class SystemInfo Inheritance object SystemInfo Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties DotnetVersion Gets or sets the .NET runtime version. public string DotnetVersion { get; set; } Property Value string MachineName Gets or sets the name of the machine hosting the application. public string MachineName { get; set; } Property Value string OsVersion Gets or sets the operating system version. public string OsVersion { get; set; } Property Value string Platform Gets or sets the operating system platform. public string Platform { get; set; } Property Value string ProcessorCount Gets or sets the number of logical processors on the machine. public int ProcessorCount { get; set; } Property Value int TotalMemory Gets or sets the total amount of system memory in bytes. public long TotalMemory { get; set; } Property Value long WorkingDirectory Gets or sets the current working directory of the application. public string WorkingDirectory { get; set; } Property Value string"
  },
  "api/Jiro.Core.Services.Configuration.Models.html": {
    "href": "api/Jiro.Core.Services.Configuration.Models.html",
    "title": "Namespace Jiro.Core.Services.Configuration.Models | Jiro Documentation",
    "keywords": "Namespace Jiro.Core.Services.Configuration.Models Classes ConfigUpdateResponse Configuration update response ConfigurationSection Configuration section details FeaturesConfig Features configuration SystemConfigResponse System configuration response SystemInfo System information"
  },
  "api/Jiro.Core.Services.Configuration.html": {
    "href": "api/Jiro.Core.Services.Configuration.html",
    "title": "Namespace Jiro.Core.Services.Configuration | Jiro Documentation",
    "keywords": "Namespace Jiro.Core.Services.Configuration Interfaces IConfigProviderService Service for retrieving and updating system configuration"
  },
  "api/Jiro.Core.Services.Context.IInstanceContext.html": {
    "href": "api/Jiro.Core.Services.Context.IInstanceContext.html",
    "title": "Interface IInstanceContext | Jiro Documentation",
    "keywords": "Interface IInstanceContext Namespace Jiro.Core.Services.Context Assembly Jiro.Core.dll Provides contextual information about the current instance and session. public interface IInstanceContext Properties InstanceId Gets or sets the unique identifier of the current instance. string InstanceId { get; set; } Property Value string SessionId Gets or sets the unique identifier of the current session (optional). string? SessionId { get; set; } Property Value string Methods ClearContext() Clears the current context. void ClearContext() SetContext(string, string?) Sets the context for the current operation. void SetContext(string instanceId, string? sessionId = null) Parameters instanceId string The instance identifier. sessionId string The session identifier (optional)."
  },
  "api/Jiro.Core.Services.Context.IInstanceMetadataAccessor.html": {
    "href": "api/Jiro.Core.Services.Context.IInstanceMetadataAccessor.html",
    "title": "Interface IInstanceMetadataAccessor | Jiro Documentation",
    "keywords": "Interface IInstanceMetadataAccessor Namespace Jiro.Core.Services.Context Assembly Jiro.Core.dll Service for accessing and caching instance metadata. public interface IInstanceMetadataAccessor Methods ClearInstanceCache() Clears all cached instance metadata. void ClearInstanceCache() FetchInstanceIdFromApiAsync(string) Fetches the instance ID from the Jiro API using the provided API key. Task<string?> FetchInstanceIdFromApiAsync(string apiKey) Parameters apiKey string The API key to use for authentication. Returns Task<string> The instance ID if successful, null otherwise. GetCurrentInstanceId() Gets the current instance ID from the cached API result. Falls back to instance context only if cache is empty. string? GetCurrentInstanceId() Returns string The current instance ID if available, null otherwise. GetInstanceIdAsync(string) Gets the instance ID from cache or fetches it from API if not cached. The instance ID should be consistent throughout the application lifetime. Task<string?> GetInstanceIdAsync(string sessionId) Parameters sessionId string Not used - kept for interface compatibility. Returns Task<string> The instance ID if found, null otherwise. InitializeInstanceIdAsync(string) Initializes the instance ID by fetching it from the API and caching it. Should be called during application startup. Task<string?> InitializeInstanceIdAsync(string apiKey) Parameters apiKey string The API key to use for authentication. Returns Task<string> The fetched instance ID if successful, null otherwise. InvalidateInstanceCache(string) Invalidates the cached instance ID. Since instance ID is global, this clears the main cache. void InvalidateInstanceCache(string sessionId) Parameters sessionId string Not used - kept for interface compatibility."
  },
  "api/Jiro.Core.Services.Context.InstanceContext.html": {
    "href": "api/Jiro.Core.Services.Context.InstanceContext.html",
    "title": "Class InstanceContext | Jiro Documentation",
    "keywords": "Class InstanceContext Namespace Jiro.Core.Services.Context Assembly Jiro.Core.dll Provides contextual information about the current instance and session. This is a scoped service that maintains context throughout a request/operation. public class InstanceContext : IInstanceContext Inheritance object InstanceContext Implements IInstanceContext Derived CommandContext Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties InstanceId Gets or sets the unique identifier of the current instance. public string InstanceId { get; set; } Property Value string SessionId Gets or sets the unique identifier of the current session (optional). public string? SessionId { get; set; } Property Value string Methods ClearContext() Clears the current context. public void ClearContext() SetContext(string, string?) Sets the context for the current operation. public void SetContext(string instanceId, string? sessionId = null) Parameters instanceId string The instance identifier. sessionId string The session identifier (optional)."
  },
  "api/Jiro.Core.Services.Context.InstanceDataModel.html": {
    "href": "api/Jiro.Core.Services.Context.InstanceDataModel.html",
    "title": "Class InstanceDataModel | Jiro Documentation",
    "keywords": "Class InstanceDataModel Namespace Jiro.Core.Services.Context Assembly Jiro.Core.dll Instance data model for API response deserialization. public class InstanceDataModel Inheritance object InstanceDataModel Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties ApiKey Gets or sets the API key associated with this instance. public string ApiKey { get; set; } Property Value string CreatedAt Gets or sets the date and time when the instance was created. public DateTime CreatedAt { get; set; } Property Value DateTime Description Gets or sets the description of the instance. public string Description { get; set; } Property Value string Id Gets or sets the unique identifier for the instance. public string Id { get; set; } Property Value string LastOnline Gets or sets the date and time when the instance was last online. public DateTime LastOnline { get; set; } Property Value DateTime Name Gets or sets the display name of the instance. public string Name { get; set; } Property Value string User Gets or sets the user information associated with this instance. public UserModel? User { get; set; } Property Value UserModel UserId Gets or sets the unique identifier of the user who owns this instance. public string UserId { get; set; } Property Value string"
  },
  "api/Jiro.Core.Services.Context.InstanceMetadataAccessor.html": {
    "href": "api/Jiro.Core.Services.Context.InstanceMetadataAccessor.html",
    "title": "Class InstanceMetadataAccessor | Jiro Documentation",
    "keywords": "Class InstanceMetadataAccessor Namespace Jiro.Core.Services.Context Assembly Jiro.Core.dll Service for accessing and caching instance metadata. public class InstanceMetadataAccessor : IInstanceMetadataAccessor Inheritance object InstanceMetadataAccessor Implements IInstanceMetadataAccessor Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors InstanceMetadataAccessor(ILogger<InstanceMetadataAccessor>, IMemoryCache, IInstanceContext, IHttpClientFactory, IOptions<JiroCloudOptions>) Initializes a new instance of the InstanceMetadataAccessor class. public InstanceMetadataAccessor(ILogger<InstanceMetadataAccessor> logger, IMemoryCache memoryCache, IInstanceContext instanceContext, IHttpClientFactory httpClientFactory, IOptions<JiroCloudOptions> jiroCloudOptions) Parameters logger ILogger<InstanceMetadataAccessor> The logger instance. memoryCache IMemoryCache The memory cache instance. instanceContext IInstanceContext The instance context service. httpClientFactory IHttpClientFactory The HTTP client factory for API calls. jiroCloudOptions IOptions<JiroCloudOptions> The JiroCloud options for API configuration. Methods ClearInstanceCache() Clears all cached instance metadata. public void ClearInstanceCache() FetchInstanceIdFromApiAsync(string) Fetches the instance ID from the Jiro API using the provided API key (interface compatibility). public Task<string?> FetchInstanceIdFromApiAsync(string apiKey) Parameters apiKey string The API key to use for authentication. Returns Task<string> The instance ID if successful, null otherwise. FetchInstanceMetadataFromApiAsync(string) Fetches the instance metadata from the Jiro API using the provided API key. public Task<InstanceMetadataResponse?> FetchInstanceMetadataFromApiAsync(string apiKey) Parameters apiKey string The API key to use for authentication. Returns Task<InstanceMetadataResponse> The instance metadata response if successful, null otherwise. GetCachedInstanceMetadata() Gets the cached instance metadata if available. public InstanceMetadataResponse? GetCachedInstanceMetadata() Returns InstanceMetadataResponse The cached instance metadata if available, null otherwise. GetCurrentInstanceId() Gets the current instance ID from the cached API result. Falls back to instance context only if cache is empty. public string? GetCurrentInstanceId() Returns string The current instance ID if available, null otherwise. GetInstanceIdAsync(string) Gets the instance ID from cache or fetches it from API if not cached. The instance ID should be consistent throughout the application lifetime. public Task<string?> GetInstanceIdAsync(string sessionId) Parameters sessionId string Not used - kept for interface compatibility. Returns Task<string> The instance ID if found, null otherwise. InitializeInstanceIdAsync(string) Initializes the instance ID by fetching it from the API and caching it. Should be called during application startup. public Task<string?> InitializeInstanceIdAsync(string apiKey) Parameters apiKey string The API key to use for authentication. Returns Task<string> The fetched instance ID if successful, null otherwise. InvalidateInstanceCache(string) Invalidates the cached instance ID. Since instance ID is global, this clears the main cache. public void InvalidateInstanceCache(string sessionId) Parameters sessionId string Not used - kept for interface compatibility."
  },
  "api/Jiro.Core.Services.Context.InstanceMetadataResponse.html": {
    "href": "api/Jiro.Core.Services.Context.InstanceMetadataResponse.html",
    "title": "Class InstanceMetadataResponse | Jiro Documentation",
    "keywords": "Class InstanceMetadataResponse Namespace Jiro.Core.Services.Context Assembly Jiro.Core.dll Root response model for instance metadata API. public class InstanceMetadataResponse Inheritance object InstanceMetadataResponse Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties Data Gets or sets the instance data returned from the API. Contains detailed information about the instance including user data. public InstanceDataModel? Data { get; set; } Property Value InstanceDataModel"
  },
  "api/Jiro.Core.Services.Context.UserModel.html": {
    "href": "api/Jiro.Core.Services.Context.UserModel.html",
    "title": "Class UserModel | Jiro Documentation",
    "keywords": "Class UserModel Namespace Jiro.Core.Services.Context Assembly Jiro.Core.dll User model for API response deserialization. public class UserModel Inheritance object UserModel Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties AccountCreatedDate Gets or sets the date and time when the user account was created. public DateTime AccountCreatedDate { get; set; } Property Value DateTime Email Gets or sets the email address of the user. public string Email { get; set; } Property Value string Id Gets or sets the unique identifier for the user. public string Id { get; set; } Property Value string UserName Gets or sets the username of the user. public string UserName { get; set; } Property Value string"
  },
  "api/Jiro.Core.Services.Context.html": {
    "href": "api/Jiro.Core.Services.Context.html",
    "title": "Namespace Jiro.Core.Services.Context | Jiro Documentation",
    "keywords": "Namespace Jiro.Core.Services.Context Classes InstanceContext Provides contextual information about the current instance and session. This is a scoped service that maintains context throughout a request/operation. InstanceDataModel Instance data model for API response deserialization. InstanceMetadataAccessor Service for accessing and caching instance metadata. InstanceMetadataResponse Root response model for instance metadata API. UserModel User model for API response deserialization. Interfaces IInstanceContext Provides contextual information about the current instance and session. IInstanceMetadataAccessor Service for accessing and caching instance metadata."
  },
  "api/Jiro.Core.Services.Conversation.ConversationCoreService.html": {
    "href": "api/Jiro.Core.Services.Conversation.ConversationCoreService.html",
    "title": "Class ConversationCoreService | Jiro Documentation",
    "keywords": "Class ConversationCoreService Namespace Jiro.Core.Services.Conversation Assembly Jiro.Core.dll Core conversation service that handles basic chat interactions with AI models. This service focuses on simple chat functionality without session management. public class ConversationCoreService : IConversationCoreService Inheritance object ConversationCoreService Implements IConversationCoreService Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors ConversationCoreService(ILogger<ConversationCoreService>, IMessageManager, ChatClient, ISemaphoreManager) Initializes a new instance of the ConversationCoreService. public ConversationCoreService(ILogger<ConversationCoreService> logger, IMessageManager messageCacheService, ChatClient openAIClient, ISemaphoreManager chatSemaphoreManager) Parameters logger ILogger<ConversationCoreService> messageCacheService IMessageManager openAIClient ChatClient chatSemaphoreManager ISemaphoreManager Methods ChatAsync(string, List<ChatMessage>, ChatMessage?) Conducts a chat conversation using the specified message history and optional persona message. public Task<ChatCompletion> ChatAsync(string instanceId, List<ChatMessage> messageHistory, ChatMessage? personaMessage = null) Parameters instanceId string The unique identifier for the conversation instance. messageHistory List<ChatMessage> The list of previous chat messages that form the conversation context. personaMessage ChatMessage An optional persona message to influence the AI's behavior and responses. Returns Task<ChatCompletion> A task that represents the asynchronous operation. The task result contains the chat completion response. ExchangeMessageAsync(string, ChatMessage?, int) Exchanges a single message with the AI system and receives a response. public Task<string> ExchangeMessageAsync(string message, ChatMessage? developerPersonaChatMessage = null, int tokenLimit = 1200) Parameters message string The message to send to the AI system. developerPersonaChatMessage ChatMessage An optional developer persona message to guide the AI's responses. tokenLimit int The maximum number of tokens to use in the response. Default is 1200. Returns Task<string> A task that represents the asynchronous operation. The task result contains the AI's response as a string."
  },
  "api/Jiro.Core.Services.Conversation.HistoryOptimizerService.html": {
    "href": "api/Jiro.Core.Services.Conversation.HistoryOptimizerService.html",
    "title": "Class HistoryOptimizerService | Jiro Documentation",
    "keywords": "Class HistoryOptimizerService Namespace Jiro.Core.Services.Conversation Assembly Jiro.Core.dll public class HistoryOptimizerService : IHistoryOptimizerService Inheritance object HistoryOptimizerService Implements IHistoryOptimizerService Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors HistoryOptimizerService(ILogger<HistoryOptimizerService>, IConversationCoreService) public HistoryOptimizerService(ILogger<HistoryOptimizerService> logger, IConversationCoreService chatCoreService) Parameters logger ILogger<HistoryOptimizerService> chatCoreService IConversationCoreService Methods OptimizeMessageHistory(int, List<ChatMessage>, ChatMessage?) Optimizes the message history to reduce token usage while preserving conversation context. public Task<OptimizerResult> OptimizeMessageHistory(int currentTokenCount, List<ChatMessage> messages, ChatMessage? personaMessage = null) Parameters currentTokenCount int The current number of tokens in the conversation. messages List<ChatMessage> The list of chat messages to optimize. personaMessage ChatMessage An optional persona message to consider during optimization. Returns Task<OptimizerResult> A task that represents the asynchronous operation. The task result contains the optimization result with processed messages. ShouldOptimizeMessageHistory(ChatTokenUsage) Determines whether the message history should be optimized based on token usage. public bool ShouldOptimizeMessageHistory(ChatTokenUsage tokenUsage) Parameters tokenUsage ChatTokenUsage The current token usage statistics. Returns bool True if the message history should be optimized; otherwise, false."
  },
  "api/Jiro.Core.Services.Conversation.IConversationCoreService.html": {
    "href": "api/Jiro.Core.Services.Conversation.IConversationCoreService.html",
    "title": "Interface IConversationCoreService | Jiro Documentation",
    "keywords": "Interface IConversationCoreService Namespace Jiro.Core.Services.Conversation Assembly Jiro.Core.dll Defines the contract for core conversation services that handle chat interactions and message processing. public interface IConversationCoreService Methods ChatAsync(string, List<ChatMessage>, ChatMessage?) Conducts a chat conversation using the specified message history and optional persona message. Task<ChatCompletion> ChatAsync(string instanceId, List<ChatMessage> messageHistory, ChatMessage? personaMessage = null) Parameters instanceId string The unique identifier for the conversation instance. messageHistory List<ChatMessage> The list of previous chat messages that form the conversation context. personaMessage ChatMessage An optional persona message to influence the AI's behavior and responses. Returns Task<ChatCompletion> A task that represents the asynchronous operation. The task result contains the chat completion response. ExchangeMessageAsync(string, ChatMessage?, int) Exchanges a single message with the AI system and receives a response. Task<string> ExchangeMessageAsync(string message, ChatMessage? developerPersonaChatMessage = null, int tokenLimit = 1200) Parameters message string The message to send to the AI system. developerPersonaChatMessage ChatMessage An optional developer persona message to guide the AI's responses. tokenLimit int The maximum number of tokens to use in the response. Default is 1200. Returns Task<string> A task that represents the asynchronous operation. The task result contains the AI's response as a string."
  },
  "api/Jiro.Core.Services.Conversation.IHistoryOptimizerService.html": {
    "href": "api/Jiro.Core.Services.Conversation.IHistoryOptimizerService.html",
    "title": "Interface IHistoryOptimizerService | Jiro Documentation",
    "keywords": "Interface IHistoryOptimizerService Namespace Jiro.Core.Services.Conversation Assembly Jiro.Core.dll Defines the contract for message history optimization services that manage conversation context and token usage. public interface IHistoryOptimizerService Methods OptimizeMessageHistory(int, List<ChatMessage>, ChatMessage?) Optimizes the message history to reduce token usage while preserving conversation context. Task<OptimizerResult> OptimizeMessageHistory(int currentTokenCount, List<ChatMessage> messages, ChatMessage? personaMessage = null) Parameters currentTokenCount int The current number of tokens in the conversation. messages List<ChatMessage> The list of chat messages to optimize. personaMessage ChatMessage An optional persona message to consider during optimization. Returns Task<OptimizerResult> A task that represents the asynchronous operation. The task result contains the optimization result with processed messages. ShouldOptimizeMessageHistory(ChatTokenUsage) Determines whether the message history should be optimized based on token usage. bool ShouldOptimizeMessageHistory(ChatTokenUsage tokenUsage) Parameters tokenUsage ChatTokenUsage The current token usage statistics. Returns bool True if the message history should be optimized; otherwise, false."
  },
  "api/Jiro.Core.Services.Conversation.IPersonalizedConversationService.html": {
    "href": "api/Jiro.Core.Services.Conversation.IPersonalizedConversationService.html",
    "title": "Interface IPersonalizedConversationService | Jiro Documentation",
    "keywords": "Interface IPersonalizedConversationService Namespace Jiro.Core.Services.Conversation Assembly Jiro.Core.dll Defines the contract for personalized conversation services that handle user-specific chat interactions. public interface IPersonalizedConversationService Methods ChatAsync(string, string, string) Conducts a personalized chat conversation for a specific user and instance. Task<string> ChatAsync(string instanceId, string userId, string message) Parameters instanceId string The unique identifier of the conversation instance. userId string The unique identifier of the user participating in the conversation. message string The user's message to process. Returns Task<string> A task that represents the asynchronous operation. The task result contains the AI's response as a string. ExchangeMessageAsync(string) Exchanges a single message with the AI system in a personalized context. Task<string> ExchangeMessageAsync(string message) Parameters message string The message to send to the AI system. Returns Task<string> A task that represents the asynchronous operation. The task result contains the AI's response as a string."
  },
  "api/Jiro.Core.Services.Conversation.Models.ChatMessageWithMetadata.html": {
    "href": "api/Jiro.Core.Services.Conversation.Models.ChatMessageWithMetadata.html",
    "title": "Class ChatMessageWithMetadata | Jiro Documentation",
    "keywords": "Class ChatMessageWithMetadata Namespace Jiro.Core.Services.Conversation.Models Assembly Jiro.Core.dll Represents a chat message with additional metadata for conversation management. public class ChatMessageWithMetadata Inheritance object ChatMessageWithMetadata Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties CreatedAt Gets or sets the timestamp when this message was created. public DateTime CreatedAt { get; set; } Property Value DateTime IsUser Gets or sets a value indicating whether this message was sent by a user. public bool IsUser { get; set; } Property Value bool Message Gets or sets the actual chat message content from the OpenAI library. public ChatMessage Message { get; set; } Property Value ChatMessage MessageId Gets or sets the unique identifier for the message. public string MessageId { get; set; } Property Value string Type Gets or sets the type of the message content. public MessageType Type { get; set; } Property Value MessageType"
  },
  "api/Jiro.Core.Services.Conversation.Models.OptimizerResult.html": {
    "href": "api/Jiro.Core.Services.Conversation.Models.OptimizerResult.html",
    "title": "Class OptimizerResult | Jiro Documentation",
    "keywords": "Class OptimizerResult Namespace Jiro.Core.Services.Conversation.Models Assembly Jiro.Core.dll Represents the result of a message history optimization operation. public class OptimizerResult Inheritance object OptimizerResult Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties MessagesSummary Gets or sets a summary of the messages that were processed during optimization. public string MessagesSummary { get; set; } Property Value string RemovedMessages Gets or sets the number of messages that were removed during optimization. public int RemovedMessages { get; set; } Property Value int"
  },
  "api/Jiro.Core.Services.Conversation.Models.Session.html": {
    "href": "api/Jiro.Core.Services.Conversation.Models.Session.html",
    "title": "Class Session | Jiro Documentation",
    "keywords": "Class Session Namespace Jiro.Core.Services.Conversation.Models Assembly Jiro.Core.dll Represents a chat session with its metadata and associated messages. public class Session Inheritance object Session Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties CreatedAt Gets or sets the date and time when the session was created. public DateTime CreatedAt { get; set; } Property Value DateTime InstanceId Gets or sets the unique identifier of the instance that owns this session. public string InstanceId { get; set; } Property Value string LastUpdatedAt Gets or sets the date and time when the session was last updated. public DateTime LastUpdatedAt { get; set; } Property Value DateTime Messages Gets or sets the collection of chat messages associated with this session. public List<ChatMessageWithMetadata> Messages { get; set; } Property Value List<ChatMessageWithMetadata> Name Gets or sets the display name of the session. public string Name { get; set; } Property Value string SessionId Gets or sets the unique identifier of the session. public string SessionId { get; set; } Property Value string"
  },
  "api/Jiro.Core.Services.Conversation.Models.html": {
    "href": "api/Jiro.Core.Services.Conversation.Models.html",
    "title": "Namespace Jiro.Core.Services.Conversation.Models | Jiro Documentation",
    "keywords": "Namespace Jiro.Core.Services.Conversation.Models Classes ChatMessageWithMetadata Represents a chat message with additional metadata for conversation management. OptimizerResult Represents the result of a message history optimization operation. Session Represents a chat session with its metadata and associated messages."
  },
  "api/Jiro.Core.Services.Conversation.PersonalizedConversationService.html": {
    "href": "api/Jiro.Core.Services.Conversation.PersonalizedConversationService.html",
    "title": "Class PersonalizedConversationService | Jiro Documentation",
    "keywords": "Class PersonalizedConversationService Namespace Jiro.Core.Services.Conversation Assembly Jiro.Core.dll Service for managing personalized chat conversations with AI integration, message history optimization, and token usage tracking. public class PersonalizedConversationService : IPersonalizedConversationService Inheritance object PersonalizedConversationService Implements IPersonalizedConversationService Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors PersonalizedConversationService(ILogger<PersonalizedConversationService>, IConversationCoreService, IPersonaService, IMessageManager, IHistoryOptimizerService, ICommandContext, IChatSessionRepository, IMessageRepository, IInstanceMetadataAccessor) Initializes a new instance of the PersonalizedConversationService class. public PersonalizedConversationService(ILogger<PersonalizedConversationService> logger, IConversationCoreService chatCoreService, IPersonaService personaService, IMessageManager messageCacheService, IHistoryOptimizerService historyOptimizerService, ICommandContext commandContext, IChatSessionRepository chatSessionRepository, IMessageRepository messageRepository, IInstanceMetadataAccessor instanceMetadataAccessor) Parameters logger ILogger<PersonalizedConversationService> The logger for recording conversation operations. chatCoreService IConversationCoreService The core chat service for AI interactions. personaService IPersonaService The persona service for managing AI personality. messageCacheService IMessageManager The message cache service for managing conversation history. historyOptimizerService IHistoryOptimizerService The history optimizer service for managing token usage. commandContext ICommandContext The command context for processing commands. chatSessionRepository IChatSessionRepository The repository for chat session data. messageRepository IMessageRepository The repository for message data. instanceMetadataAccessor IInstanceMetadataAccessor The accessor for instance metadata. Methods ChatAsync(string, string, string) Processes a chat message for a specific instance and session, managing conversation history and AI response generation. public Task<string> ChatAsync(string instanceId, string sessionId, string message) Parameters instanceId string The unique identifier of the instance. sessionId string The unique identifier of the chat session. message string The user message to process. Returns Task<string> A task that represents the asynchronous operation, containing the AI assistant's response. Exceptions Exception Thrown when persona is not found or no assistant response is received. ExchangeMessageAsync(string) Exchanges a single message with the AI assistant without session management. public Task<string> ExchangeMessageAsync(string message) Parameters message string The message to send to the AI assistant. Returns Task<string> A task that represents the asynchronous operation, containing the AI assistant's response."
  },
  "api/Jiro.Core.Services.Conversation.html": {
    "href": "api/Jiro.Core.Services.Conversation.html",
    "title": "Namespace Jiro.Core.Services.Conversation | Jiro Documentation",
    "keywords": "Namespace Jiro.Core.Services.Conversation Classes ConversationCoreService Core conversation service that handles basic chat interactions with AI models. This service focuses on simple chat functionality without session management. HistoryOptimizerService PersonalizedConversationService Service for managing personalized chat conversations with AI integration, message history optimization, and token usage tracking. Interfaces IConversationCoreService Defines the contract for core conversation services that handle chat interactions and message processing. IHistoryOptimizerService Defines the contract for message history optimization services that manage conversation context and token usage. IPersonalizedConversationService Defines the contract for personalized conversation services that handle user-specific chat interactions."
  },
  "api/Jiro.Core.Services.Geolocation.GeolocationService.html": {
    "href": "api/Jiro.Core.Services.Geolocation.GeolocationService.html",
    "title": "Class GeolocationService | Jiro Documentation",
    "keywords": "Class GeolocationService Namespace Jiro.Core.Services.Geolocation Assembly Jiro.Core.dll Provides geolocation services by integrating with external geolocation APIs to convert city names to geographic coordinates. public class GeolocationService : IGeolocationService Inheritance object GeolocationService Implements IGeolocationService Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors GeolocationService(IHttpClientFactory) Initializes a new instance of the GeolocationService class. public GeolocationService(IHttpClientFactory clientFactory) Parameters clientFactory IHttpClientFactory The HTTP client factory for creating geolocation API clients. Methods GetGeolocationAsync(string) Retrieves geolocation information (latitude and longitude) for the specified city. public Task<GeoLocationResponse?> GetGeolocationAsync(string city) Parameters city string The name of the city to get coordinates for. Returns Task<GeoLocationResponse> A task that represents the asynchronous operation. The task result contains the geolocation response or null if not found. Exceptions JiroException Thrown when the city parameter is null or empty, when the city cannot be found, or when there's an error fetching geolocation data."
  },
  "api/Jiro.Core.Services.Geolocation.IGeolocationService.html": {
    "href": "api/Jiro.Core.Services.Geolocation.IGeolocationService.html",
    "title": "Interface IGeolocationService | Jiro Documentation",
    "keywords": "Interface IGeolocationService Namespace Jiro.Core.Services.Geolocation Assembly Jiro.Core.dll Defines the contract for geolocation services that provide coordinate information for geographic locations. public interface IGeolocationService Methods GetGeolocationAsync(string) Retrieves geolocation information (latitude and longitude) for the specified city. Task<GeoLocationResponse?> GetGeolocationAsync(string city) Parameters city string The name of the city to get coordinates for. Returns Task<GeoLocationResponse> A task that represents the asynchronous operation. The task result contains the geolocation response or null if not found."
  },
  "api/Jiro.Core.Services.Geolocation.html": {
    "href": "api/Jiro.Core.Services.Geolocation.html",
    "title": "Namespace Jiro.Core.Services.Geolocation | Jiro Documentation",
    "keywords": "Namespace Jiro.Core.Services.Geolocation Classes GeolocationService Provides geolocation services by integrating with external geolocation APIs to convert city names to geographic coordinates. Interfaces IGeolocationService Defines the contract for geolocation services that provide coordinate information for geographic locations."
  },
  "api/Jiro.Core.Services.MessageCache.CompositeMessageManager.html": {
    "href": "api/Jiro.Core.Services.MessageCache.CompositeMessageManager.html",
    "title": "Class CompositeMessageManager | Jiro Documentation",
    "keywords": "Class CompositeMessageManager Namespace Jiro.Core.Services.MessageCache Assembly Jiro.Core.dll Composite service that combines SessionManager and MessageCacheService functionality. Provides the IMessageManager interface by delegating to the specialized services. public class CompositeMessageManager : IMessageManager Inheritance object CompositeMessageManager Implements IMessageManager Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors CompositeMessageManager(ISessionManager, IMessageCacheService) Initializes a new instance of the CompositeMessageManager class. public CompositeMessageManager(ISessionManager sessionManager, IMessageCacheService messageCacheService) Parameters sessionManager ISessionManager The session management service. messageCacheService IMessageCacheService The message caching service. Exceptions ArgumentNullException Thrown when sessionManager or messageCacheService is null. Methods AddChatExchangeAsync(string, List<ChatMessageWithMetadata>, List<Message>) Adds a new chat exchange containing multiple messages to the specified session. public Task AddChatExchangeAsync(string sessionId, List<ChatMessageWithMetadata> messages, List<Message> modelMessages) Parameters sessionId string The unique identifier of the session. messages List<ChatMessageWithMetadata> The list of chat messages with metadata to add. modelMessages List<Message> The list of model messages to add. Returns Task A task that represents the asynchronous operation. ClearMessageCache() Clears all message cache entries. Legacy method. public void ClearMessageCache() ClearOldMessages(string, int) Removes old messages from the specified session within the given range. public void ClearOldMessages(string sessionId, int range) Parameters sessionId string The unique identifier of the session. range int The number of messages to keep (removes messages beyond this count). GetChatMessageCount(string) Gets the count of messages in a specific session from cache. public int GetChatMessageCount(string sessionId) Parameters sessionId string The session identifier. Returns int The number of messages in the session. GetChatSessionsAsync(string) Retrieves all chat sessions associated with the specified instance. public Task<List<ChatSession>> GetChatSessionsAsync(string instanceId) Parameters instanceId string The unique identifier of the instance. Returns Task<List<ChatSession>> A task that represents the asynchronous operation. The task result contains a list of chat sessions. GetOrCreateChatSessionAsync(string, bool) Retrieves an existing chat session or creates a new one if it doesn't exist. public Task<Session> GetOrCreateChatSessionAsync(string sessionId, bool includeMessages = false) Parameters sessionId string The unique identifier of the session. includeMessages bool Whether to include messages in the result. Returns Task<Session> A task that represents the asynchronous operation. The task result contains the session. GetPersonaCoreMessageAsync() Retrieves the core persona message used for AI interactions. public Task<string?> GetPersonaCoreMessageAsync() Returns Task<string> A task that represents the asynchronous operation. The task result contains the persona message or null if not found. GetSessionAsync(string, bool, string?) Retrieves the session with the specified session ID. public Task<Session?> GetSessionAsync(string sessionId, bool includeMessages = false, string? instanceId = null) Parameters sessionId string The unique identifier of the session. includeMessages bool Whether to include messages in the result. instanceId string The unique identifier of the instance. If null, will be fetched from database. Returns Task<Session> A task that represents the asynchronous operation. The task result contains the session or null if not found. InvalidateInstanceSessionsCache(string) Clears all cached sessions for a specific instance. public void InvalidateInstanceSessionsCache(string instanceId) Parameters instanceId string The unique identifier of the instance. InvalidateSessionCache(string) Clears all cached data for a specific session. public void InvalidateSessionCache(string sessionId) Parameters sessionId string The unique identifier of the session. ModifyMessage(string, string, int) Modifies a message in the cache with the specified key and expiration. Legacy method. public void ModifyMessage(string key, string message, int minutes) Parameters key string The cache key. message string The message content. minutes int The expiration time in minutes. RemoveSessionAsync(string) Removes a chat session and all its messages from both the database and cache. public Task<bool> RemoveSessionAsync(string sessionId) Parameters sessionId string The unique identifier of the session to remove. Returns Task<bool> A task that represents the asynchronous operation. Returns true if the session was found and removed, false otherwise. UpdateSessionAsync(string, string?, string?) Updates a chat session's metadata (name and description) in both the database and cache. public Task<bool> UpdateSessionAsync(string sessionId, string? name = null, string? description = null) Parameters sessionId string The unique identifier of the session to update. name string The new name for the session. If null, the name will not be updated. description string The new description for the session. If null, the description will not be updated. Returns Task<bool> A task that represents the asynchronous operation. Returns true if the session was found and updated, false otherwise."
  },
  "api/Jiro.Core.Services.MessageCache.IMessageCacheService.html": {
    "href": "api/Jiro.Core.Services.MessageCache.IMessageCacheService.html",
    "title": "Interface IMessageCacheService | Jiro Documentation",
    "keywords": "Interface IMessageCacheService Namespace Jiro.Core.Services.MessageCache Assembly Jiro.Core.dll Manages message caching, history optimization, and message exchange operations. public interface IMessageCacheService Methods AddChatExchangeAsync(string, List<ChatMessageWithMetadata>, List<Message>) Adds a chat exchange containing multiple messages to a session. Task AddChatExchangeAsync(string sessionId, List<ChatMessageWithMetadata> messages, List<Message> modelMessages) Parameters sessionId string The session identifier. messages List<ChatMessageWithMetadata> Messages with metadata for cache. modelMessages List<Message> Messages for database persistence. Returns Task ClearMessageCache() Legacy methods for backward compatibility. void ClearMessageCache() GetCachedMessageCount(string) Gets message count for a session from cache. int GetCachedMessageCount(string sessionId) Parameters sessionId string The session identifier. Returns int Number of cached messages. GetPersonaCoreMessageAsync() Retrieves the core persona message. Task<string?> GetPersonaCoreMessageAsync() Returns Task<string> The persona message or null if not found. ModifyMessage(string, string, int) void ModifyMessage(string key, string message, int minutes) Parameters key string message string minutes int TrimMessagesInCache(string, int) Removes old messages from cache within specified range. void TrimMessagesInCache(string sessionId, int range) Parameters sessionId string The session identifier. range int Number of messages to keep. UpdateSessionCache(string, List<ChatMessageWithMetadata>) Updates cached session with new messages. void UpdateSessionCache(string sessionId, List<ChatMessageWithMetadata> messages) Parameters sessionId string The session identifier. messages List<ChatMessageWithMetadata> Messages to add to cache."
  },
  "api/Jiro.Core.Services.MessageCache.IMessageManager.html": {
    "href": "api/Jiro.Core.Services.MessageCache.IMessageManager.html",
    "title": "Interface IMessageManager | Jiro Documentation",
    "keywords": "Interface IMessageManager Namespace Jiro.Core.Services.MessageCache Assembly Jiro.Core.dll Composite interface that combines session management and message caching operations. This interface bridges the separated services for backward compatibility while consumers migrate. public interface IMessageManager Methods AddChatExchangeAsync(string, List<ChatMessageWithMetadata>, List<Message>) Adds a new chat exchange containing multiple messages to the specified session. Task AddChatExchangeAsync(string sessionId, List<ChatMessageWithMetadata> messages, List<Message> modelMessages) Parameters sessionId string The unique identifier of the session. messages List<ChatMessageWithMetadata> The list of chat messages with metadata to add. modelMessages List<Message> The list of model messages to add. Returns Task A task that represents the asynchronous operation. ClearMessageCache() Clears all message cache entries. Legacy method. void ClearMessageCache() ClearOldMessages(string, int) Removes old messages from the specified session within the given range. void ClearOldMessages(string sessionId, int range) Parameters sessionId string The unique identifier of the session. range int The number of messages to keep (removes messages beyond this count). GetChatMessageCount(string) Gets the count of messages in a specific session from cache. int GetChatMessageCount(string sessionId) Parameters sessionId string The session identifier. Returns int The number of messages in the session. GetChatSessionsAsync(string) Retrieves all chat sessions associated with the specified instance. Task<List<ChatSession>> GetChatSessionsAsync(string instanceId) Parameters instanceId string The unique identifier of the instance. Returns Task<List<ChatSession>> A task that represents the asynchronous operation. The task result contains a list of chat sessions. GetOrCreateChatSessionAsync(string, bool) Retrieves an existing chat session or creates a new one if it doesn't exist. Task<Session> GetOrCreateChatSessionAsync(string sessionId, bool includeMessages = false) Parameters sessionId string The unique identifier of the session. includeMessages bool Whether to include messages in the result. Returns Task<Session> A task that represents the asynchronous operation. The task result contains the session. GetPersonaCoreMessageAsync() Retrieves the core persona message used for AI interactions. Task<string?> GetPersonaCoreMessageAsync() Returns Task<string> A task that represents the asynchronous operation. The task result contains the persona message or null if not found. GetSessionAsync(string, bool, string?) Retrieves the session with the specified session ID. Task<Session?> GetSessionAsync(string sessionId, bool includeMessages = false, string? instanceId = null) Parameters sessionId string The unique identifier of the session. includeMessages bool Whether to include messages in the result. instanceId string The unique identifier of the instance. If null, will be fetched from database. Returns Task<Session> A task that represents the asynchronous operation. The task result contains the session or null if not found. InvalidateInstanceSessionsCache(string) Clears all cached sessions for a specific instance. void InvalidateInstanceSessionsCache(string instanceId) Parameters instanceId string The unique identifier of the instance. InvalidateSessionCache(string) Clears all cached data for a specific session. void InvalidateSessionCache(string sessionId) Parameters sessionId string The unique identifier of the session. ModifyMessage(string, string, int) Modifies a message in the cache with the specified key and expiration. Legacy method. void ModifyMessage(string key, string message, int minutes) Parameters key string The cache key. message string The message content. minutes int The expiration time in minutes. RemoveSessionAsync(string) Removes a chat session and all its messages from both the database and cache. Task<bool> RemoveSessionAsync(string sessionId) Parameters sessionId string The unique identifier of the session to remove. Returns Task<bool> A task that represents the asynchronous operation. Returns true if the session was found and removed, false otherwise. UpdateSessionAsync(string, string?, string?) Updates a chat session's metadata (name and description) in both the database and cache. Task<bool> UpdateSessionAsync(string sessionId, string? name = null, string? description = null) Parameters sessionId string The unique identifier of the session to update. name string The new name for the session. If null, the name will not be updated. description string The new description for the session. If null, the description will not be updated. Returns Task<bool> A task that represents the asynchronous operation. Returns true if the session was found and updated, false otherwise."
  },
  "api/Jiro.Core.Services.MessageCache.ISessionManager.html": {
    "href": "api/Jiro.Core.Services.MessageCache.ISessionManager.html",
    "title": "Interface ISessionManager | Jiro Documentation",
    "keywords": "Interface ISessionManager Namespace Jiro.Core.Services.MessageCache Assembly Jiro.Core.dll Manages chat session operations including creation, retrieval, updates, and deletion. public interface ISessionManager Methods GetOrCreateChatSessionAsync(string, bool) Gets or creates a chat session. Task<Session> GetOrCreateChatSessionAsync(string sessionId, bool includeMessages = false) Parameters sessionId string The session identifier. includeMessages bool Whether to include messages in the result. Returns Task<Session> The session with or without messages. GetSessionAsync(string, bool, string?) Retrieves a session by ID with optional message loading. Task<Session?> GetSessionAsync(string sessionId, bool includeMessages = false, string? instanceId = null) Parameters sessionId string The session identifier. includeMessages bool Whether to include messages in the result. instanceId string The instance ID. If null, will be resolved automatically. Returns Task<Session> The session or null if not found. GetSessionsAsync(string) Retrieves all chat sessions for an instance. Task<List<ChatSession>> GetSessionsAsync(string instanceId) Parameters instanceId string The instance identifier. Returns Task<List<ChatSession>> List of chat sessions without messages for performance. InvalidateInstanceSessionsCache(string) Invalidates all sessions cache for an instance. void InvalidateInstanceSessionsCache(string instanceId) Parameters instanceId string The instance identifier. InvalidateSessionCache(string) Invalidates cached session data. void InvalidateSessionCache(string sessionId) Parameters sessionId string The session identifier. RemoveSessionAsync(string) Removes a session and all its messages. Task<bool> RemoveSessionAsync(string sessionId) Parameters sessionId string The session identifier. Returns Task<bool> True if removed successfully. UpdateSessionAsync(string, string?, string?) Updates session metadata. Task<bool> UpdateSessionAsync(string sessionId, string? name = null, string? description = null) Parameters sessionId string The session identifier. name string New session name. description string New session description. Returns Task<bool> True if updated successfully."
  },
  "api/Jiro.Core.Services.MessageCache.MessageCacheService.html": {
    "href": "api/Jiro.Core.Services.MessageCache.MessageCacheService.html",
    "title": "Class MessageCacheService | Jiro Documentation",
    "keywords": "Class MessageCacheService Namespace Jiro.Core.Services.MessageCache Assembly Jiro.Core.dll Handles message caching, history optimization, and message exchange operations. Separated from session management for better separation of concerns. public class MessageCacheService : IMessageCacheService Inheritance object MessageCacheService Implements IMessageCacheService Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors MessageCacheService(ILogger<MessageCacheService>, IMemoryCache, IMessageRepository, IChatSessionRepository, IStaticMessageService, IInstanceMetadataAccessor) Initializes a new instance of the MessageCacheService class. public MessageCacheService(ILogger<MessageCacheService> logger, IMemoryCache memoryCache, IMessageRepository messageRepository, IChatSessionRepository chatSessionRepository, IStaticMessageService staticMessageService, IInstanceMetadataAccessor instanceMetadataAccessor) Parameters logger ILogger<MessageCacheService> The logger instance for this service. memoryCache IMemoryCache The memory cache for message caching. messageRepository IMessageRepository The repository for message data access. chatSessionRepository IChatSessionRepository The repository for session data access. staticMessageService IStaticMessageService The service for static message operations. instanceMetadataAccessor IInstanceMetadataAccessor The service for accessing instance metadata. Exceptions ArgumentNullException Thrown when staticMessageService or instanceMetadataAccessor is null. Methods AddChatExchangeAsync(string, List<ChatMessageWithMetadata>, List<Message>) Adds a chat exchange containing multiple messages to a session. public Task AddChatExchangeAsync(string sessionId, List<ChatMessageWithMetadata> messages, List<Message> modelMessages) Parameters sessionId string The session identifier. messages List<ChatMessageWithMetadata> Messages with metadata for cache. modelMessages List<Message> Messages for database persistence. Returns Task ClearMessageCache() Legacy methods for backward compatibility. public void ClearMessageCache() GetCachedMessageCount(string) Gets message count for a session from cache. public int GetCachedMessageCount(string sessionId) Parameters sessionId string The session identifier. Returns int Number of cached messages. GetPersonaCoreMessageAsync() Retrieves the core persona message. public Task<string?> GetPersonaCoreMessageAsync() Returns Task<string> The persona message or null if not found. ModifyMessage(string, string, int) public void ModifyMessage(string key, string message, int minutes) Parameters key string message string minutes int TrimMessagesInCache(string, int) Removes old messages from cache within specified range. public void TrimMessagesInCache(string sessionId, int range) Parameters sessionId string The session identifier. range int Number of messages to keep. UpdateSessionCache(string, List<ChatMessageWithMetadata>) Updates cached session with new messages. public void UpdateSessionCache(string sessionId, List<ChatMessageWithMetadata> messages) Parameters sessionId string The session identifier. messages List<ChatMessageWithMetadata> Messages to add to cache."
  },
  "api/Jiro.Core.Services.MessageCache.SessionManager.html": {
    "href": "api/Jiro.Core.Services.MessageCache.SessionManager.html",
    "title": "Class SessionManager | Jiro Documentation",
    "keywords": "Class SessionManager Namespace Jiro.Core.Services.MessageCache Assembly Jiro.Core.dll Manages chat session operations with caching for performance optimization. public class SessionManager : ISessionManager Inheritance object SessionManager Implements ISessionManager Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors SessionManager(ILogger<SessionManager>, IMemoryCache, IChatSessionRepository, IInstanceMetadataAccessor) Initializes a new instance of the SessionManager class. public SessionManager(ILogger<SessionManager> logger, IMemoryCache memoryCache, IChatSessionRepository chatSessionRepository, IInstanceMetadataAccessor instanceMetadataAccessor) Parameters logger ILogger<SessionManager> The logger instance for this service. memoryCache IMemoryCache The memory cache for session caching. chatSessionRepository IChatSessionRepository The repository for session data access. instanceMetadataAccessor IInstanceMetadataAccessor The service for accessing instance metadata. Exceptions ArgumentNullException Thrown when instanceMetadataAccessor is null. Methods GetOrCreateChatSessionAsync(string, bool) Gets or creates a chat session. public Task<Session> GetOrCreateChatSessionAsync(string sessionId, bool includeMessages = false) Parameters sessionId string The session identifier. includeMessages bool Whether to include messages in the result. Returns Task<Session> The session with or without messages. GetSessionAsync(string, bool, string?) Retrieves a session by ID with optional message loading. public Task<Session?> GetSessionAsync(string sessionId, bool includeMessages = false, string? instanceId = null) Parameters sessionId string The session identifier. includeMessages bool Whether to include messages in the result. instanceId string The instance ID. If null, will be resolved automatically. Returns Task<Session> The session or null if not found. GetSessionsAsync(string) Retrieves all chat sessions for an instance. public Task<List<ChatSession>> GetSessionsAsync(string instanceId) Parameters instanceId string The instance identifier. Returns Task<List<ChatSession>> List of chat sessions without messages for performance. InvalidateInstanceSessionsCache(string) Invalidates all sessions cache for an instance. public void InvalidateInstanceSessionsCache(string instanceId) Parameters instanceId string The instance identifier. InvalidateSessionCache(string) Invalidates cached session data. public void InvalidateSessionCache(string sessionId) Parameters sessionId string The session identifier. RemoveSessionAsync(string) Removes a session and all its messages. public Task<bool> RemoveSessionAsync(string sessionId) Parameters sessionId string The session identifier. Returns Task<bool> True if removed successfully. UpdateSessionAsync(string, string?, string?) Updates session metadata. public Task<bool> UpdateSessionAsync(string sessionId, string? name = null, string? description = null) Parameters sessionId string The session identifier. name string New session name. description string New session description. Returns Task<bool> True if updated successfully."
  },
  "api/Jiro.Core.Services.MessageCache.html": {
    "href": "api/Jiro.Core.Services.MessageCache.html",
    "title": "Namespace Jiro.Core.Services.MessageCache | Jiro Documentation",
    "keywords": "Namespace Jiro.Core.Services.MessageCache Classes CompositeMessageManager Composite service that combines SessionManager and MessageCacheService functionality. Provides the IMessageManager interface by delegating to the specialized services. MessageCacheService Handles message caching, history optimization, and message exchange operations. Separated from session management for better separation of concerns. SessionManager Manages chat session operations with caching for performance optimization. Interfaces IMessageCacheService Manages message caching, history optimization, and message exchange operations. IMessageManager Composite interface that combines session management and message caching operations. This interface bridges the separated services for backward compatibility while consumers migrate. ISessionManager Manages chat session operations including creation, retrieval, updates, and deletion."
  },
  "api/Jiro.Core.Services.Persona.IPersonaService.html": {
    "href": "api/Jiro.Core.Services.Persona.IPersonaService.html",
    "title": "Interface IPersonaService | Jiro Documentation",
    "keywords": "Interface IPersonaService Namespace Jiro.Core.Services.Persona Assembly Jiro.Core.dll Defines the contract for persona management services that handle AI personality configuration and updates. public interface IPersonaService Methods AddSummaryAsync(string) Adds a summary or update message to the persona configuration. Task AddSummaryAsync(string updateMessage) Parameters updateMessage string The message to add to the persona summary. Returns Task A task that represents the asynchronous operation. GetPersonaAsync(string) Retrieves the persona configuration for the specified instance. Task<string> GetPersonaAsync(string instanceId = \"\") Parameters instanceId string The unique identifier of the instance. Uses default if empty. Returns Task<string> A task that represents the asynchronous operation. The task result contains the persona configuration as a string."
  },
  "api/Jiro.Core.Services.Persona.PersonaService.html": {
    "href": "api/Jiro.Core.Services.Persona.PersonaService.html",
    "title": "Class PersonaService | Jiro Documentation",
    "keywords": "Class PersonaService Namespace Jiro.Core.Services.Persona Assembly Jiro.Core.dll Service for managing AI persona configuration, including personality messages and conversation summaries. public class PersonaService : IPersonaService Inheritance object PersonaService Implements IPersonaService Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors PersonaService(ILogger<PersonaService>, IMessageManager, IConversationCoreService, IMemoryCache, ISemaphoreManager) Initializes a new instance of the PersonaService class. public PersonaService(ILogger<PersonaService> logger, IMessageManager messageCacheService, IConversationCoreService chatService, IMemoryCache memoryCache, ISemaphoreManager chatSemaphoreManager) Parameters logger ILogger<PersonaService> The logger for recording persona operations. messageCacheService IMessageManager The message cache service for persona data. chatService IConversationCoreService The core conversation service. memoryCache IMemoryCache The memory cache for storing computed persona messages. chatSemaphoreManager ISemaphoreManager The semaphore manager for controlling concurrent access. Methods AddSummaryAsync(string) Adds a conversation summary to the persona message to maintain context across sessions. public Task AddSummaryAsync(string updateMessage) Parameters updateMessage string The summary message to append to the persona. Returns Task A task that represents the asynchronous operation. GetPersonaAsync(string) Retrieves the persona message for the specified instance, using thread-safe access control. public Task<string> GetPersonaAsync(string instanceId = \"\") Parameters instanceId string The unique identifier of the instance. If empty, returns the default persona. Returns Task<string> A task that represents the asynchronous operation, containing the persona message."
  },
  "api/Jiro.Core.Services.Persona.html": {
    "href": "api/Jiro.Core.Services.Persona.html",
    "title": "Namespace Jiro.Core.Services.Persona | Jiro Documentation",
    "keywords": "Namespace Jiro.Core.Services.Persona Classes PersonaService Service for managing AI persona configuration, including personality messages and conversation summaries. Interfaces IPersonaService Defines the contract for persona management services that handle AI personality configuration and updates."
  },
  "api/Jiro.Core.Services.Semaphore.ISemaphoreManager.html": {
    "href": "api/Jiro.Core.Services.Semaphore.ISemaphoreManager.html",
    "title": "Interface ISemaphoreManager | Jiro Documentation",
    "keywords": "Interface ISemaphoreManager Namespace Jiro.Core.Services.Semaphore Assembly Jiro.Core.dll Defines the contract for managing semaphores across different instances to control concurrent access to resources. public interface ISemaphoreManager Methods GetOrCreateInstanceSemaphore(string) Retrieves an existing semaphore for the specified instance or creates a new one if it doesn't exist. SemaphoreSlim GetOrCreateInstanceSemaphore(string instanceId) Parameters instanceId string The unique identifier for the instance that needs semaphore protection. Returns SemaphoreSlim A SemaphoreSlim instance associated with the specified instance ID."
  },
  "api/Jiro.Core.Services.Semaphore.SemaphoreManager.html": {
    "href": "api/Jiro.Core.Services.Semaphore.SemaphoreManager.html",
    "title": "Class SemaphoreManager | Jiro Documentation",
    "keywords": "Class SemaphoreManager Namespace Jiro.Core.Services.Semaphore Assembly Jiro.Core.dll Manages semaphores for different instances to ensure thread-safe access to resources. public class SemaphoreManager : ISemaphoreManager Inheritance object SemaphoreManager Implements ISemaphoreManager Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors SemaphoreManager(ILogger<SemaphoreManager>) Initializes a new instance of the SemaphoreManager class. public SemaphoreManager(ILogger<SemaphoreManager> logger) Parameters logger ILogger<SemaphoreManager> The logger instance for logging semaphore operations. Methods GetOrCreateInstanceSemaphore(string) Retrieves an existing semaphore for the specified instance or creates a new one if it doesn't exist. Each semaphore is configured to allow only one concurrent operation (maxCount = 1). public SemaphoreSlim GetOrCreateInstanceSemaphore(string instanceId) Parameters instanceId string The unique identifier for the instance that needs semaphore protection. Returns SemaphoreSlim A SemaphoreSlim instance associated with the specified instance ID."
  },
  "api/Jiro.Core.Services.Semaphore.html": {
    "href": "api/Jiro.Core.Services.Semaphore.html",
    "title": "Namespace Jiro.Core.Services.Semaphore | Jiro Documentation",
    "keywords": "Namespace Jiro.Core.Services.Semaphore Classes SemaphoreManager Manages semaphores for different instances to ensure thread-safe access to resources. Interfaces ISemaphoreManager Defines the contract for managing semaphores across different instances to control concurrent access to resources."
  },
  "api/Jiro.Core.Services.StaticMessage.IStaticMessageService.html": {
    "href": "api/Jiro.Core.Services.StaticMessage.IStaticMessageService.html",
    "title": "Interface IStaticMessageService | Jiro Documentation",
    "keywords": "Interface IStaticMessageService Namespace Jiro.Core.Services.StaticMessage Assembly Jiro.Core.dll Defines the contract for managing static markdown messages from the file system. public interface IStaticMessageService Methods ClearStaticMessageCache() Clears all static message cache entries. void ClearStaticMessageCache() GetPersonaCoreMessageAsync() Retrieves the core persona message used for AI interactions. Task<string?> GetPersonaCoreMessageAsync() Returns Task<string> A task that represents the asynchronous operation. The task result contains the persona message or null if not found. GetStaticMessageAsync(string) Retrieves a static message from cache or file system. Task<string?> GetStaticMessageAsync(string key) Parameters key string The message key/identifier. Returns Task<string> A task that represents the asynchronous operation. The task result contains the message content or null if not found. InvalidateStaticMessage(string) Clears a specific static message from cache. void InvalidateStaticMessage(string key) Parameters key string The message key to clear from cache. SetStaticMessage(string, string, int) Sets a static message in cache with custom expiration. void SetStaticMessage(string key, string message, int expirationMinutes) Parameters key string The cache key. message string The message content. expirationMinutes int The expiration time in minutes."
  },
  "api/Jiro.Core.Services.StaticMessage.StaticMessageService.html": {
    "href": "api/Jiro.Core.Services.StaticMessage.StaticMessageService.html",
    "title": "Class StaticMessageService | Jiro Documentation",
    "keywords": "Class StaticMessageService Namespace Jiro.Core.Services.StaticMessage Assembly Jiro.Core.dll Manages static markdown messages from the file system with caching capabilities. This service handles persona messages, system prompts, and other static content stored as markdown files. public class StaticMessageService : IStaticMessageService Inheritance object StaticMessageService Implements IStaticMessageService Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors StaticMessageService(ILogger<StaticMessageService>, IMemoryCache) Initializes a new instance of the StaticMessageService class. public StaticMessageService(ILogger<StaticMessageService> logger, IMemoryCache memoryCache) Parameters logger ILogger<StaticMessageService> The logger instance. memoryCache IMemoryCache The memory cache instance. Methods ClearStaticMessageCache() Clears all static message cache entries. public void ClearStaticMessageCache() GetPersonaCoreMessageAsync() Retrieves the core persona message used for AI interactions. public Task<string?> GetPersonaCoreMessageAsync() Returns Task<string> A task that represents the asynchronous operation. The task result contains the persona message or null if not found. GetStaticMessageAsync(string) Retrieves a static message from cache or file system. public Task<string?> GetStaticMessageAsync(string key) Parameters key string The message key/identifier. Returns Task<string> A task that represents the asynchronous operation. The task result contains the message content or null if not found. InvalidateStaticMessage(string) Clears a specific static message from cache. public void InvalidateStaticMessage(string key) Parameters key string The message key to clear from cache. SetStaticMessage(string, string, int) Sets a static message in cache with custom expiration. public void SetStaticMessage(string key, string message, int expirationMinutes) Parameters key string The cache key. message string The message content. expirationMinutes int The expiration time in minutes."
  },
  "api/Jiro.Core.Services.StaticMessage.html": {
    "href": "api/Jiro.Core.Services.StaticMessage.html",
    "title": "Namespace Jiro.Core.Services.StaticMessage | Jiro Documentation",
    "keywords": "Namespace Jiro.Core.Services.StaticMessage Classes StaticMessageService Manages static markdown messages from the file system with caching capabilities. This service handles persona messages, system prompts, and other static content stored as markdown files. Interfaces IStaticMessageService Defines the contract for managing static markdown messages from the file system."
  },
  "api/Jiro.Core.Services.Supervisor.SupervisorService.html": {
    "href": "api/Jiro.Core.Services.Supervisor.SupervisorService.html",
    "title": "Class SupervisorService | Jiro Documentation",
    "keywords": "Class SupervisorService Namespace Jiro.Core.Services.Supervisor Assembly Jiro.Core.dll Service for supervising and monitoring application communication events and connection state. public class SupervisorService Inheritance object SupervisorService Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Events OnConnected Event triggered when a connection is established. public event Func<Task>? OnConnected Event Type Func<Task> OnDisconnected Event triggered when a connection is disconnected. public event Func<Task>? OnDisconnected Event Type Func<Task> OnMessageReceived Event triggered when a message is received. public event Func<string, Task>? OnMessageReceived Event Type Func<string, Task> OnMessageSent Event triggered when a message is sent. public event Func<string, Task>? OnMessageSent Event Type Func<string, Task>"
  },
  "api/Jiro.Core.Services.Supervisor.html": {
    "href": "api/Jiro.Core.Services.Supervisor.html",
    "title": "Namespace Jiro.Core.Services.Supervisor | Jiro Documentation",
    "keywords": "Namespace Jiro.Core.Services.Supervisor Classes SupervisorService Service for supervising and monitoring application communication events and connection state."
  },
  "api/Jiro.Core.Services.System.ConfigProviderService.html": {
    "href": "api/Jiro.Core.Services.System.ConfigProviderService.html",
    "title": "Class ConfigProviderService | Jiro Documentation",
    "keywords": "Class ConfigProviderService Namespace Jiro.Core.Services.System Assembly Jiro.Core.dll Supports all classes in the .NET class hierarchy and provides low-level services to derived classes. This is the ultimate base class of all .NET classes; it is the root of the type hierarchy. public class ConfigProviderService : IConfigProviderService Inheritance object ConfigProviderService Implements IConfigProviderService Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors ConfigProviderService(ILogger<ConfigProviderService>, IConfiguration) Initializes a new instance of the ConfigProviderService class. public ConfigProviderService(ILogger<ConfigProviderService> logger, IConfiguration configuration) Parameters logger ILogger<ConfigProviderService> Logger instance for logging. configuration IConfiguration Configuration instance for accessing system settings. Methods GetConfigAsync() Retrieves current system configuration public Task<ConfigResponse> GetConfigAsync() Returns Task<ConfigResponse> System configuration response UpdateConfigAsync(string) Updates system configuration (read-only implementation for security) public Task<ConfigUpdateResponse> UpdateConfigAsync(string configJson) Parameters configJson string Configuration JSON string Returns Task<ConfigUpdateResponse> Configuration update response"
  },
  "api/Jiro.Core.Services.System.IConfigProviderService.html": {
    "href": "api/Jiro.Core.Services.System.IConfigProviderService.html",
    "title": "Interface IConfigProviderService | Jiro Documentation",
    "keywords": "Interface IConfigProviderService Namespace Jiro.Core.Services.System Assembly Jiro.Core.dll Service for managing system configuration public interface IConfigProviderService Methods GetConfigAsync() Retrieves current system configuration Task<ConfigResponse> GetConfigAsync() Returns Task<ConfigResponse> System configuration response UpdateConfigAsync(string) Updates system configuration (read-only implementation for security) Task<ConfigUpdateResponse> UpdateConfigAsync(string configJson) Parameters configJson string Configuration JSON string Returns Task<ConfigUpdateResponse> Configuration update response"
  },
  "api/Jiro.Core.Services.System.ILogsProviderService.html": {
    "href": "api/Jiro.Core.Services.System.ILogsProviderService.html",
    "title": "Interface ILogsProviderService | Jiro Documentation",
    "keywords": "Interface ILogsProviderService Namespace Jiro.Core.Services.System Assembly Jiro.Core.dll Service for retrieving system logs with pagination and streaming support public interface ILogsProviderService Methods GetLogCountAsync(string?, DateTime?, DateTime?, string?) Gets total count of logs matching the specified criteria Task<int> GetLogCountAsync(string? level = null, DateTime? fromDate = null, DateTime? toDate = null, string? searchTerm = null) Parameters level string Log level filter (optional) fromDate DateTime? Start date filter (optional) toDate DateTime? End date filter (optional) searchTerm string Search term to filter messages (optional) Returns Task<int> Total count of matching log entries GetLogFilesAsync() Gets available log files for selection Task<IEnumerable<LogFileInfo>> GetLogFilesAsync() Returns Task<IEnumerable<LogFileInfo>> List of available log files with metadata GetLogsAsync(string?, int, int, DateTime?, DateTime?, string?) Retrieves logs based on level filter, pagination, and other criteria Task<LogsResponse> GetLogsAsync(string? level = null, int limit = 100, int offset = 0, DateTime? fromDate = null, DateTime? toDate = null, string? searchTerm = null) Parameters level string Log level filter (optional) limit int Maximum number of logs to retrieve per page offset int Number of logs to skip (for pagination) fromDate DateTime? Start date filter (optional) toDate DateTime? End date filter (optional) searchTerm string Search term to filter messages (optional) Returns Task<LogsResponse> Log response containing filtered logs with pagination info StreamLogBatchesAsync(string?, int, int, CancellationToken) Streams logs in batches - first yields the last N logs in batches, then streams new logs in real-time batches IAsyncEnumerable<IEnumerable<LogEntry>> StreamLogBatchesAsync(string? level = null, int initialLimit = 50, int batchSize = 10, CancellationToken cancellationToken = default) Parameters level string Log level filter (optional) initialLimit int Number of recent logs to fetch initially (default 50) batchSize int Size of each batch (default 10) cancellationToken CancellationToken Cancellation token Returns IAsyncEnumerable<IEnumerable<LogEntry>> Async enumerable of log entry batches StreamLogsAsync(string?, int, CancellationToken) Streams logs continuously - first yields the last N logs, then streams new logs in real-time IAsyncEnumerable<LogEntry> StreamLogsAsync(string? level = null, int initialLimit = 50, CancellationToken cancellationToken = default) Parameters level string Log level filter (optional) initialLimit int Number of recent logs to fetch initially (default 50) cancellationToken CancellationToken Cancellation token Returns IAsyncEnumerable<LogEntry> Async enumerable of log entries"
  },
  "api/Jiro.Core.Services.System.IThemeService.html": {
    "href": "api/Jiro.Core.Services.System.IThemeService.html",
    "title": "Interface IThemeService | Jiro Documentation",
    "keywords": "Interface IThemeService Namespace Jiro.Core.Services.System Assembly Jiro.Core.dll Service for managing application themes public interface IThemeService Methods GetCustomThemesAsync() Retrieves available custom themes Task<ThemesResponse> GetCustomThemesAsync() Returns Task<ThemesResponse> Theme response containing available themes"
  },
  "api/Jiro.Core.Services.System.IVersionService.html": {
    "href": "api/Jiro.Core.Services.System.IVersionService.html",
    "title": "Interface IVersionService | Jiro Documentation",
    "keywords": "Interface IVersionService Namespace Jiro.Core.Services.System Assembly Jiro.Core.dll Service for retrieving application version information public interface IVersionService Methods GetVersion() Gets the current application version from assembly metadata string GetVersion() Returns string The application version string"
  },
  "api/Jiro.Core.Services.System.LogFileInfo.html": {
    "href": "api/Jiro.Core.Services.System.LogFileInfo.html",
    "title": "Class LogFileInfo | Jiro Documentation",
    "keywords": "Class LogFileInfo Namespace Jiro.Core.Services.System Assembly Jiro.Core.dll Represents metadata information about a log file in the system. Used for log file discovery, management, and providing file details to clients. public class LogFileInfo Inheritance object LogFileInfo Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties Created Gets or sets the date and time when the log file was created. public DateTime Created { get; set; } Property Value DateTime The creation time as reported by the file system, typically in UTC. Remarks For log files created through log rotation, this represents when the specific file was first created, not when logging started for the application. FileName Gets or sets the name of the log file including extension. public string FileName { get; set; } Property Value string The file name only (e.g., \"app-20241123.log\"), without the full path. Examples \"app-20241123.log\", \"errors.log\", \"debug-20241123.txt\" FilePath Gets or sets the full absolute path to the log file. public string FilePath { get; set; } Property Value string The complete file system path including directory and filename. Examples \"/app/logs/app-20241123.log\", \"C:\\Logs\\errors.log\" LastModified Gets or sets the date and time when the log file was last modified. public DateTime LastModified { get; set; } Property Value DateTime The last write time as reported by the file system, typically in UTC. Remarks For active log files, this timestamp updates each time new log entries are written. Useful for determining which files contain the most recent log data. SizeBytes Gets or sets the size of the log file in bytes. public long SizeBytes { get; set; } Property Value long The file size as reported by the file system. Returns 0 if the file cannot be accessed. Remarks This value represents the current size at the time of metadata collection. For active log files, this size may change as new entries are written."
  },
  "api/Jiro.Core.Services.System.LogsProviderService.html": {
    "href": "api/Jiro.Core.Services.System.LogsProviderService.html",
    "title": "Class LogsProviderService | Jiro Documentation",
    "keywords": "Class LogsProviderService Namespace Jiro.Core.Services.System Assembly Jiro.Core.dll Supports all classes in the .NET class hierarchy and provides low-level services to derived classes. This is the ultimate base class of all .NET classes; it is the root of the type hierarchy. public class LogsProviderService : ILogsProviderService Inheritance object LogsProviderService Implements ILogsProviderService Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors LogsProviderService(ILogger<LogsProviderService>, IConfiguration) Initializes a new instance of the LogsProviderService class. public LogsProviderService(ILogger<LogsProviderService> logger, IConfiguration configuration) Parameters logger ILogger<LogsProviderService> Logger instance for logging. configuration IConfiguration Configuration instance to read Serilog settings. Methods GetLogCountAsync(string?, DateTime?, DateTime?, string?) Gets total count of logs matching the specified criteria public Task<int> GetLogCountAsync(string? level = null, DateTime? fromDate = null, DateTime? toDate = null, string? searchTerm = null) Parameters level string Log level filter (optional) fromDate DateTime? Start date filter (optional) toDate DateTime? End date filter (optional) searchTerm string Search term to filter messages (optional) Returns Task<int> Total count of matching log entries GetLogFilesAsync() Gets available log files for selection public Task<IEnumerable<LogFileInfo>> GetLogFilesAsync() Returns Task<IEnumerable<LogFileInfo>> List of available log files with metadata GetLogsAsync(string?, int, int, DateTime?, DateTime?, string?) Retrieves logs based on level filter, pagination, and other criteria public Task<LogsResponse> GetLogsAsync(string? level = null, int limit = 100, int offset = 0, DateTime? fromDate = null, DateTime? toDate = null, string? searchTerm = null) Parameters level string Log level filter (optional) limit int Maximum number of logs to retrieve per page offset int Number of logs to skip (for pagination) fromDate DateTime? Start date filter (optional) toDate DateTime? End date filter (optional) searchTerm string Search term to filter messages (optional) Returns Task<LogsResponse> Log response containing filtered logs with pagination info StreamLogBatchesAsync(string?, int, int, CancellationToken) Streams logs in batches - first yields the last N logs in batches, then streams new logs in real-time batches public IAsyncEnumerable<IEnumerable<LogEntry>> StreamLogBatchesAsync(string? level = null, int initialLimit = 50, int batchSize = 10, CancellationToken cancellationToken = default) Parameters level string Log level filter (optional) initialLimit int Number of recent logs to fetch initially (default 50) batchSize int Size of each batch (default 10) cancellationToken CancellationToken Cancellation token Returns IAsyncEnumerable<IEnumerable<LogEntry>> Async enumerable of log entry batches StreamLogsAsync(string?, int, CancellationToken) Streams logs continuously - first yields the last N logs, then streams new logs in real-time public IAsyncEnumerable<LogEntry> StreamLogsAsync(string? level = null, int initialLimit = 50, CancellationToken cancellationToken = default) Parameters level string Log level filter (optional) initialLimit int Number of recent logs to fetch initially (default 50) cancellationToken CancellationToken Cancellation token Returns IAsyncEnumerable<LogEntry> Async enumerable of log entries"
  },
  "api/Jiro.Core.Services.System.Models.ColorScheme.html": {
    "href": "api/Jiro.Core.Services.System.Models.ColorScheme.html",
    "title": "Class ColorScheme | Jiro Documentation",
    "keywords": "Class ColorScheme Namespace Jiro.Core.Services.System.Models Assembly Jiro.Core.dll Represents a comprehensive color scheme configuration for theming the application interface. public class ColorScheme Inheritance object ColorScheme Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties Accent Gets or sets the accent color for highlights and special emphasis. public string Accent { get; set; } Property Value string AccentHover Gets or sets the accent hover color for interactive accent elements. public string AccentHover { get; set; } Property Value string AccentLight Gets or sets the light variant of the accent color for subtle emphasis. public string AccentLight { get; set; } Property Value string Background Gets or sets the primary background color for the main application areas. public string Background { get; set; } Property Value string BackgroundElevated Gets or sets the elevated background color for modals, dropdowns, and floating elements. public string BackgroundElevated { get; set; } Property Value string BackgroundSecondary Gets or sets the secondary background color for content areas and sidebars. public string BackgroundSecondary { get; set; } Property Value string BackgroundTertiary Gets or sets the tertiary background color for subtle sections and panels. public string BackgroundTertiary { get; set; } Property Value string Black Gets or sets the black color value. public string Black { get; set; } Property Value string Border Gets or sets the primary border color for form elements and dividers. public string Border { get; set; } Property Value string BorderFocus Gets or sets the border focus color for focused form inputs and interactive elements. public string BorderFocus { get; set; } Property Value string BorderHover Gets or sets the border hover color for interactive elements on hover. public string BorderHover { get; set; } Property Value string BorderSecondary Gets or sets the secondary border color for subtle separators and outlines. public string BorderSecondary { get; set; } Property Value string ButtonDanger Gets or sets the danger button color for destructive actions. public string ButtonDanger { get; set; } Property Value string ButtonDangerActive Gets or sets the danger button active color for destructive action pressed state. public string ButtonDangerActive { get; set; } Property Value string ButtonDangerHover Gets or sets the danger button hover color for destructive action feedback. public string ButtonDangerHover { get; set; } Property Value string ButtonPrimary Gets or sets the primary button color for main action buttons. public string ButtonPrimary { get; set; } Property Value string ButtonPrimaryActive Gets or sets the primary button active color for pressed state. public string ButtonPrimaryActive { get; set; } Property Value string ButtonPrimaryHover Gets or sets the primary button hover color for interactive feedback. public string ButtonPrimaryHover { get; set; } Property Value string ButtonSecondary Gets or sets the secondary button color for alternative actions. public string ButtonSecondary { get; set; } Property Value string ButtonSecondaryActive Gets or sets the secondary button active color for pressed state. public string ButtonSecondaryActive { get; set; } Property Value string ButtonSecondaryHover Gets or sets the secondary button hover color for interactive feedback. public string ButtonSecondaryHover { get; set; } Property Value string ButtonSuccess Gets or sets the success button color for positive actions. public string ButtonSuccess { get; set; } Property Value string ButtonSuccessActive Gets or sets the success button active color for positive action pressed state. public string ButtonSuccessActive { get; set; } Property Value string ButtonSuccessHover Gets or sets the success button hover color for positive action feedback. public string ButtonSuccessHover { get; set; } Property Value string Container Gets or sets the primary container color for main content wrappers. public string Container { get; set; } Property Value string ContainerActive Gets or sets the container active color for selected or pressed containers. public string ContainerActive { get; set; } Property Value string ContainerElevated Gets or sets the elevated container color for raised content sections. public string ContainerElevated { get; set; } Property Value string ContainerHover Gets or sets the container hover color for interactive containers. public string ContainerHover { get; set; } Property Value string ContainerSecondary Gets or sets the secondary container color for nested content areas. public string ContainerSecondary { get; set; } Property Value string Error Gets or sets the error color for negative states and failures. public string Error { get; set; } Property Value string ErrorDark Gets or sets the dark error color for prominent error states. public string ErrorDark { get; set; } Property Value string ErrorLight Gets or sets the light error color for subtle error indicators. public string ErrorLight { get; set; } Property Value string Highlight Gets or sets the highlight color for emphasized content and search results. public string Highlight { get; set; } Property Value string HighlightSecondary Gets or sets the secondary highlight color for alternative emphasis. public string HighlightSecondary { get; set; } Property Value string Info Gets or sets the info color for informational states and messages. public string Info { get; set; } Property Value string InfoDark Gets or sets the dark info color for prominent informational states. public string InfoDark { get; set; } Property Value string InfoLight Gets or sets the light info color for subtle informational indicators. public string InfoLight { get; set; } Property Value string Link Gets or sets the link color for hyperlinks and navigation elements. public string Link { get; set; } Property Value string LinkActive Gets or sets the active link color for currently pressed links. public string LinkActive { get; set; } Property Value string LinkHover Gets or sets the link hover color for interactive link feedback. public string LinkHover { get; set; } Property Value string LinkVisited Gets or sets the visited link color for previously accessed links. public string LinkVisited { get; set; } Property Value string Primary Gets or sets the primary brand color for the application theme. public string Primary { get; set; } Property Value string PrimaryActive Gets or sets the primary brand active color for pressed brand elements. public string PrimaryActive { get; set; } Property Value string PrimaryDark Gets or sets the dark variant of the primary brand color. public string PrimaryDark { get; set; } Property Value string PrimaryHover Gets or sets the primary brand hover color for interactive brand elements. public string PrimaryHover { get; set; } Property Value string PrimaryLight Gets or sets the light variant of the primary brand color. public string PrimaryLight { get; set; } Property Value string Secondary Gets or sets the secondary brand color for complementary design elements. public string Secondary { get; set; } Property Value string SecondaryActive Gets or sets the secondary brand active color for pressed elements. public string SecondaryActive { get; set; } Property Value string SecondaryDark Gets or sets the dark variant of the secondary brand color. public string SecondaryDark { get; set; } Property Value string SecondaryHover Gets or sets the secondary brand hover color for interactive elements. public string SecondaryHover { get; set; } Property Value string SecondaryLight Gets or sets the light variant of the secondary brand color. public string SecondaryLight { get; set; } Property Value string Selection Gets or sets the selection color for selected items and text. public string Selection { get; set; } Property Value string SelectionHover Gets or sets the selection hover color for hovering over selectable items. public string SelectionHover { get; set; } Property Value string Success Gets or sets the success color for positive states and confirmations. public string Success { get; set; } Property Value string SuccessDark Gets or sets the dark success color for prominent positive states. public string SuccessDark { get; set; } Property Value string SuccessLight Gets or sets the light success color for subtle positive indicators. public string SuccessLight { get; set; } Property Value string Surface Gets or sets the primary surface color for cards and content containers. public string Surface { get; set; } Property Value string SurfaceElevated Gets or sets the elevated surface color for tooltips and overlays. public string SurfaceElevated { get; set; } Property Value string SurfaceHover Gets or sets the surface hover color for interactive surface elements. public string SurfaceHover { get; set; } Property Value string SurfaceSecondary Gets or sets the secondary surface color for nested elements and sub-containers. public string SurfaceSecondary { get; set; } Property Value string TextDisabled Gets or sets the disabled text color for inactive or unavailable content. public string TextDisabled { get; set; } Property Value string TextInverse Gets or sets the inverse text color for text on dark backgrounds. public string TextInverse { get; set; } Property Value string TextMuted Gets or sets the muted text color for placeholders and helper text. public string TextMuted { get; set; } Property Value string TextPrimary Gets or sets the primary text color for main content and headings. public string TextPrimary { get; set; } Property Value string TextSecondary Gets or sets the secondary text color for supporting content and descriptions. public string TextSecondary { get; set; } Property Value string TextTertiary Gets or sets the tertiary text color for subtle hints and metadata. public string TextTertiary { get; set; } Property Value string Transparent Gets or sets the transparent color value. public string Transparent { get; set; } Property Value string Warning Gets or sets the warning color for cautionary states and alerts. public string Warning { get; set; } Property Value string WarningDark Gets or sets the dark warning color for prominent warning states. public string WarningDark { get; set; } Property Value string WarningLight Gets or sets the light warning color for subtle cautionary indicators. public string WarningLight { get; set; } Property Value string White Gets or sets the white color value. public string White { get; set; } Property Value string"
  },
  "api/Jiro.Core.Services.System.Models.LogEntry.html": {
    "href": "api/Jiro.Core.Services.System.Models.LogEntry.html",
    "title": "Class LogEntry | Jiro Documentation",
    "keywords": "Class LogEntry Namespace Jiro.Core.Services.System.Models Assembly Jiro.Core.dll Represents a single log entry for internal processing public class LogEntry Inheritance object LogEntry Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties File Gets or sets the file name where the log entry originated. public string File { get; set; } Property Value string Level Gets or sets the log level (e.g., Debug, Info, Warning, Error). public string Level { get; set; } Property Value string Message Gets or sets the log message content. public string Message { get; set; } Property Value string Timestamp Gets or sets the timestamp when the log entry was created. public string Timestamp { get; set; } Property Value string"
  },
  "api/Jiro.Core.Services.System.Models.LogsResponse.html": {
    "href": "api/Jiro.Core.Services.System.Models.LogsResponse.html",
    "title": "Class LogsResponse | Jiro Documentation",
    "keywords": "Class LogsResponse Namespace Jiro.Core.Services.System.Models Assembly Jiro.Core.dll Response object for log queries with pagination support public class LogsResponse Inheritance object LogsResponse Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties HasMore Gets or sets a value indicating whether there are more log entries available beyond the current page. public bool HasMore { get; set; } Property Value bool Level Gets or sets the log level filter that was applied to the query. public string Level { get; set; } Property Value string Limit Gets or sets the maximum number of log entries to return. public int Limit { get; set; } Property Value int Logs Gets or sets the collection of log entries returned by the query. public List<LogEntry> Logs { get; set; } Property Value List<LogEntry> Offset Gets or sets the number of log entries to skip from the beginning. public int Offset { get; set; } Property Value int RequestId Gets or sets the unique identifier for this log query request. public string RequestId { get; set; } Property Value string TotalLogs Gets or sets the total number of log entries available. public int TotalLogs { get; set; } Property Value int"
  },
  "api/Jiro.Core.Services.System.Models.html": {
    "href": "api/Jiro.Core.Services.System.Models.html",
    "title": "Namespace Jiro.Core.Services.System.Models | Jiro Documentation",
    "keywords": "Namespace Jiro.Core.Services.System.Models Classes ColorScheme Represents a comprehensive color scheme configuration for theming the application interface. LogEntry Represents a single log entry for internal processing LogsResponse Response object for log queries with pagination support"
  },
  "api/Jiro.Core.Services.System.ThemeService.html": {
    "href": "api/Jiro.Core.Services.System.ThemeService.html",
    "title": "Class ThemeService | Jiro Documentation",
    "keywords": "Class ThemeService Namespace Jiro.Core.Services.System Assembly Jiro.Core.dll Supports all classes in the .NET class hierarchy and provides low-level services to derived classes. This is the ultimate base class of all .NET classes; it is the root of the type hierarchy. public class ThemeService : IThemeService Inheritance object ThemeService Implements IThemeService Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors ThemeService(ILogger<ThemeService>, IHostEnvironment, IOptions<DataPathsOptions>) Initializes a new instance of the ThemeService class. public ThemeService(ILogger<ThemeService> logger, IHostEnvironment hostEnvironment, IOptions<DataPathsOptions> dataPathsOptions) Parameters logger ILogger<ThemeService> Logger instance for logging. hostEnvironment IHostEnvironment Host environment to get content root path. dataPathsOptions IOptions<DataPathsOptions> Data paths configuration options. Methods GetCustomThemesAsync() Retrieves available custom themes public Task<ThemesResponse> GetCustomThemesAsync() Returns Task<ThemesResponse> Theme response containing available themes"
  },
  "api/Jiro.Core.Services.System.VersionService.html": {
    "href": "api/Jiro.Core.Services.System.VersionService.html",
    "title": "Class VersionService | Jiro Documentation",
    "keywords": "Class VersionService Namespace Jiro.Core.Services.System Assembly Jiro.Core.dll Service for retrieving application version information from assembly metadata public class VersionService : IVersionService Inheritance object VersionService Implements IVersionService Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors VersionService() public VersionService() Methods GetVersion() Gets the current application version from assembly metadata public string GetVersion() Returns string The application version string"
  },
  "api/Jiro.Core.Services.System.html": {
    "href": "api/Jiro.Core.Services.System.html",
    "title": "Namespace Jiro.Core.Services.System | Jiro Documentation",
    "keywords": "Namespace Jiro.Core.Services.System Classes ConfigProviderService Supports all classes in the .NET class hierarchy and provides low-level services to derived classes. This is the ultimate base class of all .NET classes; it is the root of the type hierarchy. LogFileInfo Represents metadata information about a log file in the system. Used for log file discovery, management, and providing file details to clients. LogsProviderService Supports all classes in the .NET class hierarchy and provides low-level services to derived classes. This is the ultimate base class of all .NET classes; it is the root of the type hierarchy. ThemeService Supports all classes in the .NET class hierarchy and provides low-level services to derived classes. This is the ultimate base class of all .NET classes; it is the root of the type hierarchy. VersionService Service for retrieving application version information from assembly metadata Interfaces IConfigProviderService Service for managing system configuration ILogsProviderService Service for retrieving system logs with pagination and streaming support IThemeService Service for managing application themes IVersionService Service for retrieving application version information"
  },
  "api/Jiro.Core.Services.Weather.IWeatherService.html": {
    "href": "api/Jiro.Core.Services.Weather.IWeatherService.html",
    "title": "Interface IWeatherService | Jiro Documentation",
    "keywords": "Interface IWeatherService Namespace Jiro.Core.Services.Weather Assembly Jiro.Core.dll Defines the contract for weather-related services that provide weather information for specified locations. public interface IWeatherService Methods GetWeatherAsync(string) Retrieves detailed weather information for the specified city. Task<WeatherResponse?> GetWeatherAsync(string city) Parameters city string The name of the city to get weather information for. Returns Task<WeatherResponse> A task that represents the asynchronous operation. The task result contains the weather response or null if not found. GetWeatherStringAsync(string) Retrieves weather information as a formatted string for the specified city. Task<string?> GetWeatherStringAsync(string city) Parameters city string The name of the city to get weather information for. Returns Task<string> A task that represents the asynchronous operation. The task result contains the weather information as a string or null if not found."
  },
  "api/Jiro.Core.Services.Weather.Models.CurrentWeather.html": {
    "href": "api/Jiro.Core.Services.Weather.Models.CurrentWeather.html",
    "title": "Class CurrentWeather | Jiro Documentation",
    "keywords": "Class CurrentWeather Namespace Jiro.Core.Services.Weather.Models Assembly Jiro.Core.dll Represents the current weather conditions at a specific location. public class CurrentWeather Inheritance object CurrentWeather Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties Temperature Gets or sets the current temperature. [JsonPropertyName(\"temperature\")] public double? Temperature { get; set; } Property Value double? Time Gets or sets the timestamp of the current weather reading. [JsonPropertyName(\"time\")] public string? Time { get; set; } Property Value string Weathercode Gets or sets the weather condition code. [JsonPropertyName(\"weathercode\")] public int? Weathercode { get; set; } Property Value int? Winddirection Gets or sets the current wind direction in degrees. [JsonPropertyName(\"winddirection\")] public double? Winddirection { get; set; } Property Value double? Windspeed Gets or sets the current wind speed. [JsonPropertyName(\"windspeed\")] public double? Windspeed { get; set; } Property Value double?"
  },
  "api/Jiro.Core.Services.Weather.Models.GeoLocationResponse.html": {
    "href": "api/Jiro.Core.Services.Weather.Models.GeoLocationResponse.html",
    "title": "Class GeoLocationResponse | Jiro Documentation",
    "keywords": "Class GeoLocationResponse Namespace Jiro.Core.Services.Weather.Models Assembly Jiro.Core.dll Represents a geolocation response containing coordinate and address information for a specific location. public class GeoLocationResponse Inheritance object GeoLocationResponse Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties Boundingbox Gets or sets the bounding box coordinates for the location. [JsonPropertyName(\"boundingbox\")] public List<string>? Boundingbox { get; set; } Property Value List<string> Class Gets or sets the classification category of the location. [JsonPropertyName(\"class\")] public string? Class { get; set; } Property Value string DisplayName Gets or sets the human-readable display name of the location. [JsonPropertyName(\"display_name\")] public string? DisplayName { get; set; } Property Value string Icon Gets or sets the URL to an icon representing the location type. [JsonPropertyName(\"icon\")] public string? Icon { get; set; } Property Value string Importance Gets or sets the importance score of the location (higher values indicate more important places). [JsonPropertyName(\"importance\")] public double Importance { get; set; } Property Value double Lat Gets or sets the latitude coordinate as a string. [JsonPropertyName(\"lat\")] public string? Lat { get; set; } Property Value string Licence Gets or sets the license information for the data source. [JsonPropertyName(\"licence\")] public string? Licence { get; set; } Property Value string Lon Gets or sets the longitude coordinate as a string. [JsonPropertyName(\"lon\")] public string? Lon { get; set; } Property Value string OsmId Gets or sets the OpenStreetMap identifier. [JsonPropertyName(\"osm_id\")] public long OsmId { get; set; } Property Value long OsmType Gets or sets the OpenStreetMap type (node, way, relation). [JsonPropertyName(\"osm_type\")] public string? OsmType { get; set; } Property Value string PlaceId Gets or sets the unique place identifier. [JsonPropertyName(\"place_id\")] public int PlaceId { get; set; } Property Value int Type Gets or sets the specific type of the location within its class. [JsonPropertyName(\"type\")] public string? Type { get; set; } Property Value string"
  },
  "api/Jiro.Core.Services.Weather.Models.GeoLocationResponseRoot.html": {
    "href": "api/Jiro.Core.Services.Weather.Models.GeoLocationResponseRoot.html",
    "title": "Class GeoLocationResponseRoot | Jiro Documentation",
    "keywords": "Class GeoLocationResponseRoot Namespace Jiro.Core.Services.Weather.Models Assembly Jiro.Core.dll Represents the root response container for geolocation API responses containing multiple location results. public class GeoLocationResponseRoot Inheritance object GeoLocationResponseRoot Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties GeoLocationResponses Gets or sets the list of geolocation responses. public List<GeoLocationResponse>? GeoLocationResponses { get; set; } Property Value List<GeoLocationResponse>"
  },
  "api/Jiro.Core.Services.Weather.Models.Hourly.html": {
    "href": "api/Jiro.Core.Services.Weather.Models.Hourly.html",
    "title": "Class Hourly | Jiro Documentation",
    "keywords": "Class Hourly Namespace Jiro.Core.Services.Weather.Models Assembly Jiro.Core.dll Represents hourly weather forecast data including temperature, precipitation, and atmospheric conditions. public class Hourly Inheritance object Hourly Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties Rain Gets or sets the list of hourly rainfall amounts. [JsonPropertyName(\"rain\")] public List<double?>? Rain { get; set; } Property Value List<double?> SurfacePressure Gets or sets the list of hourly surface pressure readings. [JsonPropertyName(\"surface_pressure\")] public List<double?>? SurfacePressure { get; set; } Property Value List<double?> Temperature2m Gets or sets the list of hourly temperatures at 2 meters above ground. [JsonPropertyName(\"temperature_2m\")] public List<double?>? Temperature2m { get; set; } Property Value List<double?> Time Gets or sets the list of hourly timestamps. [JsonPropertyName(\"time\")] public List<string>? Time { get; set; } Property Value List<string> Windspeed10m Gets or sets the list of hourly wind speeds at 10 meters above ground. [JsonPropertyName(\"windspeed_10m\")] public List<double?>? Windspeed10m { get; set; } Property Value List<double?>"
  },
  "api/Jiro.Core.Services.Weather.Models.HourlyUnits.html": {
    "href": "api/Jiro.Core.Services.Weather.Models.HourlyUnits.html",
    "title": "Class HourlyUnits | Jiro Documentation",
    "keywords": "Class HourlyUnits Namespace Jiro.Core.Services.Weather.Models Assembly Jiro.Core.dll Represents the units of measurement for hourly weather data. public class HourlyUnits Inheritance object HourlyUnits Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties Rain Gets or sets the unit for rainfall measurements. [JsonPropertyName(\"rain\")] public string? Rain { get; set; } Property Value string SurfacePressure Gets or sets the unit for surface pressure measurements. [JsonPropertyName(\"surface_pressure\")] public string? SurfacePressure { get; set; } Property Value string Temperature2m Gets or sets the unit for temperature measurements. [JsonPropertyName(\"temperature_2m\")] public string? Temperature2m { get; set; } Property Value string Time Gets or sets the unit for time values. [JsonPropertyName(\"time\")] public string? Time { get; set; } Property Value string Windspeed10m Gets or sets the unit for wind speed measurements. [JsonPropertyName(\"windspeed_10m\")] public string? Windspeed10m { get; set; } Property Value string"
  },
  "api/Jiro.Core.Services.Weather.Models.WeatherGraphData.html": {
    "href": "api/Jiro.Core.Services.Weather.Models.WeatherGraphData.html",
    "title": "Class WeatherGraphData | Jiro Documentation",
    "keywords": "Class WeatherGraphData Namespace Jiro.Core.Services.Weather.Models Assembly Jiro.Core.dll public class WeatherGraphData Inheritance object WeatherGraphData Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties Date public string Date { get; set; } Property Value string Rain public double? Rain { get; set; } Property Value double? Temperature public double? Temperature { get; set; } Property Value double? WindSpeed public double? WindSpeed { get; set; } Property Value double?"
  },
  "api/Jiro.Core.Services.Weather.Models.WeatherResponse.html": {
    "href": "api/Jiro.Core.Services.Weather.Models.WeatherResponse.html",
    "title": "Class WeatherResponse | Jiro Documentation",
    "keywords": "Class WeatherResponse Namespace Jiro.Core.Services.Weather.Models Assembly Jiro.Core.dll Represents the complete weather response from the weather API containing current conditions and hourly forecasts. public class WeatherResponse Inheritance object WeatherResponse Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties CurrentWeather Gets or sets the current weather conditions. [JsonPropertyName(\"current_weather\")] public CurrentWeather? CurrentWeather { get; set; } Property Value CurrentWeather Elevation Gets or sets the elevation above sea level in meters. [JsonPropertyName(\"elevation\")] public double? Elevation { get; set; } Property Value double? GenerationtimeMs Gets or sets the time taken to generate the response in milliseconds. [JsonPropertyName(\"generationtime_ms\")] public double? GenerationtimeMs { get; set; } Property Value double? Hourly Gets or sets the hourly weather forecast data. [JsonPropertyName(\"hourly\")] public Hourly? Hourly { get; set; } Property Value Hourly HourlyUnits Gets or sets the units of measurement for hourly data. [JsonPropertyName(\"hourly_units\")] public HourlyUnits? HourlyUnits { get; set; } Property Value HourlyUnits Latitude Gets or sets the latitude coordinate of the location. [JsonPropertyName(\"latitude\")] public double? Latitude { get; set; } Property Value double? Longitude Gets or sets the longitude coordinate of the location. [JsonPropertyName(\"longitude\")] public double? Longitude { get; set; } Property Value double? Timezone Gets or sets the timezone identifier for the location. [JsonPropertyName(\"timezone\")] public string? Timezone { get; set; } Property Value string TimezoneAbbreviation Gets or sets the timezone abbreviation for the location. [JsonPropertyName(\"timezone_abbreviation\")] public string? TimezoneAbbreviation { get; set; } Property Value string UtcOffsetSeconds Gets or sets the UTC offset in seconds for the location's timezone. [JsonPropertyName(\"utc_offset_seconds\")] public int? UtcOffsetSeconds { get; set; } Property Value int?"
  },
  "api/Jiro.Core.Services.Weather.Models.html": {
    "href": "api/Jiro.Core.Services.Weather.Models.html",
    "title": "Namespace Jiro.Core.Services.Weather.Models | Jiro Documentation",
    "keywords": "Namespace Jiro.Core.Services.Weather.Models Classes CurrentWeather Represents the current weather conditions at a specific location. GeoLocationResponse Represents a geolocation response containing coordinate and address information for a specific location. GeoLocationResponseRoot Represents the root response container for geolocation API responses containing multiple location results. Hourly Represents hourly weather forecast data including temperature, precipitation, and atmospheric conditions. HourlyUnits Represents the units of measurement for hourly weather data. WeatherGraphData WeatherResponse Represents the complete weather response from the weather API containing current conditions and hourly forecasts."
  },
  "api/Jiro.Core.Services.Weather.WeatherService.html": {
    "href": "api/Jiro.Core.Services.Weather.WeatherService.html",
    "title": "Class WeatherService | Jiro Documentation",
    "keywords": "Class WeatherService Namespace Jiro.Core.Services.Weather Assembly Jiro.Core.dll Provides weather information services by integrating with external weather APIs and geolocation services. public class WeatherService : IWeatherService Inheritance object WeatherService Implements IWeatherService Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors WeatherService(IHttpClientFactory, IGeolocationService) Initializes a new instance of the WeatherService class. public WeatherService(IHttpClientFactory clientFactory, IGeolocationService geolocationService) Parameters clientFactory IHttpClientFactory The HTTP client factory for creating weather API clients. geolocationService IGeolocationService The geolocation service for converting city names to coordinates. Methods GetWeatherAsync(string) Retrieves structured weather information for the specified city. public Task<WeatherResponse?> GetWeatherAsync(string city) Parameters city string The name of the city to get weather information for. Returns Task<WeatherResponse> A task that represents the asynchronous operation. The task result contains the deserialized weather response or null if not found. GetWeatherStringAsync(string) Retrieves weather information as a JSON string for the specified city. public Task<string?> GetWeatherStringAsync(string city) Parameters city string The name of the city to get weather information for. Returns Task<string> A task that represents the asynchronous operation. The task result contains the weather information as a JSON string or null if not found. Exceptions JiroException Thrown when the city cannot be found or weather data is unavailable."
  },
  "api/Jiro.Core.Services.Weather.html": {
    "href": "api/Jiro.Core.Services.Weather.html",
    "title": "Namespace Jiro.Core.Services.Weather | Jiro Documentation",
    "keywords": "Namespace Jiro.Core.Services.Weather Classes WeatherService Provides weather information services by integrating with external weather APIs and geolocation services. Interfaces IWeatherService Defines the contract for weather-related services that provide weather information for specified locations."
  },
  "api/Jiro.Core.TokenException.html": {
    "href": "api/Jiro.Core.TokenException.html",
    "title": "Class TokenException | Jiro Documentation",
    "keywords": "Class TokenException Namespace Jiro.Core Assembly Jiro.Core.dll Represents an exception that occurs during token processing or authentication operations. public class TokenException : Exception Inheritance object Exception TokenException Inherited Members Exception.GetBaseException() Exception.GetType() Exception.ToString() Exception.Data Exception.HelpLink Exception.HResult Exception.InnerException Exception.Message Exception.Source Exception.StackTrace Exception.TargetSite Exception.SerializeObjectState object.Equals(object) object.Equals(object, object) object.GetHashCode() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors TokenException(string) Initializes a new instance of the TokenException class with the specified error message. public TokenException(string exceptionMessage) Parameters exceptionMessage string The message that describes the error."
  },
  "api/Jiro.Core.Utils.AppUtils.html": {
    "href": "api/Jiro.Core.Utils.AppUtils.html",
    "title": "Class AppUtils | Jiro Documentation",
    "keywords": "Class AppUtils Namespace Jiro.Core.Utils Assembly Jiro.Core.dll public static class AppUtils Inheritance object AppUtils Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods IsDebug() public static bool IsDebug() Returns bool"
  },
  "api/Jiro.Core.Utils.Tokenizer.html": {
    "href": "api/Jiro.Core.Utils.Tokenizer.html",
    "title": "Class Tokenizer | Jiro Documentation",
    "keywords": "Class Tokenizer Namespace Jiro.Core.Utils Assembly Jiro.Core.dll Provides utilities for counting tokens in text strings using the TikToken library. public class Tokenizer Inheritance object Tokenizer Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods CountTokensAsync(string) Counts the number of tokens in the specified input string using the GPT-4o mini model tokenizer. public static Task<int> CountTokensAsync(string input) Parameters input string The text string to count tokens for. Returns Task<int> A task that represents the asynchronous operation. The task result contains the number of tokens in the input string."
  },
  "api/Jiro.Core.Utils.html": {
    "href": "api/Jiro.Core.Utils.html",
    "title": "Namespace Jiro.Core.Utils | Jiro Documentation",
    "keywords": "Namespace Jiro.Core.Utils Classes AppUtils Tokenizer Provides utilities for counting tokens in text strings using the TikToken library."
  },
  "api/Jiro.Core.html": {
    "href": "api/Jiro.Core.html",
    "title": "Namespace Jiro.Core | Jiro Documentation",
    "keywords": "Namespace Jiro.Core Classes JiroException Represents an exception specific to the Jiro application domain with user-friendly messages and detailed error information. TokenException Represents an exception that occurs during token processing or authentication operations."
  },
  "api/Jiro.Infrastructure.Extensions.html": {
    "href": "api/Jiro.Infrastructure.Extensions.html",
    "title": "Class Extensions | Jiro Documentation",
    "keywords": "Class Extensions Namespace Jiro.Infrastructure Assembly Jiro.Infrastructure.dll Provides extension methods for configuring database contexts with different database providers. public static class Extensions Inheritance object Extensions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods AddJiroMySQLContext(IServiceCollection, string) Adds and configures the Jiro database context to use MySQL as the database provider. public static IServiceCollection AddJiroMySQLContext(this IServiceCollection services, string conn) Parameters services IServiceCollection The service collection to add the database context to. conn string The MySQL connection string. Returns IServiceCollection The service collection with the configured MySQL database context. AddJiroSQLiteContext(IServiceCollection, string) Adds and configures the Jiro database context to use SQLite as the database provider. public static IServiceCollection AddJiroSQLiteContext(this IServiceCollection services, string conn) Parameters services IServiceCollection The service collection to add the database context to. conn string The SQLite database file path. Returns IServiceCollection The service collection with the configured SQLite database context."
  },
  "api/Jiro.Infrastructure.JiroContext.html": {
    "href": "api/Jiro.Infrastructure.JiroContext.html",
    "title": "Class JiroContext | Jiro Documentation",
    "keywords": "Class JiroContext Namespace Jiro.Infrastructure Assembly Jiro.Infrastructure.dll Entity Framework database context for the Jiro application, extending IdentityDbContext for user authentication and providing access to chat sessions, messages, and refresh tokens. public class JiroContext : IdentityDbContext<AppUser, AppRole, string, IdentityUserClaim<string>, AppUserRole, IdentityUserLogin<string>, IdentityRoleClaim<string>, IdentityUserToken<string>>, IDisposable, IAsyncDisposable Inheritance object DbContext IdentityUserContext<AppUser, string, IdentityUserClaim<string>, IdentityUserLogin<string>, IdentityUserToken<string>> IdentityDbContext<AppUser, AppRole, string, IdentityUserClaim<string>, AppUserRole, IdentityUserLogin<string>, IdentityRoleClaim<string>, IdentityUserToken<string>> JiroContext Implements IDisposable IAsyncDisposable Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors JiroContext() Initializes a new instance of the JiroContext class with default configuration. public JiroContext() JiroContext(DbContextOptions<JiroContext>) Initializes a new instance of the JiroContext class with the specified options. public JiroContext(DbContextOptions<JiroContext> options) Parameters options DbContextOptions<JiroContext> The database context options for configuring the context. Properties ChatSessions Gets or sets the database set for chat sessions in the application. public DbSet<ChatSession> ChatSessions { get; set; } Property Value DbSet<ChatSession> Messages Gets or sets the database set for messages exchanged in chat sessions. public DbSet<Message> Messages { get; set; } Property Value DbSet<Message> RefreshTokens Gets or sets the database set for refresh tokens used in authentication. public DbSet<RefreshToken> RefreshTokens { get; set; } Property Value DbSet<RefreshToken> Methods OnConfiguring(DbContextOptionsBuilder) Configures the database context options if not already configured through dependency injection. protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder) Parameters optionsBuilder DbContextOptionsBuilder The options builder used to configure the context. OnModelCreating(ModelBuilder) Configures the entity relationships and database model for the Jiro application, including user-role relationships for Identity framework. protected override void OnModelCreating(ModelBuilder builder) Parameters builder ModelBuilder The model builder used to configure entity relationships."
  },
  "api/Jiro.Infrastructure.Migrations.ChatSessions.html": {
    "href": "api/Jiro.Infrastructure.Migrations.ChatSessions.html",
    "title": "Class ChatSessions | Jiro Documentation",
    "keywords": "Class ChatSessions Namespace Jiro.Infrastructure.Migrations Assembly Jiro.Infrastructure.dll A base class inherited by each EF Core migration. [DbContext(typeof(JiroContext))] [Migration(\"20240817164704_ChatSessions\")] public class ChatSessions : Migration Inheritance object Migration ChatSessions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Remarks See Database migrations for more information and examples. Methods BuildTargetModel(ModelBuilder) Implemented to build the TargetModel. protected override void BuildTargetModel(ModelBuilder modelBuilder) Parameters modelBuilder ModelBuilder The ModelBuilder to use to build the model. Remarks See Database migrations for more information and examples. Down(MigrationBuilder) Builds the operations that will migrate the database 'down'. protected override void Down(MigrationBuilder migrationBuilder) Parameters migrationBuilder MigrationBuilder The MigrationBuilder that will build the operations. Remarks That is, builds the operations that will take the database from the state left in by this migration so that it returns to the state that it was in before this migration was applied. This method must be overridden in each class that inherits from Migration if both 'up' and 'down' migrations are to be supported. If it is not overridden, then calling it will throw and it will not be possible to migrate in the 'down' direction. See Database migrations for more information and examples. Up(MigrationBuilder) Builds the operations that will migrate the database 'up'. protected override void Up(MigrationBuilder migrationBuilder) Parameters migrationBuilder MigrationBuilder The MigrationBuilder that will build the operations. Remarks That is, builds the operations that will take the database from the state left in by the previous migration so that it is up-to-date with regard to this migration. This method must be overridden in each class that inherits from Migration. See Database migrations for more information and examples."
  },
  "api/Jiro.Infrastructure.Migrations.ChatSessions_Clear.html": {
    "href": "api/Jiro.Infrastructure.Migrations.ChatSessions_Clear.html",
    "title": "Class ChatSessions_Clear | Jiro Documentation",
    "keywords": "Class ChatSessions_Clear Namespace Jiro.Infrastructure.Migrations Assembly Jiro.Infrastructure.dll A base class inherited by each EF Core migration. [DbContext(typeof(JiroContext))] [Migration(\"20240817165129_ChatSessions_Clear\")] public class ChatSessions_Clear : Migration Inheritance object Migration ChatSessions_Clear Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Remarks See Database migrations for more information and examples. Methods BuildTargetModel(ModelBuilder) Implemented to build the TargetModel. protected override void BuildTargetModel(ModelBuilder modelBuilder) Parameters modelBuilder ModelBuilder The ModelBuilder to use to build the model. Remarks See Database migrations for more information and examples. Down(MigrationBuilder) Builds the operations that will migrate the database 'down'. protected override void Down(MigrationBuilder migrationBuilder) Parameters migrationBuilder MigrationBuilder The MigrationBuilder that will build the operations. Remarks That is, builds the operations that will take the database from the state left in by this migration so that it returns to the state that it was in before this migration was applied. This method must be overridden in each class that inherits from Migration if both 'up' and 'down' migrations are to be supported. If it is not overridden, then calling it will throw and it will not be possible to migrate in the 'down' direction. See Database migrations for more information and examples. Up(MigrationBuilder) Builds the operations that will migrate the database 'up'. protected override void Up(MigrationBuilder migrationBuilder) Parameters migrationBuilder MigrationBuilder The MigrationBuilder that will build the operations. Remarks That is, builds the operations that will take the database from the state left in by the previous migration so that it is up-to-date with regard to this migration. This method must be overridden in each class that inherits from Migration. See Database migrations for more information and examples."
  },
  "api/Jiro.Infrastructure.Migrations.ConfigureChatSessionMessageRelationship.html": {
    "href": "api/Jiro.Infrastructure.Migrations.ConfigureChatSessionMessageRelationship.html",
    "title": "Class ConfigureChatSessionMessageRelationship | Jiro Documentation",
    "keywords": "Class ConfigureChatSessionMessageRelationship Namespace Jiro.Infrastructure.Migrations Assembly Jiro.Infrastructure.dll A base class inherited by each EF Core migration. [DbContext(typeof(JiroContext))] [Migration(\"20250713071537_ConfigureChatSessionMessageRelationship\")] public class ConfigureChatSessionMessageRelationship : Migration Inheritance object Migration ConfigureChatSessionMessageRelationship Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Remarks See Database migrations for more information and examples. Methods BuildTargetModel(ModelBuilder) Implemented to build the TargetModel. protected override void BuildTargetModel(ModelBuilder modelBuilder) Parameters modelBuilder ModelBuilder The ModelBuilder to use to build the model. Remarks See Database migrations for more information and examples. Down(MigrationBuilder) Builds the operations that will migrate the database 'down'. protected override void Down(MigrationBuilder migrationBuilder) Parameters migrationBuilder MigrationBuilder The MigrationBuilder that will build the operations. Remarks That is, builds the operations that will take the database from the state left in by this migration so that it returns to the state that it was in before this migration was applied. This method must be overridden in each class that inherits from Migration if both 'up' and 'down' migrations are to be supported. If it is not overridden, then calling it will throw and it will not be possible to migrate in the 'down' direction. See Database migrations for more information and examples. Up(MigrationBuilder) Builds the operations that will migrate the database 'up'. protected override void Up(MigrationBuilder migrationBuilder) Parameters migrationBuilder MigrationBuilder The MigrationBuilder that will build the operations. Remarks That is, builds the operations that will take the database from the state left in by the previous migration so that it is up-to-date with regard to this migration. This method must be overridden in each class that inherits from Migration. See Database migrations for more information and examples."
  },
  "api/Jiro.Infrastructure.Migrations.html": {
    "href": "api/Jiro.Infrastructure.Migrations.html",
    "title": "Namespace Jiro.Infrastructure.Migrations | Jiro Documentation",
    "keywords": "Namespace Jiro.Infrastructure.Migrations Classes ChatSessions A base class inherited by each EF Core migration. ChatSessions_Clear A base class inherited by each EF Core migration. ConfigureChatSessionMessageRelationship A base class inherited by each EF Core migration. init A base class inherited by each EF Core migration. refresh_token A base class inherited by each EF Core migration. session_adjustments A base class inherited by each EF Core migration."
  },
  "api/Jiro.Infrastructure.Migrations.init.html": {
    "href": "api/Jiro.Infrastructure.Migrations.init.html",
    "title": "Class init | Jiro Documentation",
    "keywords": "Class init Namespace Jiro.Infrastructure.Migrations Assembly Jiro.Infrastructure.dll A base class inherited by each EF Core migration. [DbContext(typeof(JiroContext))] [Migration(\"20230708005421_init\")] public class init : Migration Inheritance object Migration init Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Remarks See Database migrations for more information and examples. Methods BuildTargetModel(ModelBuilder) Implemented to build the TargetModel. protected override void BuildTargetModel(ModelBuilder modelBuilder) Parameters modelBuilder ModelBuilder The ModelBuilder to use to build the model. Remarks See Database migrations for more information and examples. Down(MigrationBuilder) Builds the operations that will migrate the database 'down'. protected override void Down(MigrationBuilder migrationBuilder) Parameters migrationBuilder MigrationBuilder The MigrationBuilder that will build the operations. Remarks That is, builds the operations that will take the database from the state left in by this migration so that it returns to the state that it was in before this migration was applied. This method must be overridden in each class that inherits from Migration if both 'up' and 'down' migrations are to be supported. If it is not overridden, then calling it will throw and it will not be possible to migrate in the 'down' direction. See Database migrations for more information and examples. Up(MigrationBuilder) Builds the operations that will migrate the database 'up'. protected override void Up(MigrationBuilder migrationBuilder) Parameters migrationBuilder MigrationBuilder The MigrationBuilder that will build the operations. Remarks That is, builds the operations that will take the database from the state left in by the previous migration so that it is up-to-date with regard to this migration. This method must be overridden in each class that inherits from Migration. See Database migrations for more information and examples."
  },
  "api/Jiro.Infrastructure.Migrations.refresh_token.html": {
    "href": "api/Jiro.Infrastructure.Migrations.refresh_token.html",
    "title": "Class refresh_token | Jiro Documentation",
    "keywords": "Class refresh_token Namespace Jiro.Infrastructure.Migrations Assembly Jiro.Infrastructure.dll A base class inherited by each EF Core migration. [DbContext(typeof(JiroContext))] [Migration(\"20250613175025_refresh_token\")] public class refresh_token : Migration Inheritance object Migration refresh_token Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Remarks See Database migrations for more information and examples. Methods BuildTargetModel(ModelBuilder) Implemented to build the TargetModel. protected override void BuildTargetModel(ModelBuilder modelBuilder) Parameters modelBuilder ModelBuilder The ModelBuilder to use to build the model. Remarks See Database migrations for more information and examples. Down(MigrationBuilder) Builds the operations that will migrate the database 'down'. protected override void Down(MigrationBuilder migrationBuilder) Parameters migrationBuilder MigrationBuilder The MigrationBuilder that will build the operations. Remarks That is, builds the operations that will take the database from the state left in by this migration so that it returns to the state that it was in before this migration was applied. This method must be overridden in each class that inherits from Migration if both 'up' and 'down' migrations are to be supported. If it is not overridden, then calling it will throw and it will not be possible to migrate in the 'down' direction. See Database migrations for more information and examples. Up(MigrationBuilder) Builds the operations that will migrate the database 'up'. protected override void Up(MigrationBuilder migrationBuilder) Parameters migrationBuilder MigrationBuilder The MigrationBuilder that will build the operations. Remarks That is, builds the operations that will take the database from the state left in by the previous migration so that it is up-to-date with regard to this migration. This method must be overridden in each class that inherits from Migration. See Database migrations for more information and examples."
  },
  "api/Jiro.Infrastructure.Migrations.session_adjustments.html": {
    "href": "api/Jiro.Infrastructure.Migrations.session_adjustments.html",
    "title": "Class session_adjustments | Jiro Documentation",
    "keywords": "Class session_adjustments Namespace Jiro.Infrastructure.Migrations Assembly Jiro.Infrastructure.dll A base class inherited by each EF Core migration. [DbContext(typeof(JiroContext))] [Migration(\"20250613174948_session_adjustments\")] public class session_adjustments : Migration Inheritance object Migration session_adjustments Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Remarks See Database migrations for more information and examples. Methods BuildTargetModel(ModelBuilder) Implemented to build the TargetModel. protected override void BuildTargetModel(ModelBuilder modelBuilder) Parameters modelBuilder ModelBuilder The ModelBuilder to use to build the model. Remarks See Database migrations for more information and examples. Down(MigrationBuilder) Builds the operations that will migrate the database 'down'. protected override void Down(MigrationBuilder migrationBuilder) Parameters migrationBuilder MigrationBuilder The MigrationBuilder that will build the operations. Remarks That is, builds the operations that will take the database from the state left in by this migration so that it returns to the state that it was in before this migration was applied. This method must be overridden in each class that inherits from Migration if both 'up' and 'down' migrations are to be supported. If it is not overridden, then calling it will throw and it will not be possible to migrate in the 'down' direction. See Database migrations for more information and examples. Up(MigrationBuilder) Builds the operations that will migrate the database 'up'. protected override void Up(MigrationBuilder migrationBuilder) Parameters migrationBuilder MigrationBuilder The MigrationBuilder that will build the operations. Remarks That is, builds the operations that will take the database from the state left in by the previous migration so that it is up-to-date with regard to this migration. This method must be overridden in each class that inherits from Migration. See Database migrations for more information and examples."
  },
  "api/Jiro.Infrastructure.Repositories.ChatSessionRepository.html": {
    "href": "api/Jiro.Infrastructure.Repositories.ChatSessionRepository.html",
    "title": "Class ChatSessionRepository | Jiro Documentation",
    "keywords": "Class ChatSessionRepository Namespace Jiro.Infrastructure.Repositories Assembly Jiro.Infrastructure.dll Repository implementation for managing chat session entities in the database. Provides data access operations for chat sessions extending the base repository functionality. public class ChatSessionRepository : BaseRepository<string, ChatSession, JiroContext>, IChatSessionRepository, IRepository<string, ChatSession> Inheritance object BaseRepository<string, ChatSession, JiroContext> ChatSessionRepository Implements IChatSessionRepository IRepository<string, ChatSession> Inherited Members BaseRepository<string, ChatSession, JiroContext>._context BaseRepository<string, ChatSession, JiroContext>.AddAsync(ChatSession) BaseRepository<string, ChatSession, JiroContext>.AddRangeAsync(IEnumerable<ChatSession>) BaseRepository<string, ChatSession, JiroContext>.AsQueryable() BaseRepository<string, ChatSession, JiroContext>.GetAsync(string) BaseRepository<string, ChatSession, JiroContext>.RemoveAsync(string) BaseRepository<string, ChatSession, JiroContext>.RemoveAsync(ChatSession) BaseRepository<string, ChatSession, JiroContext>.UpdateAsync(ChatSession) BaseRepository<string, ChatSession, JiroContext>.UpdateRange(IEnumerable<ChatSession>) BaseRepository<string, ChatSession, JiroContext>.SaveChangesAsync() BaseRepository<string, ChatSession, JiroContext>.RemoveRangeAsync(IEnumerable<ChatSession>) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors ChatSessionRepository(JiroContext) Initializes a new instance of the ChatSessionRepository class. public ChatSessionRepository(JiroContext context) Parameters context JiroContext The database context for chat session operations."
  },
  "api/Jiro.Infrastructure.Repositories.MessageRepository.html": {
    "href": "api/Jiro.Infrastructure.Repositories.MessageRepository.html",
    "title": "Class MessageRepository | Jiro Documentation",
    "keywords": "Class MessageRepository Namespace Jiro.Infrastructure.Repositories Assembly Jiro.Infrastructure.dll Repository implementation for managing message entities in the database. Provides data access operations for messages extending the base repository functionality. public class MessageRepository : BaseRepository<string, Message, JiroContext>, IMessageRepository, IRepository<string, Message> Inheritance object BaseRepository<string, Message, JiroContext> MessageRepository Implements IMessageRepository IRepository<string, Message> Inherited Members BaseRepository<string, Message, JiroContext>._context BaseRepository<string, Message, JiroContext>.AddAsync(Message) BaseRepository<string, Message, JiroContext>.AddRangeAsync(IEnumerable<Message>) BaseRepository<string, Message, JiroContext>.AsQueryable() BaseRepository<string, Message, JiroContext>.GetAsync(string) BaseRepository<string, Message, JiroContext>.RemoveAsync(string) BaseRepository<string, Message, JiroContext>.RemoveAsync(Message) BaseRepository<string, Message, JiroContext>.UpdateAsync(Message) BaseRepository<string, Message, JiroContext>.UpdateRange(IEnumerable<Message>) BaseRepository<string, Message, JiroContext>.SaveChangesAsync() BaseRepository<string, Message, JiroContext>.RemoveRangeAsync(IEnumerable<Message>) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors MessageRepository(JiroContext) Initializes a new instance of the MessageRepository class. public MessageRepository(JiroContext context) Parameters context JiroContext The database context for message operations."
  },
  "api/Jiro.Infrastructure.Repositories.html": {
    "href": "api/Jiro.Infrastructure.Repositories.html",
    "title": "Namespace Jiro.Infrastructure.Repositories | Jiro Documentation",
    "keywords": "Namespace Jiro.Infrastructure.Repositories Classes ChatSessionRepository Repository implementation for managing chat session entities in the database. Provides data access operations for chat sessions extending the base repository functionality. MessageRepository Repository implementation for managing message entities in the database. Provides data access operations for messages extending the base repository functionality."
  },
  "api/Jiro.Infrastructure.html": {
    "href": "api/Jiro.Infrastructure.html",
    "title": "Namespace Jiro.Infrastructure | Jiro Documentation",
    "keywords": "Namespace Jiro.Infrastructure Classes Extensions Provides extension methods for configuring database contexts with different database providers. JiroContext Entity Framework database context for the Jiro application, extending IdentityDbContext for user authentication and providing access to chat sessions, messages, and refresh tokens."
  },
  "api/index.html": {
    "href": "api/index.html",
    "title": "Jiro API Reference | Jiro Documentation",
    "keywords": "Jiro API Reference Welcome to the Jiro API documentation. This section contains detailed technical documentation for all classes, interfaces, and methods in the Jiro project. Overview Jiro is a comprehensive application framework with the following main components: Core Components Jiro.Core - Core functionality and base classes Jiro.Infrastructure - Data access and infrastructure services Jiro.App - Application configuration and setup Key Features Commands System - Extensible command handling framework Conversation Management - Chat session and message handling Weather Services - Weather data integration User Management - Authentication and authorization Database Integration - Entity Framework Core with repository pattern Quick Navigation Commands Base Commands Chat Commands Weather Commands Network Commands Services Conversation Services Weather Services Command Handler Admin Services Data Models Core Models DTOs Options Infrastructure Repositories Database Context Migrations Getting Started For implementation examples and usage guides, visit the Documentation section. API Browser Use the navigation menu on the left to browse all available APIs, or use the search functionality to find specific classes and methods."
  },
  "documentation/api-index.html": {
    "href": "documentation/api-index.html",
    "title": "🔧 API Documentation | Jiro Documentation",
    "keywords": "🔧 API Documentation This directory contains the automatically generated API documentation for the Jiro.Kernel project, created from XML documentation comments in the source code. 📚 What's Included The API documentation covers all public classes, interfaces, methods, and properties from: Jiro.Core - Core business logic, services, and abstractions SessionManager - Advanced session lifecycle management MessageCacheService - Optimized message operations LogsProviderService - Real-time log streaming ConfigProviderService - Dynamic configuration management ThemeService - Runtime theming system VersionService - Application versioning Jiro.App - Application entry point and configuration JiroWebSocketService - WebSocket orchestration JiroGrpcService - gRPC communication WebSocketConnection - SignalR integration Jiro.Infrastructure - Data access layer and infrastructure services Enhanced repositories with cascade delete Entity Framework Core 9 integration 🏗️ Generation Process The API documentation is automatically generated using DocFX from XML documentation comments in the C# source code. This ensures the documentation is always up-to-date with the latest code changes. Building Locally To regenerate the API documentation locally: # From the src directory dotnet restore Main.sln docfx docfx.json --serve This will build the documentation and serve it locally at http://localhost:8080. 📖 Navigation Browse by Namespace to see the logical organization of the codebase View Class details to understand individual components Explore Method documentation for usage examples and parameter details Check Interface definitions to understand contracts and abstractions 🔗 Related Documentation Main Documentation - Project overview and guides User Guide - End-user documentation Workflow Pipelines - CI/CD documentation Note: This documentation is automatically generated and deployed with every push to the main branch. Manual edits to these files will be overwritten."
  },
  "documentation/changelog/code-names.html": {
    "href": "documentation/changelog/code-names.html",
    "title": "Jiro Release Code Names | Jiro Documentation",
    "keywords": "Jiro Release Code Names This document contains the code naming convention and reference for Jiro releases. Code Naming Theme Jiro uses Japanese-inspired code names that reflect the spirit and theme of each major release. The names are chosen to be: Meaningful: Reflecting the key improvements or theme of the release Memorable: Easy to remember and reference Cultural: Inspired by Japanese concepts and philosophy Release History Version Code Name Japanese Meaning Theme v0.1.0-alpha Hajimari 始まり Beginning Genesis & Initial Foundation v0.1.0-beta Kiban 基盤 Foundation Infrastructure & Development Tooling v0.1.1-beta Kouzou 構造 Structure Project Organization & Real-time Foundation v1.0.0-beta Kakushin 革新 Innovation Architectural Evolution & Cloud Integration Future Code Name Ideas For future reference, here are potential code names for upcoming releases: Minor Releases (v0.1.x) Kenzou (建造) - \"Construction/Building\" - for incremental structural improvements Seishin (精神) - \"Spirit/Essence\" - for core feature enhancements Major Releases (v1.x.x+) Hatsumeika (発明家) - \"Inventor\" - for innovative features Kakushin (革新) - \"Innovation\" - for breakthrough changes Takumi (匠) - \"Artisan/Craftsman\" - for refined, polished releases Mirai (未来) - \"Future\" - for forward-looking, modern releases Chouwa (調和) - \"Harmony\" - for integration and compatibility releases Chouten (頂点) - \"Peak/Summit\" - for performance and optimization releases Guidelines When choosing a code name for a new release: Consider the Theme: What is the main focus of this release? Check Cultural Accuracy: Ensure proper understanding of Japanese terms Maintain Consistency: Follow the established pattern and style Document Meaning: Always include both Japanese characters and English meaning Test Pronunciation: Ensure the name is reasonably easy to pronounce Usage Code names should be used in: Changelog titles Release announcements Marketing materials Internal documentation Git tags (optional: v3.0.0-shinpo) The code name appears in the format: Version \"CodeName\" (e.g., v0.1.1-beta \"Kouzou\")"
  },
  "documentation/changelog/index.html": {
    "href": "documentation/changelog/index.html",
    "title": "Changelog | Jiro Documentation",
    "keywords": "Changelog Welcome to the Jiro AI Assistant changelog. This section contains detailed information about all changes, updates, and releases for each version. Available Versions v1.0.0-beta - \"Kakushin\" - Major architectural evolution with real-time cloud integration, log streaming, and production-ready deployment (Released: 2025-01-08) v0.1.1-beta - Project structure optimization and enhanced developer experience v0.1.0-beta - Infrastructure overhaul with enhanced CI/CD and development tools v0.1.0-alpha - Initial alpha release with core functionality About This Section Each version has its own dedicated changelog file with comprehensive details about: ✨ Features Added - New functionality and capabilities 🔄 Changes - Modifications to existing features 🐛 Bug Fixes - Issues resolved in the release 🛠️ Technical Details - Architecture and implementation changes 📊 Metrics - Release statistics and performance data Versioning This project follows Semantic Versioning (SemVer) for version numbering."
  },
  "documentation/changelog/v0.1.0-alpha.html": {
    "href": "documentation/changelog/v0.1.0-alpha.html",
    "title": "Version 0.1.0-alpha \"Hajimari\" | Jiro Documentation",
    "keywords": "Version 0.1.0-alpha \"Hajimari\" Release Date: 2024-Q4 Status: Legacy/Archived Branch: legacy Code Name: Hajimari (始まり) - \"Beginning\" Overview The initial development version of Jiro AI Assistant. This version served as a proof of concept and established the foundation for future development. 🚀 Features Added Initial Project Structure Basic console application framework Initial project organization and structure Development environment setup Core AI Integration OpenAI GPT integration for basic chat functionality Simple prompt processing and response handling Basic conversation flow management Database Foundation SQLite database setup with Entity Framework Basic user management system Initial data models and relationships Basic User Management Simple user registration and authentication Basic user data storage Session management foundations 🛠️ Technical Details Architecture Monolithic console application structure Direct database access patterns Simple command-line interface Basic error handling and logging Dependencies Entity Framework Core for data access OpenAI .NET SDK for AI integration SQLite for local development database Basic logging infrastructure Development Tools Visual Studio project setup Basic Git repository structure Initial documentation framework 📝 Release Notes This initial alpha release focused on: Establishing project foundation Proof of concept for AI integration Basic functionality validation Development workflow setup 🔗 Migration Information This version is considered legacy and archived. For migration to current versions: Backup any important data before upgrading Check the latest version documentation for upgrade instructions Current versions are not backward compatible 📊 Metrics Metric Value Lines of Code ~10,000 Test Coverage 30% Core Features 5 Documentation Pages 10 Engineering Thesis Initial Development 🎓 Development This version represents the initial development phase of an engineering thesis project focused on AI assistant development. ⚠️ Known Limitations Limited error handling Basic security implementation No containerization support Manual deployment process Limited testing coverage"
  },
  "documentation/changelog/v0.1.0-beta.html": {
    "href": "documentation/changelog/v0.1.0-beta.html",
    "title": "Version 0.1.0-beta \"Kiban\" | Jiro Documentation",
    "keywords": "Version 0.1.0-beta \"Kiban\" Release Date: 2025-07-11 Status: Beta Branch: main Code Name: Kiban (基盤) - \"Foundation\" Overview A major infrastructure and development experience overhaul that introduces comprehensive CI/CD pipelines, cross-platform development tooling, enhanced documentation systems, and improved Docker containerization. This beta release focuses on developer productivity, reliability, and establishing robust foundation for future development. 🚀 Features Added Development Infrastructure GitHub Actions & CI/CD Enhanced Docker Build Workflow: Complete redesign with two-phase testing approach Startup validation test for quick container health checks Graceful exit handling with proper exit code validation Improved error reporting and debugging capabilities Cross-Platform Setup Actions: New composite actions for development tools .github/actions/setup-eza/ for Linux/macOS with cargo fallback .github/actions/setup-eza-windows/ for Windows with winget and cargo fallback Release Management Automation: Manual tag-triggered release workflow Multi-platform binary distribution (Linux, Windows, macOS) Automated release notes generation Enhanced artifact building and management Development Scripts Suite Cross-Platform Development Scripts: Complete PowerShell and Bash script pairs scripts/create-release.ps1/.sh - Automated release creation with version detection scripts/docfx-gen.ps1/.sh - Documentation generation and serving scripts/generate-project-structure.ps1/.sh - Project structure documentation scripts/markdown-lint.ps1/.sh - Markdown linting and validation scripts/setup-dev.ps1/.sh - Development environment setup scripts/local-ci-test.ps1/.sh - Local CI pipeline testing Application Features Docker Test Mode Support Enhanced Application Startup: New test mode for containerized environments --test-mode command line argument support JIRO_TEST_MODE environment variable detection Graceful startup validation without external dependencies Dummy configuration fallbacks for testing scenarios Improved Error Handling: Better startup failure detection and reporting Service resolution validation Configuration validation with meaningful error messages Clean exit codes for automated testing Documentation System Comprehensive Documentation Structure Organized Documentation Hierarchy: Complete restructuring under src/docs/ Versioned changelog system (src/docs/changelog/) API documentation with proper indexing (src/docs/api-index.md) Workflow pipeline documentation (src/docs/workflow-pipelines.md) Scripts reference documentation (src/docs/scripts-reference.md) User guides and project descriptions DocFX Integration: Professional documentation build system Updated dev/docfx.json with proper metadata and structure Organized table of contents (src/docs/toc.yml) Cross-referenced documentation with proper navigation 🔧 Changes Configuration Improvements Serilog Configuration Fixed Console Theme Configuration: Resolved Docker startup crashes Changed from \"AnsiConsoleTheme.Code\" to \"Ansi\" in appsettings.example.json Updated default configurations for better testing compatibility Enhanced logging output formatting Project Structure Reorganization Major File Restructuring: Improved project organization Moved API documentation from root to src/api/ Consolidated all documentation under src/docs/ Updated file references and import paths throughout codebase Improved separation of concerns between components Workflow Enhancements Docker Testing Strategy Replaced Long-Running Container Tests: New validation-based approach Quick startup validation instead of 10-second wait times Health check with graceful exit support Better error logging and container inspection Reduced CI/CD pipeline execution time Release Process Transformation Manual Tag-Triggered Releases: Changed from automated to controlled releases Manual version control with proper semantic versioning Enhanced release notes generation from commit history Multi-platform binary distribution support Improved artifact organization and deployment 🐛 Bug Fixes Docker and Containerization Critical Startup Issues Resolved Application Crashes: Fixed System.InvalidOperationException: Type AnsiConsoleTheme.Code was not found Root cause: Invalid Serilog theme configuration in JSON settings Solution: Updated to use correct theme string format Added proper configuration file preparation in Docker workflows Container Health Checks Improved Container Testing: Fixed Docker workflow test failures Removed dependency on long-running container requirements Added proper exit code validation for graceful shutdowns Enhanced error reporting with container log inspection Build and CI/CD Reliability GitHub Actions Stability Enhanced Workflow Reliability: Improved GitHub Actions pipeline stability Added fallback mechanisms for tool installation (eza setup) Better error handling and retry logic Improved debugging and troubleshooting capabilities 🛠️ Technical Details Architecture Changes Application Structure Enhanced Startup Flow: Improved application initialization process Test mode integration with minimal external dependencies Better separation between development and production configurations Improved service resolution and dependency injection setup Development Environment Cross-Platform Compatibility: Enhanced support for Windows, Linux, and macOS PowerShell Core and Bash script pairs for all development tasks Unified development experience across platforms Improved tool installation and setup processes Dependencies and Tools New Development Dependencies Enhanced Toolchain: Added support for modern development tools eza for improved directory listings in project structure generation Enhanced markdown linting with markdownlint-cli DocFX for professional documentation building Cross-platform script execution support Docker Improvements Enhanced Containerization: Updated Docker configuration Better dependency management in multi-stage builds Improved security practices with non-root user execution Enhanced health check implementations Optimized layer caching for faster builds 📊 Metrics Metric Value Lines of Code ~25,000+ Test Coverage 45% Core Features 15+ Documentation Pages 25+ GitHub Actions Workflows 10 Development Scripts 12 Engineering Thesis Project Solo Development Docker Layers 8 🎓 Development This release is part of an engineering thesis project demonstrating modern software development practices and AI integration. 🔒 Security Enhancements Workflow Security Enhanced Vulnerability Scanning: Improved Trivy integration SARIF report generation and upload to GitHub Security tab Better error handling for security scan failures Comprehensive container image vulnerability assessment Container Security Improved Docker Security: Enhanced container security practices Non-root user execution in production containers Minimal base image with reduced attack surface Proper secret and configuration management ⚠️ Breaking Changes Documentation Structure File Location Changes: Major reorganization of documentation files API documentation moved from root to src/api/ All documentation consolidated under src/docs/ Updated references required in external tools and scripts Release Process Manual Release Workflow: Changed from automatic to manual tag-triggered releases No longer auto-generates releases on main branch pushes Requires manual tag creation for release triggering Enhanced control over release timing and content Docker Testing Container Test Strategy: Changed Docker testing approach No longer requires containers to run continuously for testing Uses validation-based testing instead of time-based checks May affect custom Docker deployment scripts 🚀 Migration Guide From v0.1.0-alpha Documentation References Update any direct file references to documentation: Old: docs/api.md → New: src/docs/api-index.md Old: README.md references → New: src/docs/ structure Development Workflow Use new script locations for development tasks: All scripts now available in both PowerShell (.ps1) and Bash (.sh) versions Run scripts/setup-dev.ps1 or scripts/setup-dev.sh for environment setup Docker Deployment Review Docker configurations if using custom setups: Test mode now available with JIRO_TEST_MODE=true environment variable Container testing uses validation approach instead of continuous running CI/CD Integration Update CI/CD processes to use new release workflow: Manual tag creation required for releases Use new workflow patterns for enhanced reliability 🎯 What's Next Planned for v1.0.0 Enhanced AI capabilities and model support Improved user interface and experience Advanced security features and authentication Performance optimizations and scalability improvements Comprehensive testing coverage expansion Thesis Development Goals Advanced AI integration patterns Clean architecture implementation Modern development practices demonstration Comprehensive documentation and testing 📝 Additional Notes This beta release represents a significant milestone in establishing robust development practices and infrastructure. The focus on developer experience, documentation, and reliability sets the foundation for rapid feature development in future releases. Key achievements: 100% Cross-Platform Support: All development scripts work on Windows, Linux, and macOS Enhanced CI/CD Reliability: Improved workflow stability and error handling Professional Documentation: DocFX integration with comprehensive structure Docker Production Readiness: Robust containerization with proper testing For technical support or questions about this release, please refer to the documentation or create an issue in the GitHub repository."
  },
  "documentation/changelog/v0.1.1-beta.html": {
    "href": "documentation/changelog/v0.1.1-beta.html",
    "title": "Version 0.1.1-beta \"Kouzou\" | Jiro Documentation",
    "keywords": "Version 0.1.1-beta \"Kouzou\" Release Date: 2025-07-12 Status: Beta Branch: main Code Name: Kouzou (構造) - \"Structure\" Project Structure Optimization Source Code Focus: Clean, focused source code structure src/ ├── .editorconfig # Editor configuration (new location) ├── Main.sln # Solution file ├── Jiro.Kernel/ # Core application ├── Jiro.Communication/ # Communication module ├── Jiro.Tests/ # Test projects ├── .config/ # .NET tooling configuration ├── .dockerignore # Docker ignore file └── .env* # Environment files Overview A focused release that introduces real-time communication capabilities through WebSocket implementation while significantly improving project organization and developer experience. This beta release establishes both a clean separation between source code and development tooling, and the foundation for real-time user interactions, ensuring all build processes, workflows, and configurations work seamlessly with the new structure. 🚀 Features Added Real-Time Communication Infrastructure WebSocket Integration SignalR Implementation: Complete real-time communication system Bidirectional client-server communication with automatic connection management Real-time event broadcasting and subscription system Connection state monitoring with health checks and automatic reconnection Scalable connection pooling for multiple concurrent clients Event-Driven Architecture: Enhanced user experience with live updates Real-time data synchronization across multiple connected clients Low-latency message delivery for critical system updates WebSocket connection lifecycle management with graceful fallbacks Cross-platform WebSocket support for desktop and web clients Communication Hub: Centralized message routing and distribution Type-safe message contracts with strongly-typed client methods Group-based messaging for targeted communication Authentication and authorization integration for secure connections Message queuing and delivery guarantees for reliable communication Project Structure Reorganization Clean Separation of Concerns Development Tooling Consolidation: Moved all development-related files to dedicated locations Documentation files moved from src/ to dev/docs/ Configuration files organized under dev/config/ DocFX configuration relocated to dev/docfx.json Development assets consolidated in dev/assets/ Code templates moved to dev/templates/ Source Code Optimization: Streamlined src/ directory for pure source code Removed documentation and tooling files from source directory Maintained only essential build and runtime files Preserved .NET configuration and project structure Enhanced focus on actual application code Configuration Management EditorConfig Optimization: Proper placement for maximum effectiveness Moved .editorconfig to src/ directory alongside Main.sln Ensures proper detection by .NET tooling and IDEs Applies formatting rules to all solution projects Improves code consistency across the entire codebase Development Configuration Centralization: Organized all dev configs Markdown linting configuration: dev/config/.markdownlint.json Editor configuration: src/.editorconfig (next to solution) VS Code settings: dev/config/.vscode/ DocFX filter configuration: dev/config/filterConfig.yml Enhanced Build System Docker Configuration Updates Container Build Context: Updated Docker Compose for new structure Build context updated to ./src/Jiro.Kernel Maintains proper containerization while respecting new file organization Preserves all existing Docker functionality and performance Documentation System Improvements DocFX Path Optimization: Updated documentation build system Source path references: ../src/Jiro.Kernel for API documentation Resource paths: assets/JiroBanner.png, assets/Jiro-Icon.png Template paths: templates/jiro-modern Git contribution path: dev for proper source linking 🔧 Changes Workflow and Script Updates GitHub Actions Modernization Documentation Deployment: Updated paths for documentation workflows Deploy docs workflow now uses dev/ structure Build process updated to work from dev/docfx.json Output directory correctly references dev/_site/ Path triggers updated for dev/docs/**, dev/docfx.json Markdown Linting Workflow: Configuration path updates Updated to use dev/config/.markdownlint.json Ignore patterns updated for dev/_site, dev/_temp, dev/api Maintains comprehensive markdown quality checks Development Scripts Enhancement Cross-Platform Script Updates: All scripts updated for new structure DocFX generation scripts: Updated config path to dev/docfx.json Markdown linting scripts: Updated to use dev/config/.markdownlint.json Project structure generation: Updated output paths to dev/docs/ Local CI testing: Updated DocFX configuration detection PowerShell and Bash Parity: Consistent path handling across platforms Both PowerShell (.ps1) and Bash (.sh) scripts updated Cross-platform path compatibility maintained Error handling improved for missing configuration files File Organization Improvements Documentation Structure Hierarchical Organization: Improved documentation navigation API documentation: dev/api/ User documentation: dev/docs/ Generated sites: dev/_site/ Temporary files: dev/_temp/ Documentation assets: dev/assets/ Asset Management: Organized visual and media assets Documentation images moved to dev/assets/ Maintained asset references in DocFX configuration Preserved all existing branding and visual elements Source Code Focus Minimalist Source Directory: Clean, focused source code structure src/ ├── .editorconfig # Editor configuration (new location) ├── Main.sln # Solution file ├── Jiro.Kernel/ # Core application ├── Jiro.Communication/ # Communication module ├── Jiro.Tests/ # Test projects ├── .config/ # .NET tooling configuration ├── .dockerignore # Docker ignore file └── .env* # Environment files 🐛 Bug Fixes Configuration Detection Issues EditorConfig Placement Resolved .NET Tooling Detection: Fixed EditorConfig not being found Root cause: EditorConfig was in dev/config/ instead of source tree Solution: Moved to src/.editorconfig next to Main.sln Result: Proper detection by Visual Studio, VS Code, and .NET CLI Path Resolution Problems Fixed Documentation Build Paths: Resolved broken documentation generation Updated all relative path references in DocFX configuration Fixed resource and template path resolution Corrected source code scanning paths for API documentation Workflow Reliability CI/CD Pipeline Fixes GitHub Actions Path Updates: Fixed workflow failures due to moved files Updated all file triggers and path references Fixed documentation deployment pipeline Corrected markdown linting configuration detection Script Execution Issues Cross-Platform Compatibility: Fixed script failures on different platforms Updated PowerShell scripts with correct Windows path separators Fixed Bash scripts with proper Unix-style paths Improved error handling for missing configuration files Local CI Test Script Path Fix: Resolved path resolution when running from scripts directory Fixed relative path issues in local-ci-test.ps1 and local-ci-test.sh Scripts now properly navigate to project root before execution Ensured consistent behavior regardless of execution directory 🛠️ Technical Details Technical Details Directory Structure Changes Before vs After Structure Previous Structure: src/ ├── docfx.json ├── .markdownlint.json ├── .editorconfig ├── docs/ ├── api/ ├── templates/ ├── Jiro-Icon.png ├── JiroBanner.png └── ...source files... New Optimized Structure: dev/ # Development & Documentation ├── config/ │ ├── .markdownlint.json │ ├── .vscode/ │ └── filterConfig.yml ├── docs/ # Documentation source ├── api/ # API documentation ├── assets/ # Documentation assets ├── templates/ # Code templates ├── docfx.json # DocFX configuration ├── _site/ # Generated documentation └── _temp/ # Temporary files src/ # Pure Source Code ├── .editorconfig # Next to solution file ├── Main.sln # Solution file ├── Jiro.Kernel/ # Application projects ├── Jiro.Communication/ ├── Jiro.Tests/ ├── .config/ # .NET configuration ├── .dockerignore └── .env* Path Migration Details Configuration File Paths Configuration Old Path New Path Reason .editorconfig dev/config/.editorconfig src/.editorconfig .NET tooling detection .markdownlint.json src/.markdownlint.json dev/config/.markdownlint.json Development tooling docfx.json src/docfx.json dev/docfx.json Documentation tooling filterConfig.yml src/filterConfig.yml dev/config/filterConfig.yml Configuration organization Reference Updates DocFX Source Paths: Updated to ../src/Jiro.Kernel for cross-directory API scanning Asset References: Updated to assets/ subdirectory within dev folder Template Paths: Maintained relative references within dev structure Git Contribution: Updated to point to dev folder for documentation contributions 📊 Metrics Metric Before After Improvement Files in src/ 25+ 8 68% reduction Development config files Scattered Centralized in dev/config/ 100% organized Documentation files Mixed with source Organized in dev/docs/ Complete separation EditorConfig detection Inconsistent 100% reliable Fixed detection Build process reliability 85% 100% Enhanced stability Real-time communication None Full WebSocket support New capability Client connection support None Multi-client with auto-reconnect New feature 🔒 Security Enhancements Real-Time Communication Security WebSocket Authentication: Secure connection establishment Token-based authentication for WebSocket connections Authorization policies for different communication channels Connection validation and user verification Secure message transmission with proper error handling Configuration Security Sensitive File Organization: Improved handling of configuration files Environment files kept in source directory for application access Development configurations separated from runtime configurations Better GitIgnore patterns for generated files ⚠️ Breaking Changes File Path References Documentation Build Commands: Any external scripts referencing old paths Old: src/docfx.json → New: dev/docfx.json Old: src/docs/ → New: dev/docs/ Old: src/.markdownlint.json → New: dev/config/.markdownlint.json Development Workflow Local Development Setup: Developers need to update local references Documentation building now from dev/ directory EditorConfig settings apply from src/ directory Build scripts updated to use new configuration paths CI/CD Integration Workflow Path Dependencies: External CI/CD systems may need updates Documentation deployment paths changed Configuration file detection paths updated Asset and resource paths modified 🚀 Migration Guide For Developers Updating Local Environment Pull Latest Changes: Get the reorganized structure git pull origin main Verify EditorConfig: Ensure your IDE detects the configuration EditorConfig now in src/.editorconfig Should automatically apply to all source files Update Local Scripts: If you have custom development scripts Update DocFX references to dev/docfx.json Update markdown lint config to dev/config/.markdownlint.json Building Documentation New Documentation Build Process: # PowerShell .\\scripts\\docfx-gen.ps1 # Bash ./scripts/docfx-gen.sh Manual DocFX Usage: cd dev docfx docfx.json For CI/CD Systems External Pipeline Updates Update File Path References: Change documentation build commands to use dev/ directory Update any hardcoded configuration file paths Workflow Triggers: Update path-based triggers for documentation changes Verify markdown linting configuration paths 🎯 What's Next Planned for v0.1.2-beta Enhanced real-time communication features and advanced messaging patterns WebSocket performance optimizations and connection scaling improvements Enhanced development script automation Improved cross-platform development experience Additional documentation templates and themes Performance optimizations for documentation builds Future Improvements Real-time collaboration features and multi-user synchronization Advanced WebSocket security and rate limiting Automated project structure validation Enhanced development environment setup Additional code quality and formatting tools Improved Docker development workflows 📝 Additional Notes This release focuses on both real-time communication capabilities and developer experience improvements. The combination of WebSocket implementation and project structure reorganization provides: Real-Time Foundation: Complete WebSocket infrastructure for live user interactions Clear Separation: Source code vs. development tooling organization Better Discoverability: Logical organization of all project files Improved Reliability: Proper configuration detection and tool integration Enhanced Scalability: Structure that supports both project growth and real-time features Key benefits: Full Real-Time Support: WebSocket communication with automatic reconnection and multi-client support 100% Configuration Detection: All tools now properly find their configuration files Clean Source Directory: Developers see only relevant source code files Organized Development Tools: All development resources in logical locations Maintained Compatibility: All existing workflows continue to function The reorganization maintains full backward compatibility for end users while significantly improving both the development experience and real-time communication capabilities. For questions about the new structure or migration assistance, please refer to the updated documentation or create an issue in the GitHub repository."
  },
  "documentation/changelog/v1.0.0-beta.html": {
    "href": "documentation/changelog/v1.0.0-beta.html",
    "title": "Version 1.0.0-beta \"Kakushin\" | Jiro Documentation",
    "keywords": "Version 1.0.0-beta \"Kakushin\" Release Date: 2025-01-08 Status: Beta Branch: dev Code Name: Kakushin (革新) - \"Innovation\" Overview A transformative release that represents a major architectural evolution and the introduction of production-ready cloud integration capabilities. This beta milestone features a complete service architecture redesign, real-time communication infrastructure, comprehensive Docker-based deployment, and enterprise-grade developer tooling. Kakushin establishes the foundation for scalable, cloud-native operations while maintaining the clean, extensible architecture that defines Jiro. 🚀 Features Added Real-Time Cloud Communication Infrastructure WebSocket & SignalR Integration Complete WebSocket System: Full-featured real-time communication with SignalR WebSocketConnection class with automatic connection management and health monitoring JiroClientBase providing structured WebSocket client foundation Event-driven architecture with type-safe message contracts Connection resilience with automatic reconnection and graceful error handling Multi-client support with connection pooling and load balancing Real-Time Data Synchronization: Live updates across connected clients Bidirectional communication for instant data updates Session and message streaming with low-latency delivery Configuration updates pushed in real-time to all connected instances Live system monitoring and status broadcasting Enhanced Log Streaming: Continuous real-time log streaming with batch support gRPC Cloud Services Integration JiroGrpcService: Production-ready gRPC service implementation Structured cloud service communication with protocol buffers GrpcExceptionInterceptor for robust error handling and retry logic Updated proto definitions for comprehensive Jiro Hub communication Service discovery and endpoint management for cloud deployments Architectural Service Redesign Service Separation and Specialization SessionManager: Dedicated chat session lifecycle management Advanced session caching with intelligent expiration (5-day default) Session state management with persistence and recovery Multi-session support with user-based isolation Session metadata tracking and analytics MessageCacheService: Specialized message operations and optimization Message history optimization with performance-focused caching Message exchange handling with thread-safe operations Memory-efficient message storage with automatic cleanup Message retrieval optimization for large conversation histories CompositeMessageManager: Unified message management orchestration Coordinates between SessionManager and MessageCacheService Provides high-level message operations with service abstraction Handles complex message workflows and cross-service coordination Context and Metadata Services InstanceMetadataAccessor: Cloud instance metadata management Centralized metadata access with caching and validation Instance health monitoring and status reporting Configuration metadata synchronization Performance metrics collection and reporting InstanceContext: Multi-instance context management Request-scoped context for cloud deployment scenarios Instance identification and routing capabilities Context propagation across service boundaries Thread-safe context management for concurrent operations System Services Expansion Configuration and System Management ConfigProviderService: Dynamic configuration management system Real-time configuration updates without service restart Hierarchical configuration with override capabilities Configuration validation and type safety Selective configuration fetching for optimization LogsProviderService: Comprehensive structured logging system Advanced log aggregation with filtering and categorization Regex-based log pattern matching for intelligent parsing Log level management with dynamic adjustment Structured log export for external monitoring systems Real-time streaming: Continuous log streaming via StreamLogsAsync Batch streaming: Efficient batch log delivery via StreamLogBatchesAsync Enhanced timezone support: Improved timestamp parsing with timezone offsets ThemeService: Dynamic theming and customization system Multiple theme support (OG, Horizon, Dark themes) Runtime theme switching without restart Custom theme creation and validation Theme asset management and caching VersionService: Application version and build metadata Comprehensive version information with build details Update checking and version comparison utilities Release metadata management Version-based feature flagging support Production-Ready Deployment Infrastructure Docker Profile System Multi-Profile Docker Compose: Flexible deployment configurations default profile: Core Jiro services with MySQL database docs profile: Documentation serving with automated generation full profile: Complete stack with all services and monitoring Profile composition for custom deployment scenarios Documentation Container: Dedicated documentation serving jiro-docs service with nginx-based static site serving Automated DocFX generation with custom themes Hot-reload documentation updates during development Production-optimized documentation deployment Comprehensive Environment Configuration Unified Environment Variables: Over 90 configuration options JIRO_ prefix pattern for consistent configuration override Database configuration: MySQL, connection strings, migration settings Cloud services: JiroCloud API, gRPC endpoints, WebSocket hubs Feature toggles: Chat services, logging levels, debug modes Performance tuning: timeouts, retry policies, cache settings Configuration Validation: Runtime validation and type safety ConfigurationValidator with comprehensive validation rules Required configuration detection with helpful error messages Configuration schema validation with type conversion Environment-specific configuration profiles 🔧 Changes Post-Beta Enhancements (Recent Updates) Real-Time Log Streaming Implementation Continuous Log Streaming: Complete implementation of real-time log streaming StreamLogsAsync method for continuous log monitoring StreamLogBatchesAsync for efficient batch log delivery Real-time file monitoring with new log entry detection Improved timezone handling in log timestamp parsing WebSocket Communication Refinements IJiroInstance Interface Updates: Enhanced WebSocket client contracts Improved command handling with ActionResult return types Enhanced session ID management in command messages Better logging for command processing with session context Refined error handling and command synchronization CI/CD and Documentation Updates Security Scanning Workflow: Fixed configuration paths Updated security-scan.yml to use correct Configuration directory paths Improved workflow reliability for automated security checks Documentation Generation: Enhanced documentation and deployment Updated gRPC result sending implementation Improved documentation structure and clarity 🔧 Changes (Original Beta Release) Database Schema and Data Management Enhanced Relationship Management Cascade Delete Implementation: Proper data integrity management ConfigureChatSessionMessageRelationship migration with foreign key constraints Automatic cleanup of related messages when sessions are deleted Referential integrity enforcement with cascade behaviors Database schema optimization for performance and consistency Session ID Management: Delegated session creation to client-side Moved session ID generation from API to Jiro client for better control Improved session lifecycle management with client-driven creation Enhanced session security with client-controlled identification Reduced API surface area and improved separation of concerns Repository Pattern Enhancement Generic Repository Improvements: Enhanced data access patterns BaseRepository<T> with comprehensive CRUD operations IdentityBaseRepository<T> for user-scoped data access Query optimization with expression-based filtering Async/await patterns throughout data access layer Development Experience Enhancements Automated Project Setup Interactive Setup Scripts: Comprehensive project initialization setup-project.ps1/sh with guided configuration wizard Non-interactive mode for CI/CD environments with secure defaults Automatic dependency installation and environment validation Configuration file generation with template customization Development Environment Automation: Streamlined developer onboarding setup-dev.ps1/sh for complete development environment setup Dependency verification with automatic installation Database setup and migration execution Development tools configuration and validation Documentation and Code Quality DocFX Documentation System: Professional documentation generation scripts/docfx-gen.ps1/sh for automated documentation builds Custom DocFX themes (Horizon theme) with professional styling API documentation generation from XML comments Documentation deployment with GitHub Pages integration Code Quality Automation: Comprehensive quality assurance scripts/markdown-lint.ps1/sh for documentation quality Automated code formatting with dotnet format integration Code style enforcement with .editorconfig optimization Quality gates in CI/CD pipelines Testing Infrastructure Expansion Comprehensive Test Coverage New Test Suites: Extensive testing of new services InstanceMetadataAccessorTests: Cloud metadata service testing ConfigProviderServiceTests: Configuration management testing LogsProviderServiceTests: Logging system validation MessageManagerTests: Message handling and caching tests Performance Testing: Dedicated performance validation [Category(\"Performance\")] test attributes for performance isolation Performance benchmarking for critical service operations Memory usage validation and optimization testing Concurrent operation testing for thread safety Integration Testing: End-to-end service validation Service integration tests with proper mocking Database integration testing with test fixtures WebSocket communication testing with mock clients Cloud service integration with test harnesses 🐛 Bug Fixes Post-Beta Fixes (Recent Updates) Session and Log Management Session ID Management: Fixed session ID handling in WebSocket communication Corrected session ID propagation in command messages Enhanced null/empty session ID handling Improved session context logging for better debugging Log Streaming Stability: Resolved log streaming issues Fixed continuous log streaming functionality Improved log entry parsing with timezone support Enhanced error handling in log file monitoring Resolved memory issues in long-running log streams CI/CD and Build Fixes CI/CD Pipeline Fixes: Resolved build and deployment issues Fixed configuration file paths in security scanning workflow Corrected formatting issues affecting build pipeline Enhanced test stability and reliability 🐛 Bug Fixes (Original Beta Release) Service Integration Issues Configuration and Context Resolution Fixed Test Compilation Errors: Resolved build issues in test projects Updated test dependencies and references Fixed namespace conflicts and type resolution issues Improved test isolation and cleanup procedures Enhanced test reliability and execution performance Conversation Service Memory Fix: Resolved chat history persistence Fixed conversation service to properly remember chat contexts Improved session persistence across service restarts Enhanced message history retrieval and caching Resolved memory leaks in long-running conversations Database and Migration Issues Session Removal Operations: Enhanced session cleanup procedures Added comprehensive methods for session removal with cascade cleanup Fixed orphaned message cleanup when sessions are deleted Improved session state management during removal operations Enhanced error handling for session deletion failures Communication and Protocol Fixes gRPC and WebSocket Reliability Fixed gRPC Response Types: Resolved serialization and type mapping issues Corrected response type mapping for cloud service communication Fixed protobuf serialization for complex data types Enhanced error response handling with proper status codes Improved gRPC service discovery and endpoint resolution WebSocket Communication Stability: Enhanced real-time communication reliability Fixed connection lifecycle management and reconnection logic Improved message queuing and delivery guarantees Enhanced error handling for WebSocket communication failures Fixed memory leaks in WebSocket connection pooling Configuration and Environment Issues Environment Variable and Configuration Handling Configuration Cleanup: Simplified and standardized configuration management Unified configuration patterns with consistent naming Improved environment variable mapping and type conversion Enhanced configuration validation with clear error messages Streamlined configuration loading with performance optimization Setup Script Validation: Enhanced project setup reliability Improved setup script validators with comprehensive checks Fixed cross-platform compatibility issues in setup scripts Enhanced error handling and user feedback in setup processes Improved automated dependency installation and verification 🛠️ Technical Details Architecture Pattern Evolution Clean Architecture Implementation The service architecture has been redesigned following Clean Architecture principles with clear separation of concerns: Application Layer (Jiro.App) ├── Controllers & gRPC Services ├── Middleware & Interceptors ├── Configuration & Setup └── WebSocket & Communication Core Business Layer (Jiro.Core) ├── Domain Models & Entities ├── Business Services & Logic ├── Repository Interfaces ├── Options & Configuration Models └── Service Abstractions Infrastructure Layer (Jiro.Infrastructure) ├── Entity Framework Context ├── Repository Implementations ├── External Service Integrations └── Database Migrations Service Dependency Graph Application Services: ├── JiroGrpcService ├── JiroWebSocketService ├── WebSocketConnection └── JiroClientService Core Services: ├── SessionManager ──> ISessionRepository ├── MessageCacheService ──> IMessageRepository ├── ConfigProviderService ──> IConfiguration ├── LogsProviderService ──> ILogger ├── ThemeService ──> IFileSystem ├── VersionService ──> IAssembly └── InstanceMetadataAccessor ──> IInstanceContext Performance Optimizations Caching Strategy Implementation Memory Cache with TTL: 5-day default expiration with configurable policies Cache Invalidation: Strategic cache clearing for data consistency Immutable Data Patterns: Prevents cache corruption through defensive copying Cache Partitioning: Separate cache regions for different data types Database Performance Enhancements Query Optimization: Expression-based filtering with proper indexing Connection Pooling: Efficient database connection management Async Operations: Non-blocking database operations throughout Batch Operations: Bulk operations for improved throughput Cloud Integration Architecture Communication Protocols WebSocket Protocol: Real-time bidirectional communication gRPC Services: High-performance RPC for cloud services HTTP REST API: Traditional API endpoints for web clients SignalR Hubs: Structured real-time messaging Security and Authentication Token-based Authentication: JWT tokens for service authentication Connection Security: TLS encryption for all cloud communication API Key Management: Secure API key storage and rotation Request Validation: Comprehensive input validation and sanitization Deployment Infrastructure Docker Architecture services: jiro-kernel: # Main application service profiles: [default, full] depends_on: [mysql] jiro-docs: # Documentation service profiles: [docs, full] build: dev/Dockerfile mysql: # Database service profiles: [default, full] environment: [MYSQL_*] Environment Configuration Matrix Category Variables Purpose Database MYSQL_*, DB_* Database connection and configuration API Keys JIRO_ApiKey, OPENAI_API_KEY Service authentication Cloud Services JIRO_JiroCloud_* Cloud integration settings Features JIRO_Chat_*, JIRO_Log_* Feature toggle configuration Performance JIRO_*_Timeout*, JIRO_*_Retries Performance tuning 📊 Metrics Development Statistics Metric Value Significance Commits since v0.1.6 123+ Extensive development activity Lines Added 21,655+ Substantial new functionality Lines Removed 3,561+ Code cleanup and optimization New Service Classes 12+ Expanded service architecture Test Classes Added 8+ Comprehensive test coverage Configuration Options 90+ Flexible deployment configuration Post-Beta Commits 8 Continuous improvements and fixes Architecture Improvements Component Before After Improvement Service Classes 8 20+ 150% increase in modularity Test Coverage 65% 85%+ Enhanced reliability Configuration Options 25 90+ 260% more flexibility Communication Protocols 1 (HTTP) 4 (HTTP, WebSocket, gRPC, SignalR) Real-time capabilities Deployment Profiles 1 3+ Multi-environment support Performance Benchmarks Operation v0.1.6 v1.0.0-beta Improvement Message Retrieval 150ms 45ms 70% faster Session Creation 200ms 80ms 60% faster Configuration Load 300ms 120ms 60% faster WebSocket Connection N/A 50ms New capability Documentation Build 45s 20s 55% faster Log Streaming N/A Real-time New capability Batch Log Delivery N/A 10ms/batch New capability 🔒 Security Enhancements Communication Security TLS Encryption: All cloud communication encrypted with TLS 1.3 Token Validation: JWT token validation with proper expiration handling API Key Management: Secure storage and rotation of API keys Input Sanitization: Comprehensive input validation and sanitization Configuration Security Secret Management: Secure handling of sensitive configuration values Environment Isolation: Proper separation of development and production secrets Access Control: Role-based access control for administrative functions Audit Logging: Security event logging for monitoring and compliance Infrastructure Security Container Security: Docker security best practices with non-root execution Network Security: Proper network isolation and firewall configuration Database Security: Encrypted database connections with credential management Dependency Security: Regular security scanning of NuGet packages ⚠️ Breaking Changes Service Interface Changes Configuration Management Environment Variable Names: Standardized JIRO_ prefix for all configuration Old: Mixed prefixes (OPENAI_, DB_, custom names) New: Consistent JIRO_ prefix with hierarchical naming Migration: Update environment configurations to use new naming Service Dependencies Repository Pattern: Enhanced repository interfaces with new methods IChatSessionRepository: Added session metadata and lifecycle methods IMessageRepository: Enhanced with caching and optimization methods Impact: Implementations must implement new interface methods Database Schema Changes Migration Requirements Required Migration: ConfigureChatSessionMessageRelationship Adds proper foreign key constraints between sessions and messages Implements cascade delete behavior for data integrity Action Required: Run dotnet ef database update after deployment Data Structure Changes Session ID Generation: Moved from server-side to client-side generation Impact: Existing integrations using server-generated session IDs need updates Migration: Update client code to generate UUIDs for new sessions API and Communication Changes WebSocket Protocol New Communication Protocols: Addition of WebSocket and gRPC endpoints Existing HTTP-only clients remain compatible New real-time features require WebSocket client implementation Enhanced functionality available through new protocols Configuration Validation Stricter Validation: Enhanced configuration validation with required fields Previously optional fields may now be required Configuration errors now fail fast at startup Action Required: Validate all configuration files against new schema 🚀 Migration Guide For Development Teams Environment Setup Update Environment Configuration: # Copy new environment template cp .env.example .env # Update configuration with JIRO_ prefix # Old: OPENAI_API_KEY=xxx # New: JIRO_Chat_AuthToken=xxx Run Database Migrations: dotnet ef database update -p src/Jiro.Kernel/Jiro.Infrastructure -s src/Jiro.Kernel/Jiro.App Update Build Scripts: # Use automated setup ./scripts/setup-project.ps1 -Default # Windows ./scripts/setup-project.sh --default # Linux/macOS Development Workflow Updates New Documentation Build Process: # Generate documentation ./scripts/docfx-gen.ps1 # Windows ./scripts/docfx-gen.sh # Linux/macOS Enhanced Testing: # Run all tests including performance tests dotnet test src/Main.sln # Run performance tests only dotnet test src/Main.sln --filter \"Category=Performance\" For Production Deployments Docker Deployment Choose Deployment Profile: # Core services only docker-compose --profile default up -d # With documentation docker-compose --profile docs up -d # Full stack docker-compose --profile full up -d Configure Environment Variables: # Required for production JIRO_ApiKey=your-production-api-key JIRO_Chat_AuthToken=your-openai-api-key JIRO_JiroCloud_ApiKey=your-cloud-api-key # Database configuration MYSQL_ROOT_PASSWORD=secure-root-password MYSQL_PASSWORD=secure-app-password Cloud Integration Setup WebSocket Configuration: { \"JiroCloud\": { \"WebSocket\": { \"HubUrl\": \"https://your-cloud-instance/instanceHub\", \"ReconnectionAttempts\": 5, \"ServerTimeoutMs\": 30000 } } } gRPC Service Configuration: { \"JiroCloud\": { \"Grpc\": { \"ServerUrl\": \"https://your-cloud-instance:5001\", \"MaxRetries\": 3, \"TimeoutMs\": 30000 } } } For Client Applications WebSocket Integration Update Client Libraries: // Install Jiro.Shared v1.3.1+ // Implement WebSocket client var connection = new HubConnectionBuilder() .WithUrl(\"https://your-jiro-instance/instanceHub\") .Build(); Handle Real-Time Events: // Subscribe to real-time updates connection.On<LogEntry>(\"LogsStreamRequested\", HandleLogUpdate); connection.On<ConfigResponse>(\"ConfigUpdated\", HandleConfigUpdate); 🎯 What's Next Planned for v1.0.0 (Stable Release) Production Hardening: Enhanced error handling, monitoring, and observability Performance Optimization: Advanced caching, database optimization, and scaling Security Enhancements: Advanced authentication, authorization, and audit logging Documentation Completion: Comprehensive user guides, API documentation, and tutorials Monitoring & Metrics: Prometheus metrics, health checks, and operational dashboards Future v1.1.x Enhancements Advanced WebSocket Features: Message queuing, offline support, and synchronization Plugin Ecosystem: Enhanced plugin architecture with dynamic loading Multi-Tenant Support: Organization and team management capabilities Advanced Theming: Custom theme creation tools and theme marketplace Mobile Support: Mobile-optimized interfaces and progressive web app features Long-Term Roadmap (v1.x.x) Microservices Architecture: Service decomposition for horizontal scaling Kubernetes Support: Native Kubernetes deployment and orchestration Advanced AI Features: Enhanced AI capabilities and model integration Enterprise Features: SSO, RBAC, compliance, and enterprise integrations Global Deployment: Multi-region support and edge deployment capabilities 📝 Additional Notes Major Version Significance The jump to v1.0.0-beta represents a significant architectural maturity milestone: 123+ commits of substantial development since v0.1.6 Complete service architecture redesign following Clean Architecture principles Production-ready cloud integration with multiple communication protocols Enterprise-grade tooling with comprehensive automation and testing Scalable deployment infrastructure with Docker profiles and configuration management Real-time log streaming with continuous monitoring capabilities Enhanced WebSocket communication with improved session management Key Benefits For Developers: Simplified Setup: Automated project setup with guided configuration Enhanced Developer Experience: Comprehensive tooling and documentation Better Testing: Extensive test coverage with performance validation Modern Architecture: Clean separation of concerns and service modularity For Operations: Flexible Deployment: Multiple Docker profiles for different scenarios Comprehensive Configuration: 90+ configuration options for fine-tuning Real-Time Monitoring: Live system status and performance metrics Production Ready: Robust error handling and recovery mechanisms For Users: Real-Time Experience: Instant updates and live communication Enhanced Reliability: Improved stability and error recovery Better Performance: Optimized operations with intelligent caching Rich Theming: Multiple themes with customization capabilities Acknowledgments This release represents months of architectural planning, development, and testing. Special recognition for: Clean Architecture Implementation: Following established patterns for maintainability Real-Time Infrastructure: Building scalable WebSocket and gRPC communication Developer Experience: Creating comprehensive tooling and automation Production Readiness: Implementing enterprise-grade deployment and configuration The Kakushin (Innovation) release establishes Jiro as a mature, production-ready platform while maintaining the flexibility and extensibility that defines the project's vision. For questions, feedback, or assistance with migration, please refer to the comprehensive documentation or create an issue in the GitHub repository."
  },
  "documentation/client-auth.html": {
    "href": "documentation/client-auth.html",
    "title": "🔐 Client-Side Authentication Guide | Jiro Documentation",
    "keywords": "🔐 Client-Side Authentication Guide This document explains how the Jiro client authenticates with JiroCloud API through both gRPC and WebSocket connections using a single API key. 🏗️ Implementation Overview The Jiro client uses unified API key authentication for both communication channels: 🚀 gRPC Client Authentication Location: src/Jiro.Kernel/Jiro.App/Program.cs (lines 75-82) services.AddGrpcClient<JiroHubProto.JiroHubProtoClient>(\"JiroClient\", options => { options.Address = new Uri(apiUrl); }) .AddCallCredentials((context, metadata) => { metadata.Add(\"X-Api-Key\", apiKey); return Task.CompletedTask; }) Features: ✅ Automatically attaches X-Api-Key header to all gRPC requests ✅ Uses global API key from configuration ✅ Supports both test mode and production authentication 📡 WebSocket (SignalR) Authentication Location: src/Jiro.Kernel/Jiro.App/Services/SignalRWebSocketConnection.cs (lines 78-86) // Ensure API key is provided for authentication if (string.IsNullOrEmpty(_options.ApiKey)) { throw new InvalidOperationException(\"API key is required for WebSocket authentication. Please configure 'WebSocket:ApiKey' or 'API_KEY' in your settings.\"); } // Build the hub URL with API key query parameter string hubUrl = _options.HubUrl; var separator = hubUrl.Contains('?') ? \"&\" : \"?\"; hubUrl = $\"{hubUrl}{separator}api_key={Uri.EscapeDataString(_options.ApiKey)}\"; Features: ✅ Required API key authentication via api_key query parameter ✅ Automatic fallback to global API_KEY configuration ✅ Allows custom headers for additional configuration ✅ Automatic reconnection with authentication persistence ✅ Fail-fast validation if API key is missing ⚙️ Configuration Unified Configuration File appsettings.example.json - Single configuration file for all settings: { \"TokenizerUrl\": \"http://localhost:8000\", \"ConnectionStrings\": { \"JiroContext\": \"\" }, \"Whitelist\": true, \"Gpt\": { \"Enable\": true, \"BaseUrl\": \"https://api.openai.com/v1/\", \"AuthToken\": \"YourOpenAiToken\", \"Organization\": \"\", \"FineTune\": false, \"UseChatGpt\": true, \"ChatGpt\": { \"SystemMessage\": \"I want you to act as personal assistant called Jiro. You are friendly, funny and sarcastic. You can ask me anything you want and engage in conversation.\" }, \"SingleGpt\": { \"TokenLimit\": 500, \"ContextMessage\": \"User$ \", \"Stop\": \"Jiro$ \", \"Model\": \"text-davinci-003\" } }, \"Modules\": {}, \"RequiredModules\": {}, \"ApiKey\": \"your-api-key-here\", \"JiroApi\": \"https://localhost:18092\", \"WebSocket\": { \"HubUrl\": \"https://localhost:5001/instanceHub\", \"ReconnectionDelayMs\": 5000, \"MaxReconnectionAttempts\": 5, \"HandshakeTimeoutMs\": 15000, \"KeepAliveIntervalMs\": 15000, \"ServerTimeoutMs\": 30000, \"ApiKey\": \"your-api-key-here\", \"Headers\": { \"User-Agent\": \"Jiro-Bot/1.0\" } }, \"Grpc\": { \"ServerUrl\": \"https://localhost:5001\", \"TimeoutMs\": 30000, \"MaxRetries\": 3 } } Environment Variables The system reads authentication credentials from: API_KEY: Used for both gRPC and WebSocket authentication JIRO_API: Base URL for the JiroCloud API Configuration Priority WebSocket:ApiKey (if specified in WebSocket section) API_KEY (global fallback) Validation error (if neither is provided) 🔄 Authentication Flow 1. Application Startup %%{init: { \"theme\": \"base\", \"themeVariables\": { \"background\": \"#FFFFFF\", \"primaryColor\": \"#2E7D32\", \"primaryTextColor\": \"#000000\", \"primaryBorderColor\": \"#1B5E20\", \"lineColor\": \"#424242\", \"sectionBkgColor\": \"#E8F5E9\", \"altSectionBkgColor\": \"#C8E6C9\", \"gridColor\": \"#E0E0E0\", \"secondaryColor\": \"#1976D2\", \"tertiaryColor\": \"#7B1FA2\", \"actorBkg\": \"#E3F2FD\", \"actorBorder\": \"#1565C0\", \"actorTextColor\": \"#000000\", \"activationBkgColor\": \"#FFF3E0\", \"activationBorderColor\": \"#E65100\", \"noteBkgColor\": \"#FFFDE7\", \"noteBorderColor\": \"#F57C00\", \"noteTextColor\": \"#000000\" } }}%% sequenceDiagram participant App as Jiro App participant Config as Configuration participant gRPC as gRPC Client participant WS as WebSocket Client App->>Config: Load API_KEY & JIRO_API App->>Config: Validate API_KEY is present App->>gRPC: Configure with API key gRPC->>gRPC: Add X-Api-Key to all requests App->>WS: Configure with API key WS->>WS: Validate API key is present WS->>WS: Add api_key query parameter Note over App: Authentication ready for both channels 2. Request Authentication gRPC Requests %%{init: { \"theme\": \"base\", \"themeVariables\": { \"background\": \"#FFFFFF\", \"primaryColor\": \"#2E7D32\", \"primaryTextColor\": \"#000000\", \"primaryBorderColor\": \"#1B5E20\", \"lineColor\": \"#424242\", \"sectionBkgColor\": \"#E8F5E9\", \"altSectionBkgColor\": \"#C8E6C9\", \"gridColor\": \"#E0E0E0\", \"secondaryColor\": \"#1976D2\", \"tertiaryColor\": \"#7B1FA2\", \"actorBkg\": \"#E3F2FD\", \"actorBorder\": \"#1565C0\", \"actorTextColor\": \"#000000\", \"activationBkgColor\": \"#FFF3E0\", \"activationBorderColor\": \"#E65100\", \"noteBkgColor\": \"#FFFDE7\", \"noteBorderColor\": \"#F57C00\", \"noteTextColor\": \"#000000\" } }}%% sequenceDiagram participant Client as Jiro Client participant gRPC as gRPC Service participant Server as JiroCloud Client->>gRPC: SendCommandResult() gRPC->>gRPC: Add X-Api-Key header gRPC->>Server: gRPC call with authentication Server->>Server: Validate API key Server->>gRPC: Response gRPC->>Client: Result WebSocket Connection %%{init: { \"theme\": \"base\", \"themeVariables\": { \"background\": \"#FFFFFF\", \"primaryColor\": \"#2E7D32\", \"primaryTextColor\": \"#000000\", \"primaryBorderColor\": \"#1B5E20\", \"lineColor\": \"#424242\", \"sectionBkgColor\": \"#E8F5E9\", \"altSectionBkgColor\": \"#C8E6C9\", \"gridColor\": \"#E0E0E0\", \"secondaryColor\": \"#1976D2\", \"tertiaryColor\": \"#7B1FA2\", \"actorBkg\": \"#E3F2FD\", \"actorBorder\": \"#1565C0\", \"actorTextColor\": \"#000000\", \"activationBkgColor\": \"#FFF3E0\", \"activationBorderColor\": \"#E65100\", \"noteBkgColor\": \"#FFFDE7\", \"noteBorderColor\": \"#F57C00\", \"noteTextColor\": \"#000000\", \"loopTextColor\": \"#D5D8DA\" } }}%% sequenceDiagram participant Client as Jiro Client participant WS as SignalR Client participant Hub as SignalR Hub Client->>WS: StartAsync() WS->>WS: Validate API key is present WS->>WS: Add api_key to connection URL WS->>Hub: Connect with API key parameter Hub->>Hub: Validate API key Hub->>WS: Connection established loop Command Processing Hub->>WS: ReceiveCommand WS->>Client: Process command Client->>gRPC: Send result (with API key) end 🛡️ Security Best Practices ✅ Already Implemented Unified Authentication: Single API key for both gRPC and WebSocket channels Required Validation: Application fails fast if API key is missing Environment Support: Supports both development and production credentials Git Exclusion: Sensitive configuration files excluded from version control Connection Security: HTTP/2 with keep-alive for efficient secure connections Automatic Retry: Built-in retry mechanisms with authentication persistence 🔧 Configuration Security Use Environment Variables in production: export API_KEY=\"your-production-api-key\" export JIRO_API=\"https://production-jiro-cloud.com\" Secure API Key Storage: { \"ApiKey\": \"$(JIRO_API_KEY)\" } Rotate Credentials Regularly: Update API keys periodically 🚨 Troubleshooting Authentication Failures Missing API Key: Error: \"Please provide API_KEY\" Error: \"API key is required for WebSocket authentication\" Solution: Set API_KEY environment variable or add it to appsettings.json Invalid API Key: Error: gRPC authentication failed Error: WebSocket connection failed with 401 Unauthorized Solution: Verify your API key is correct and has proper permissions Configuration Not Found: Error: \"Couldn't connect to API\" Solution: Ensure JIRO_API environment variable is set Testing Authentication Use the test mode to verify authentication setup: dotnet run --test-mode This will use dummy credentials for testing the authentication flow. 📝 Quick Setup To set up authentication for your Jiro client: ✅ Get your API key from JiroCloud dashboard ✅ Set environment variable: API_KEY=\"your-api-key-here\" ✅ Set API URL: JIRO_API=\"https://your-jiro-cloud.com\" ✅ Run the application - authentication will work automatically Alternative: Copy appsettings.example.json to appsettings.json and fill in your API key. The system handles all the complexity of attaching credentials to requests, managing connections, and handling authentication failures with retries. No separate token or additional configuration files needed!"
  },
  "documentation/command-flow.html": {
    "href": "documentation/command-flow.html",
    "title": "Command Flow Architecture | Jiro Documentation",
    "keywords": "Command Flow Architecture Overview Jiro implements a sophisticated command execution pipeline that handles command processing from reception through completion. This document details the complete command flow, from initial WebSocket reception through gRPC result transmission, including all intermediate processing steps and error handling mechanisms. Key Updates (v1.0.0-beta) Client-side session ID generation: Sessions are now created on the client side Enhanced error handling: Improved command synchronization and error recovery Service separation: SessionManager and MessageCacheService now handle session/message operations Improved WebSocket contracts: Using IJiroInstance interface for better type safety Command Flow Pipeline High-Level Flow %%{init: { \"theme\": \"base\", \"themeVariables\": { \"background\": \"#FFFFFF\", \"primaryColor\": \"#2E7D32\", \"primaryTextColor\": \"#000000\", \"primaryBorderColor\": \"#1B5E20\", \"lineColor\": \"#424242\", \"sectionBkgColor\": \"#E8F5E9\", \"altSectionBkgColor\": \"#C8E6C9\", \"gridColor\": \"#E0E0E0\", \"secondaryColor\": \"#1976D2\", \"tertiaryColor\": \"#7B1FA2\" } }}%% flowchart TB subgraph \"Jiro Cloud Server\" CloudCmd[Command Dispatch] CloudGrpc[gRPC Result Reception] end subgraph \"Jiro Client - Reception Layer\" WSHub[SignalR Hub] WSConn[WebSocketConnection] WSService[JiroWebSocketService] end subgraph \"Jiro Client - Processing Layer\" Scope[Service Scope Creation] Context[Command Context Setup] Handler[Command Handler] Execution[Command Execution] end subgraph \"Jiro Client - Response Layer\" ResultProc[Result Processing] GrpcService[JiroGrpcService] GrpcClient[gRPC Client] end CloudCmd -->|WebSocket| WSHub WSHub --> WSConn WSConn --> WSService WSService --> Scope Scope --> Context Context --> Handler Handler --> Execution Execution --> ResultProc ResultProc --> GrpcService GrpcService --> GrpcClient GrpcClient -->|gRPC Response| CloudGrpc %% High Contrast Styling classDef cloudStyle fill:#9C27B0,stroke:#4A148C,stroke-width:2px,color:#FFFFFF classDef receptionStyle fill:#2196F3,stroke:#0D47A1,stroke-width:2px,color:#FFFFFF classDef processingStyle fill:#FF9800,stroke:#E65100,stroke-width:2px,color:#000000 classDef responseStyle fill:#4CAF50,stroke:#1B5E20,stroke-width:2px,color:#FFFFFF class CloudCmd,CloudGrpc cloudStyle class WSHub,WSConn,WSService receptionStyle class Scope,Context,Handler,Execution processingStyle class ResultProc,GrpcService,GrpcClient responseStyle Detailed Command Execution Flow 1. Command Reception Phase %%{init: { \"theme\": \"base\", \"themeVariables\": { \"background\": \"#FFFFFF\", \"primaryColor\": \"#2E7D32\", \"primaryTextColor\": \"#000000\", \"primaryBorderColor\": \"#1B5E20\", \"lineColor\": \"#424242\", \"sectionBkgColor\": \"#E8F5E9\", \"altSectionBkgColor\": \"#C8E6C9\", \"gridColor\": \"#E0E0E0\", \"secondaryColor\": \"#1976D2\", \"tertiaryColor\": \"#7B1FA2\", \"actorBkg\": \"#E3F2FD\", \"actorBorder\": \"#1565C0\", \"actorTextColor\": \"#000000\", \"activationBkgColor\": \"#FFF3E0\", \"activationBorderColor\": \"#E65100\", \"noteBkgColor\": \"#FFFDE7\", \"noteBorderColor\": \"#F57C00\", \"noteTextColor\": \"#000000\" } }}%% sequenceDiagram participant Server as Jiro Cloud participant SignalR as SignalR Hub participant WSConn as WebSocketConnection participant WSService as JiroWebSocketService participant Queue as Command Queue Server->>SignalR: Send Command Message Note over SignalR: JSON Deserialization<br/>CommandMessage Object SignalR->>WSConn: CommandReceived Event Note over WSConn: Event Handler Setup<br/>via JiroClientBase WSConn->>WSService: HandleCommandAsync() Note over WSService: Command Validation<br/>Queue Monitoring WSService->>Queue: Add Command (CommandSyncId) Note over Queue: Active Commands Tracking<br/>Metrics Increment Command Message Structure The incoming command follows this structure: interface CommandMessage { instanceId: string; // Target Jiro instance identifier command: string; // Command text to execute commandSyncId: string; // Unique synchronization identifier sessionId: string; // Chat session identifier (client-generated in v1.0.0-beta) parameters: Record<string, string>; // Additional command parameters } 2. Service Scope and Context Setup %%{init: { \"theme\": \"base\", \"themeVariables\": { \"background\": \"#FFFFFF\", \"primaryColor\": \"#2E7D32\", \"primaryTextColor\": \"#000000\", \"primaryBorderColor\": \"#1B5E20\", \"lineColor\": \"#424242\", \"sectionBkgColor\": \"#E8F5E9\", \"altSectionBkgColor\": \"#C8E6C9\", \"gridColor\": \"#E0E0E0\", \"secondaryColor\": \"#1976D2\", \"tertiaryColor\": \"#7B1FA2\" } }}%% flowchart TD Start[Command Received] --> CreateScope[Create AsyncServiceScope] CreateScope --> ResolveContext[Resolve ICommandContext] ResolveContext --> ResolveHandler[Resolve ICommandHandlerService] ResolveHandler --> ResolveGrpc[Resolve IJiroGrpcService] ResolveGrpc --> SetInstance[Set Current Instance ID] SetInstance --> SetSession[Set Session ID] SetSession --> SetParams[Set Command Parameters] SetParams --> Ready[Context Ready for Execution] %% High Contrast Styling classDef setupStyle fill:#2196F3,stroke:#0D47A1,stroke-width:2px,color:#FFFFFF classDef resolveStyle fill:#FF9800,stroke:#E65100,stroke-width:2px,color:#000000 classDef configStyle fill:#4CAF50,stroke:#1B5E20,stroke-width:2px,color:#FFFFFF class CreateScope setupStyle class ResolveContext,ResolveHandler,ResolveGrpc resolveStyle class SetInstance,SetSession,SetParams,Ready configStyle Context Configuration Details // Command context setup in JiroWebSocketService commandContext.SetCurrentInstance(commandMessage.InstanceId); commandContext.SetSessionId(commandMessage.SessionId); commandContext.SetData(commandMessage.Parameters.Select(kvp => new KeyValuePair<string, object>(kvp.Key, kvp.Value))); 3. Command Execution Phase %%{init: { \"theme\": \"base\", \"themeVariables\": { \"background\": \"#FFFFFF\", \"primaryColor\": \"#2E7D32\", \"primaryTextColor\": \"#000000\", \"primaryBorderColor\": \"#1B5E20\", \"lineColor\": \"#424242\", \"sectionBkgColor\": \"#E8F5E9\", \"altSectionBkgColor\": \"#C8E6C9\", \"gridColor\": \"#E0E0E0\", \"secondaryColor\": \"#1976D2\", \"tertiaryColor\": \"#7B1FA2\", \"actorBkg\": \"#E3F2FD\", \"actorBorder\": \"#1565C0\", \"actorTextColor\": \"#000000\", \"activationBkgColor\": \"#FFF3E0\", \"activationBorderColor\": \"#E65100\", \"noteBkgColor\": \"#FFFDE7\", \"noteBorderColor\": \"#F57C00\", \"noteTextColor\": \"#000000\" } }}%% sequenceDiagram participant WSService as JiroWebSocketService participant Context as ICommandContext participant Handler as ICommandHandlerService participant Parser as Command Parser participant Executor as Command Executor participant Plugins as Plugin Commands WSService->>Handler: ExecuteCommandAsync(scope, command) Handler->>Parser: Parse Command String Parser->>Handler: Command Metadata Handler->>Context: Get Current Session/Instance Context->>Handler: Context Data Handler->>Executor: Route to Command Executor alt Built-in Command Executor->>Executor: Execute Core Command else Plugin Command Executor->>Plugins: Execute Plugin Command Plugins->>Executor: Plugin Result end Executor->>Handler: Command Result Handler->>WSService: CommandResponse Object Note over WSService: Result Contains:<br/>• Command Name<br/>• Command Type<br/>• Success Status<br/>• Result Data Command Processing Pipeline Command Parsing: Text command parsed into executable format Command Resolution: Determine target command handler (core vs plugin) Context Injection: Current session and instance data provided Command Execution: Actual business logic execution Result Formatting: Output formatted for transmission 4. Result Processing and Transmission %%{init: { \"theme\": \"base\", \"themeVariables\": { \"background\": \"#FFFFFF\", \"primaryColor\": \"#2E7D32\", \"primaryTextColor\": \"#000000\", \"primaryBorderColor\": \"#1B5E20\", \"lineColor\": \"#424242\", \"sectionBkgColor\": \"#E8F5E9\", \"altSectionBkgColor\": \"#C8E6C9\", \"gridColor\": \"#E0E0E0\", \"secondaryColor\": \"#1976D2\", \"tertiaryColor\": \"#7B1FA2\", \"actorBkg\": \"#E3F2FD\", \"actorBorder\": \"#1565C0\", \"actorTextColor\": \"#000000\", \"activationBkgColor\": \"#FFF3E0\", \"activationBorderColor\": \"#E65100\", \"noteBkgColor\": \"#FFFDE7\", \"noteBorderColor\": \"#F57C00\", \"noteTextColor\": \"#000000\" } }}%% sequenceDiagram participant WSService as JiroWebSocketService participant GrpcService as JiroGrpcService participant Context as ICommandContext participant ProtoClient as gRPC Client participant Server as Jiro Cloud WSService->>Context: Get Final Session ID Context->>WSService: Updated Session ID alt Successful Execution WSService->>GrpcService: SendCommandResultAsync() Note over GrpcService: Convert to ClientMessage<br/>Protobuf Format else Failed Execution WSService->>GrpcService: SendCommandErrorAsync() Note over GrpcService: Create Error Response<br/>Protobuf Format end GrpcService->>GrpcService: CreateMessage() Note over GrpcService: Data Type Detection:<br/>• Text/JSON<br/>• Graph Data<br/>• Error Response GrpcService->>ProtoClient: SendCommandResultAsync() loop Retry Logic (Max 3 attempts) ProtoClient->>Server: gRPC Call with ClientMessage Server->>ProtoClient: CommandResultResponse alt Success Response Note over ProtoClient: Operation Complete else Error Response Note over ProtoClient: Exponential Backoff<br/>Retry Attempt end end ProtoClient->>GrpcService: Final Result GrpcService->>WSService: Transmission Complete Protobuf Message Structure The result is converted to this protobuf structure: message ClientMessage { string commandSyncId = 6; string commandName = 1; string sessionId = 8; DataType dataType = 2; bool isSuccess = 5; oneof result { TextResult textResult = 3; GraphResult graphResult = 4; } } enum DataType { TEXT = 0; GRAPH = 1; } message TextResult { string response = 1; TextType textType = 2; } enum TextType { PLAIN = 0; JSON = 1; BASE64 = 2; MARKDOWN = 3; HTML = 4; } 5. Resource Cleanup and Monitoring %%{init: { \"theme\": \"base\", \"themeVariables\": { \"background\": \"#FFFFFF\", \"primaryColor\": \"#2E7D32\", \"primaryTextColor\": \"#000000\", \"primaryBorderColor\": \"#1B5E20\", \"lineColor\": \"#424242\", \"sectionBkgColor\": \"#E8F5E9\", \"altSectionBkgColor\": \"#C8E6C9\", \"gridColor\": \"#E0E0E0\", \"secondaryColor\": \"#1976D2\", \"tertiaryColor\": \"#7B1FA2\" } }}%% flowchart TD Complete[Command Execution Complete] --> UpdateMetrics[Update Command Metrics] UpdateMetrics --> RemoveFromQueue[Remove from Active Commands] RemoveFromQueue --> DisposeScope[Dispose Service Scope] DisposeScope --> CleanupContext[Cleanup Command Context] CleanupContext --> CleanupGrpc[Cleanup gRPC Service] CleanupGrpc --> FinalMetrics[Final Metrics Update] FinalMetrics --> LogResult[Log Command Completion] LogResult --> Ready[Ready for Next Command] %% Horizon Theme Styling classDef cleanupStyle fill:#FCD4B8,stroke:#E29A6B,stroke-width:2px,color:#06060C classDef metricsStyle fill:#26BBD9,stroke:#1A9CB8,stroke-width:2px,color:#06060C classDef completeStyle fill:#27D797,stroke:#21BFC2,stroke-width:2px,color:#06060C class DisposeScope,CleanupContext,CleanupGrpc cleanupStyle class UpdateMetrics,RemoveFromQueue,FinalMetrics metricsStyle class LogResult,Ready completeStyle Error Handling Flow Exception Processing Pipeline %%{init: { \"theme\": \"base\", \"themeVariables\": { \"background\": \"#FFFFFF\", \"primaryColor\": \"#2E7D32\", \"primaryTextColor\": \"#000000\", \"primaryBorderColor\": \"#1B5E20\", \"lineColor\": \"#424242\", \"sectionBkgColor\": \"#E8F5E9\", \"altSectionBkgColor\": \"#C8E6C9\", \"gridColor\": \"#E0E0E0\", \"secondaryColor\": \"#1976D2\", \"tertiaryColor\": \"#7B1FA2\" } }}%% flowchart TD Exception[Exception Thrown] --> Catch[Exception Caught] Catch --> LogError[Log Error Details] LogError --> CreateErrorScope[Create Error Scope] CreateErrorScope --> GetSessionId[Get Final Session ID] GetSessionId --> SendError[Send Error via gRPC] SendError --> UpdateFailedCount[Update Failed Commands Count] UpdateFailedCount --> CleanupError[Cleanup Resources] CleanupError --> RemoveFromQueue[Remove from Active Commands] %% Error types Catch --> ParseError{Command Parse Error?} Catch --> ExecutionError{Execution Error?} Catch --> GrpcError{gRPC Send Error?} ParseError -->|Yes| SendError ExecutionError -->|Yes| SendError GrpcError -->|Yes| LogGrpcFailure[Log gRPC Failure] LogGrpcFailure --> UpdateFailedCount %% Horizon Theme Styling classDef errorStyle fill:#E95378,stroke:#C7455C,stroke-width:2px,color:#FCD4B8 classDef processStyle fill:#FCD4B8,stroke:#E29A6B,stroke-width:2px,color:#06060C classDef cleanupStyle fill:#26BBD9,stroke:#1A9CB8,stroke-width:2px,color:#06060C class Exception,ParseError,ExecutionError,GrpcError errorStyle class Catch,LogError,SendError processStyle class UpdateFailedCount,CleanupError,RemoveFromQueue cleanupStyle Error Response Structure // Error response creation in JiroGrpcService var errorResult = new CommandResponse { CommandName = \"Error\", CommandType = Jiro.Commands.CommandType.Text, IsSuccess = false, Result = Jiro.Commands.Results.TextResult.Create(errorMessage) }; Command Queue Monitoring Real-time Metrics Tracking %%{init: { \"theme\": \"base\", \"themeVariables\": { \"background\": \"#FFFFFF\", \"primaryColor\": \"#2E7D32\", \"primaryTextColor\": \"#000000\", \"primaryBorderColor\": \"#1B5E20\", \"lineColor\": \"#424242\", \"sectionBkgColor\": \"#E8F5E9\", \"altSectionBkgColor\": \"#C8E6C9\", \"gridColor\": \"#E0E0E0\", \"secondaryColor\": \"#1976D2\", \"tertiaryColor\": \"#7B1FA2\" } }}%% graph TB subgraph \"Command Metrics\" ActiveCount[Active Command Count] TotalProcessed[Total Commands Processed] SuccessfulCount[Successful Commands] FailedCount[Failed Commands] end subgraph \"Queue Operations\" AddCommand[Command Started] RemoveCommand[Command Completed] IncrementSuccess[Success Counter++] IncrementFailed[Failed Counter++] end subgraph \"Monitoring Interface\" Monitor[ICommandQueueMonitor] ActiveIds[Active Command IDs] Metrics[Real-time Metrics] end AddCommand --> ActiveCount RemoveCommand --> ActiveCount IncrementSuccess --> SuccessfulCount IncrementFailed --> FailedCount ActiveCount --> Monitor TotalProcessed --> Monitor SuccessfulCount --> Monitor FailedCount --> Monitor Monitor --> ActiveIds Monitor --> Metrics %% Horizon Theme Styling classDef metricsStyle fill:#26BBD9,stroke:#1A9CB8,stroke-width:2px,color:#06060C classDef operationsStyle fill:#FCD4B8,stroke:#E29A6B,stroke-width:2px,color:#06060C classDef interfaceStyle fill:#27D797,stroke:#21BFC2,stroke-width:2px,color:#06060C class ActiveCount,TotalProcessed,SuccessfulCount,FailedCount metricsStyle class AddCommand,RemoveCommand,IncrementSuccess,IncrementFailed operationsStyle class Monitor,ActiveIds,Metrics interfaceStyle Metrics Implementation // Command queue monitoring in JiroWebSocketService private readonly ConcurrentDictionary<string, DateTime> _activeCommands = new(); private long _totalCommandsProcessed = 0; private long _successfulCommands = 0; private long _failedCommands = 0; // Metrics properties public int ActiveCommandCount => _activeCommands.Count; public IEnumerable<string> ActiveCommandIds => _activeCommands.Keys; public long TotalCommandsProcessed => _totalCommandsProcessed; public long SuccessfulCommands => _successfulCommands; public long FailedCommands => _failedCommands; Concurrency and Threading Thread Safety Considerations %%{init: { \"theme\": \"base\", \"themeVariables\": { \"background\": \"#FFFFFF\", \"primaryColor\": \"#2E7D32\", \"primaryTextColor\": \"#000000\", \"primaryBorderColor\": \"#1B5E20\", \"lineColor\": \"#424242\", \"sectionBkgColor\": \"#E8F5E9\", \"altSectionBkgColor\": \"#C8E6C9\", \"gridColor\": \"#E0E0E0\", \"secondaryColor\": \"#1976D2\", \"tertiaryColor\": \"#7B1FA2\" } }}%% graph TB subgraph \"Thread-Safe Components\" ConcurrentDict[ConcurrentDictionary<br/>Active Commands] InterlockedCounters[Interlocked Counters<br/>Command Metrics] ScopedServices[Scoped Services<br/>Per Command] end subgraph \"Threading Patterns\" AsyncAwait[Async/Await Pattern] TaskRun[Task.Run for Background] Semaphores[Semaphores for Connection] end subgraph \"Isolation Mechanisms\" ServiceScope[Service Scope Isolation] CommandContext[Command Context Isolation] GrpcScoped[Scoped gRPC Services] end ConcurrentDict --> ServiceScope InterlockedCounters --> CommandContext ScopedServices --> GrpcScoped AsyncAwait --> ServiceScope TaskRun --> CommandContext Semaphores --> GrpcScoped %% Horizon Theme Styling classDef threadSafeStyle fill:#27D797,stroke:#21BFC2,stroke-width:2px,color:#06060C classDef patternStyle fill:#26BBD9,stroke:#1A9CB8,stroke-width:2px,color:#06060C classDef isolationStyle fill:#FCD4B8,stroke:#E29A6B,stroke-width:2px,color:#06060C class ConcurrentDict,InterlockedCounters,ScopedServices threadSafeStyle class AsyncAwait,TaskRun,Semaphores patternStyle class ServiceScope,CommandContext,GrpcScoped isolationStyle Concurrent Command Processing Multiple Commands: Can process multiple commands simultaneously Thread Isolation: Each command gets its own service scope and context Resource Safety: Thread-safe collections and atomic operations Connection Management: Semaphores protect WebSocket connection operations Performance Characteristics Processing Metrics Metric Typical Value Notes Command Reception Latency < 10ms WebSocket to service handler Service Scope Creation < 5ms Dependency injection overhead Command Execution Time Variable Depends on command complexity gRPC Transmission Time 10-100ms Network dependent Resource Cleanup Time < 5ms Service scope disposal Scalability Considerations Memory Usage: Scoped services prevent memory leaks Connection Limits: Single WebSocket, multiple gRPC calls Command Throughput: Limited by command execution time Error Recovery: Automatic retry and reconnection mechanisms Resource Management: Proper disposal patterns throughout Integration Points Command Handler Integration // Custom command handler registration services.RegisterCommands(nameof(ChatCommand.Chat)); // Command execution flow var result = await _commandHandler.ExecuteCommandAsync( scope.ServiceProvider, commandMessage.Command); Context Provider Integration // Command context setup commandContext.SetCurrentInstance(commandMessage.InstanceId); commandContext.SetSessionId(commandMessage.SessionId); commandContext.SetData(commandMessage.Parameters.Select(kvp => new KeyValuePair<string, object>(kvp.Key, kvp.Value))); gRPC Service Integration // gRPC client configuration services.AddGrpcClient<JiroHubProtoClient>(\"JiroClient\", options => { options.Address = new Uri(jiroCloudOptions.Grpc.ServerUrl); }) .AddCallCredentials((context, metadata) => { metadata.Add(\"X-Api-Key\", jiroCloudOptions.ApiKey); return Task.CompletedTask; }); Best Practices Command Flow Optimization Minimize Scope Lifetime: Create and dispose service scopes quickly Async All the Way: Use async/await throughout the pipeline Error Boundary: Catch exceptions at the service boundary Resource Cleanup: Always dispose scoped services properly Monitoring Integration: Track metrics at key pipeline points Error Handling Guidelines Graceful Degradation: Continue processing other commands on failures Comprehensive Logging: Log at each major pipeline stage Retry Logic: Implement exponential backoff for transient failures Context Preservation: Maintain command context through error flows Cleanup Guarantee: Ensure resources are cleaned up even on errors This command flow architecture provides a robust, scalable, and maintainable pipeline for processing commands in the Jiro application, with comprehensive error handling, monitoring, and resource management capabilities."
  },
  "documentation/database-schema.html": {
    "href": "documentation/database-schema.html",
    "title": "Database Schema | Jiro Documentation",
    "keywords": "Database Schema Overview Jiro uses Entity Framework Core with a relational database to store conversation data, user information, and session management. Core Tables Users and Authentication AppUser - User accounts and profile information AppRole - User roles and permissions AppUserRole - Many-to-many relationship between users and roles Conversation Management ChatSession - Individual chat sessions between users and the AI Message - Individual messages within chat sessions Entity Relationships AppUser (1) ←→ (Many) ChatSession ChatSession (1) ←→ (Many) Message AppUser (Many) ←→ (Many) AppRole (via AppUserRole) AppUser (1) ←→ (Many) RefreshToken Message Types The system supports different message types: User messages AI assistant responses System messages Error messages Database Configuration The database context is configured in JiroContext.cs with: Entity configurations Relationship mappings Database constraints Indexing for performance For implementation details, see the Infrastructure namespace in the API documentation."
  },
  "documentation/index.html": {
    "href": "documentation/index.html",
    "title": "📚 Jiro Documentation | Jiro Documentation",
    "keywords": "📚 Jiro Documentation Welcome to the Jiro AI Assistant documentation. This is the official documentation for v1.0.0-beta \"Kakushin\" - a production-ready AI-powered personal assistant with real-time cloud integration, extensible plugin system, and enterprise-grade deployment capabilities. Latest Release: v1.0.0-beta (2025-01-08) - View Changelog 🏗️ Structure / ├── docs/ # Documentation content │ ├── api-index.md # API documentation index │ ├── project-description.md # Project overview │ ├── project-structure.md # Auto-generated project structure │ ├── user-guide.md # End-user documentation │ ├── workflow-pipelines.md # CI/CD workflows │ └── index.md # This file ├── _site/ # Generated documentation (after build) │ ├── docs/ # Documentation output │ ├── api/ # API reference output │ └── assets/ # Static assets (images, CSS, etc.) ├── assets/ # Source assets (logos, images) ├── docfx.json # DocFX configuration ├── toc.yml # Main navigation structure └── filterConfig.yml # API documentation filter 🚀 Building Documentation Locally Prerequisites .NET 9.0 SDK DocFX tool Setup Install DocFX: dotnet tool install -g docfx Navigate to the repository root: cd /path/to/Jiro Build the documentation: docfx docfx.json Serve locally (optional): docfx docfx.json --serve The documentation will be available at http://localhost:8080 🌐 Automatic Deployment The documentation is automatically deployed to GitHub Pages when changes are pushed to the main branch. The deployment is handled by the GitHub Actions workflow at .github/workflows/deploy-docs.yml. Deployment Triggers The documentation deployment is triggered by: Push to main branch with changes to: docs/** (any documentation files) docfx.json (DocFX configuration) .github/workflows/deploy-docs.yml (workflow file) Manual workflow dispatch (can be triggered manually from GitHub Actions) Deployment Process Checkout - Retrieves the latest code Setup .NET - Installs .NET 9.x SDK Install DocFX - Installs the latest DocFX tool Restore Dependencies - Restores .NET project dependencies for API docs Build Documentation - Generates the static site using DocFX Deploy to GitHub Pages - Publishes to GitHub Pages 📝 Content Guidelines Adding New Documentation Create your markdown file in the docs/ directory Add entry to toc.yml to include it in the navigation Use proper markdown formatting with headings, lists, and links Include emojis for visual appeal (following the existing style) Test locally before committing Markdown Style Guide Use descriptive headings with appropriate levels Include blank lines around headings and lists Use code blocks for commands and configuration Include links to related documentation Add emojis to section headers for visual organization API Documentation API documentation is automatically generated from XML comments in the .NET code. To improve API docs: Add XML documentation to all public classes, methods, and properties Use <summary>, <param>, <returns> tags appropriately Include <example> blocks for complex methods Document exceptions with <exception> tags 🔧 Configuration DocFX Configuration (docfx.json) Key configuration options: metadata.src: Source code paths for API documentation generation build.content: Documentation content files to include build.resource: Static resources (images, assets) build.output: Output directory for generated site globalMetadata: Site-wide settings and branding Customization To customize the documentation: Modify docfx.json for build configuration Update globalMetadata for site information Add custom templates in the template directory (if needed) Include custom CSS/JS in the resource files 🎯 Best Practices Documentation Writing Clear and Concise - Write for your audience Up-to-date - Keep documentation current with code changes Well-structured - Use consistent formatting and organization Searchable - Include relevant keywords and cross-references Maintenance Regular Updates - Review and update documentation regularly Link Validation - Ensure all links work correctly Accessibility - Use proper heading structure and alt text Performance - Optimize images and keep pages reasonably sized 🐛 Troubleshooting Common Issues DocFX build fails Check that all referenced files exist Validate JSON syntax in docfx.json Ensure .NET projects can be restored Missing API documentation Verify XML documentation is enabled in project files Check that projects build successfully Confirm correct paths in docfx.json Deployment fails Check GitHub Actions logs for specific errors Verify repository settings allow GitHub Pages Ensure workflow has necessary permissions Getting Help Check the DocFX documentation Review GitHub Actions workflow logs Examine the generated _site directory for build issues 📞 Support This documentation is part of an engineering thesis project. For questions about the documentation system or technical details, please refer to the main project documentation or open an issue in the repository."
  },
  "documentation/project-description.html": {
    "href": "documentation/project-description.html",
    "title": "🤖 Jiro - Advanced AI Virtual Assistant | Jiro Documentation",
    "keywords": "🤖 Jiro - Advanced AI Virtual Assistant 📋 Table of Contents Project Overview Architecture Core Technologies Core Services Command System Communication Protocols Infrastructure & Database Deployment & Docker AI & Machine Learning Testing Framework Development Workflow Project Structure 🌟 Project Overview Jiro v1.0.0-beta \"Kakushin\" is a production-ready, enterprise-grade AI virtual assistant platform that combines the power of Large Language Models (LLMs) with a robust custom command system and extensible plugin architecture. Built on modern .NET 9 technologies following Clean Architecture principles, Jiro provides a comprehensive solution for AI-powered assistance, featuring real-time bidirectional communication, intelligent conversation management, and cloud-native deployment capabilities. Key Features (v1.0.0-beta) AI-Powered Conversations: Integration with state-of-the-art LLMs for intelligent dialogue Plugin System: Extensible command architecture for custom functionality Real-time Communication: WebSocket + gRPC hybrid architecture for instant bidirectional streaming Real-time Log Streaming: Continuous log monitoring with StreamLogsAsync and batch delivery Enhanced Session Management: Client-side session ID generation with advanced caching Multi-Client Support: Web, CLI, and API interfaces with SignalR hub integration Service Architecture: Separated SessionManager, MessageCacheService, and LogsProviderService Intelligent Memory Management: Conversation history optimization and persona management Weather Integration: Real-time weather data with geolocation services Token Management: Advanced token counting and optimization for cost efficiency Docker Profiles: Multi-profile deployment (default, docs, full) with comprehensive environment configuration 90+ Configuration Options: Flexible deployment with JIRO_ prefixed environment variables 🏗️ Architecture Jiro follows a clean architecture pattern with clear separation of concerns: ┌─────────────────┐ ┌─────────────────┐ ┌─────────────────┐ │ Presentation │ │ Application │ │ Infrastructure│ │ │ │ │ │ │ │ • gRPC Services │◄──►│ • Services │◄──►│ • Repositories │ │ • Controllers │ │ • Commands │ │ • HTTP Clients │ │ • Client Apps │ │ • Handlers │ │ • Database │ └─────────────────┘ └─────────────────┘ └─────────────────┘ │ │ │ └──────────┬───────────────────────────────────────┘ │ ┌─────────────────┐ │ Domain │ │ │ │ • Models │ │ • Interfaces │ │ • Constants │ └─────────────────┘ 🔧 Core Technologies Backend Framework .NET 9.0: Latest .NET framework with performance improvements ASP.NET Core: Web API and hosting infrastructure Entity Framework Core: ORM for database operations gRPC: High-performance RPC framework for real-time communication AI & Machine Learning LLM Integration: Support for advanced language models via OpenAI API Custom Token Management: Tiktoken integration for token counting Conversation Optimization: Intelligent history management Communication & Protocols gRPC Streaming: Bidirectional streaming for real-time communication Protocol Buffers: Efficient serialization format HTTP/2: Modern HTTP protocol support Data & Caching MySQL 8.0: Primary relational database In-Memory Caching: High-performance memory caching Entity Framework Migrations: Database schema management Containerization & Deployment Docker: Multi-stage containerization Docker Compose: Orchestration for development and production Linux Containers: Optimized runtime environment 🛠️ Core Services Conversation Management ConversationCoreService Purpose: Core conversation logic with OpenAI integration Features: Direct chat completion with LLM models Token usage tracking and optimization Semaphore-based concurrency control Temperature and parameter management Key Methods: ChatAsync(): Full conversation with history ExchangeMessageAsync(): Single message exchange PersonalizedConversationService Purpose: Session-based personalized conversations Features: Session management and persistence Message history optimization Persona integration Cost tracking and optimization Advanced Capabilities: Advanced Capabilities Automatic history pruning when token limits are exceeded Dynamic persona updates based on conversation summaries Real-time pricing calculations Dynamic persona updates based on conversation summaries Real-time pricing calculations Message & Session Management (v1.0.0-beta) SessionManager Purpose: Dedicated chat session lifecycle management Features: Advanced session caching with 5-day default expiration Session state management with persistence and recovery Multi-session support with user-based isolation Session metadata tracking and analytics MessageCacheService Purpose: Specialized message operations and optimization Features: Message history optimization with performance-focused caching Message exchange handling with thread-safe operations Memory-efficient message storage with automatic cleanup Message retrieval optimization for large conversation histories CompositeMessageManager Purpose: Unified message management orchestration Features: Coordinates between SessionManager and MessageCacheService Provides high-level message operations with service abstraction Handles complex message workflows and cross-service coordination AI Persona System PersonaService Purpose: Dynamic AI personality management Features: Core persona message management Conversation summary integration Cache-based performance optimization Thread-safe persona updates Intelligence Features: Adaptive persona based on conversation history Automatic summary generation for long conversations Weather & Geolocation Services WeatherService Purpose: Real-time weather data integration Data Sources: Open-Meteo API: Weather forecasting data OpenStreetMap Nominatim: Geolocation services Features: Location-based weather queries Multi-day forecasting (up to 7 days) Structured weather data for graphing Temperature, rainfall, and wind speed tracking GeolocationService Purpose: City-to-coordinates conversion Features: City name to latitude/longitude resolution Support for international locations Error handling for invalid locations Command System Services CommandHandlerService Purpose: Plugin command execution and management Features: Command parsing with regex pattern matching Dynamic command discovery and execution Exception handling and error reporting Performance monitoring with execution timing Command Types: Text Commands: Simple text responses Graph Commands: Data visualization responses HelpService Purpose: Dynamic help system generation Features: Automatic help message generation from registered commands Command description and usage examples Runtime command discovery Infrastructure Services SemaphoreManager Purpose: Concurrency control for chat instances Features: Per-instance semaphore management Thread-safe operations Resource contention prevention HistoryOptimizerService Purpose: Intelligent conversation history management Features: Token-based optimization decisions Message summarization History pruning strategies ⚡ Command System Plugin Architecture Jiro uses a sophisticated plugin system based on the Jiro.Commands framework: Command Attributes [CommandModule(\"Weather\")] public class WeatherCommand : ICommandBase { [Command(\"weather\", CommandType.Graph, \"weather \\\"Location\\\" [daysRange]\", \"Shows weather forecast for the specified location\")] public async Task<ICommandResult> Weather(string location, int daysRange) { // Implementation } } Built-in Commands Chat Commands chat <message>: AI conversation getSessions: Retrieve user chat sessions getSessionHistory <sessionId>: Get specific session history reset: Clear current session Weather Commands weather \"Location\" [days]: Weather forecast with graphical data Returns temperature, rainfall, and wind speed Supports 1-7 day forecasting Includes current weather conditions Command Processing Pipeline Input Parsing: Regex-based token extraction Command Resolution: Dynamic command discovery Parameter Binding: Automatic parameter mapping Execution: Async command execution with error handling Result Formatting: Type-specific result formatting 📡 Communication Protocols gRPC Service Definition JiroHubProto Service service JiroHubProto { rpc GetUserSessions (Empty) returns (SessionsReply); rpc InstanceCommand (stream ClientMessage) returns (stream ServerMessage); rpc Hello (HelloRequest) returns (HelloReply); } Message Types ClientMessage: Command requests with parameters and session info ServerMessage: Command responses with execution results Result Types: TextResult: Simple text responses GraphResult: Data visualization with metadata Streaming Architecture Bidirectional Streaming: Real-time command execution Session Management: Per-session command queuing Error Handling: Graceful error propagation Communication Clients Python CLI Client (Jiro.Communication) Features: Interactive command-line interface Real-time streaming responses Graph visualization for weather data Color-coded output formatting Token API (Jiro.TokenApi) FastAPI-based service for token management Endpoints: /reduce: Message history optimization /tokenize: Token counting for cost estimation Features: Tiktoken integration for accurate LLM token counting Automatic message pruning when limits exceeded 🗄️ Infrastructure & Database Database Schema Jiro utilizes ASP.NET Core Identity for user management combined with custom business entities for conversation management. Core Database Tables Identity System AspNetUsers: User accounts with extended properties (AccountCreatedDate) AspNetRoles: System roles and permissions AspNetUserRoles: Many-to-many user-role relationships Conversation System ChatSessions: Conversation sessions with metadata Messages: Individual messages with type classification and user attribution Key Relationships Users 1:N RefreshTokens - Token-based authentication ChatSessions 1:N Messages - Session-based conversations Users M:N Roles - Role-based authorization For detailed database schema documentation, see Database Schema. Entity Framework Configuration Code-First Migrations: Version-controlled schema changes Connection String Management: Environment-based configuration Repository Pattern: Clean data access abstraction Caching Strategy In-Memory Cache: Fast access to frequently used data TTL-based Expiration: Automatic cache invalidation Cache Keys: Structured caching with prefixed keys 🐳 Deployment & Docker Multi-Stage Docker Build # Build Stage FROM mcr.microsoft.com/dotnet/sdk:9.0 AS build # ... build process # Runtime Stage FROM mcr.microsoft.com/dotnet/aspnet:9.0 AS runtime # ... optimized runtime environment Docker Compose Architecture services: jiro-kernel: # Main application mysql: # Database server # Future: jiro-tokenapi, jiro-communication Production Optimizations Self-contained deployment: No runtime dependencies Trimmed assemblies: Reduced image size Non-root user: Security best practices Health checks: Container health monitoring Volume mounts: Persistent data and logs 🧠 AI & Machine Learning OpenAI Integration Models: Multiple LLM options including latest generation models Temperature Control: Configurable response creativity (default: 0.6) Token Management: Advanced cost optimization Context Handling: Intelligent conversation context management Token Optimization Real-time Token Counting: Accurate cost prediction History Pruning: Automatic conversation trimming Cache Optimization: Reduced API calls through caching Cost Tracking: Per-message pricing calculations Conversation Intelligence Persona Management: Dynamic AI personality adaptation Summary Generation: Automatic conversation summarization Context Preservation: Intelligent history optimization Session Continuity: Seamless multi-session conversations 🧪 Testing Framework Comprehensive Test Suite Unit Tests: Service-level testing with mocking Integration Tests: End-to-end scenario testing Service Tests: Individual service validation Tested Components ConversationCoreServiceTests PersonalizedConversationServiceTests WeatherServiceTests CommandHandlerServiceTests MessageManagerTests PersonaServiceTests GeolocationServiceTests Testing Technologies xUnit: Primary testing framework Moq: Mocking framework for dependencies In-Memory Database: Isolated test data 🔄 Development Workflow Build & Run Process Configuration Setup: appsettings.json with OpenAI keys Database Migration: Automatic schema updates Service Registration: Dependency injection configuration gRPC Service Startup: Real-time communication initialization Development Tools Hot Reload: Real-time code updates Logging: Structured logging with Serilog Health Checks: Service health monitoring API Documentation: Auto-generated from gRPC proto files Plugin Development Reference Jiro.Commands NuGet package Implement ICommandBase interface Add command attributes Register in module configuration 📁 Project Structure Jiro/ ├── src/ # Source code │ ├── Jiro.Kernel/ # Main application kernel │ │ ├── Jiro.App/ # Web API & gRPC host (v0.1.2) │ │ ├── Jiro.Core/ # Business logic & services │ │ └── Jiro.Infrastructure/ # Data access & external services │ ├── Jiro.Communication/ # Python CLI client │ ├── Jiro.TokenApi/ # Token management FastAPI service │ ├── Jiro.Tests/ # Comprehensive test suite │ └── Main.sln # Solution file ├── .github/ # GitHub automation & workflows │ ├── workflows/ # CI/CD pipeline definitions │ │ ├── jiro-kernel-ci.yml # 🔧 .NET CI (build, test, quality gate) │ │ ├── create-release.yml # 🚀 Version-based releases & artifacts │ │ ├── docker-build.yml # 🐳 Container build & security scanning │ │ ├── markdown-lint.yml # 📝 Documentation quality assurance │ │ ├── jiro-kernel-security.yml # 🔒 Security vulnerability scanning │ │ ├── deploy-docs.yml # 📚 Documentation deployment │ │ └── jiro-kernel-performance.yml # 📊 Performance monitoring │ └── WORKFLOWS.md # Workflow documentation ├── docs/ # Documentation content │ ├── project-description.md # This comprehensive project overview │ ├── user-guide.md # End-user documentation │ ├── workflow-pipelines.md # ☁️ CI/CD automation documentation │ ├── database-schema.md # 🗄️ Complete database schema documentation │ ├── api-index.md # API documentation index │ └── README.md # Documentation setup guide ├── assets/ # Documentation assets (logos, images) ├── scripts/ # Build and deployment scripts ├── _site/ # DocFX build output (auto-generated) ├── api/ # Generated API documentation (auto-generated) ├── docfx.json # DocFX documentation configuration ├── toc.yml # Main navigation structure ├── index.md # Documentation homepage ├── docker-compose.yml # Container orchestration ├── filterConfig.yml # API documentation filter └── README.md # Project setup and usage guide 🔧 Core Application Architecture Jiro.Core Services (Business Logic Layer) Services/Conversation/: AI conversation management ConversationCoreService: Direct OpenAI integration PersonalizedConversationService: Session-based conversations HistoryOptimizerService: Token optimization Services/Weather/: Weather and geolocation services Services/MessageCache/: Session and message management Services/Persona/: AI personality system Services/CommandSystem/: Plugin command framework Services/Semaphore/: Concurrency control Jiro.App (Presentation Layer) Controllers/: Web API endpoints Services/: gRPC service implementations Configurator/: Application startup and dependency injection Proto/: Protocol buffer definitions Jiro.Infrastructure (Data Access Layer) Repositories/: Entity Framework repositories Migrations/: Database schema management JiroContext.cs: Database context configuration Command Modules (Plugin System) Commands/Chat/: Conversation commands (chat, getSessions, reset) Commands/Weather/: Weather data commands (weather) Commands/BaseCommands/: Command framework infrastructure Commands/Net/: Network utility commands 🚀 CI/CD Pipeline Architecture Automated Workflows Organization Pull Request → Multiple Validation Workflows (Parallel) ├── .NET CI: Build, Test, Format, Quality Gate ├── Docker Build: Container build & security scan ├── Markdown Lint: Documentation quality ├── Security Scan: CodeQL, Snyk, .NET audit └── Release Validation: Additional pre-merge checks Merge to Main → Production Workflows (Sequential) ├── Manual Version Control: Developer-controlled release timing ├── Release Artifacts: Multi-platform binaries (Linux, Windows, macOS) ├── Docker Push: Container registry deployment ├── Documentation Deploy: GitHub Pages update └── Security Monitoring: Ongoing vulnerability tracking Deployment Artifacts 🐳 Container Images: ghcr.io/huebyte/jiro-kernel:latest 📦 GitHub Releases: Manual version-controlled releases with multi-platform binaries Linux x64: jiro-kernel-vX.X.X-linux-x64.tar.gz Windows x64: jiro-kernel-vX.X.X-win-x64.zip macOS x64: jiro-kernel-vX.X.X-osx-x64.tar.gz 📚 Documentation: Live API docs on GitHub Pages 🔒 Security Reports: Continuous vulnerability monitoring 🛡️ Quality Assurance & Security Automated Quality Gates Pre-merge: Build verification, test execution, code formatting Security: CodeQL analysis, dependency scanning, container security Documentation: Markdown linting, API doc generation Performance: NuGet caching, parallel execution, smart triggers Development Best Practices Clean Architecture: Clear separation of concerns across layers Dependency Injection: Configured in Jiro.App/Configurator/ Entity Framework: Code-first migrations with repository pattern Testing: Comprehensive unit and integration test coverage Documentation: Auto-generated from XML comments and markdown This architecture ensures scalable development with automated quality assurance, security monitoring, and deployment automation through the comprehensive ☁️ CI/CD pipeline. Options/: Configuration models 🚀 Getting Started To get started with Jiro development: Clone the repository Configure OpenAI API key in appsettings.json Run database migrations Start the application with dotnet run Connect clients via gRPC or Python CLI For detailed setup instructions, refer to the main project README. Jiro represents a modern approach to AI assistant development as part of an engineering thesis project. It combines cutting-edge technologies with robust engineering practices to deliver a scalable, intelligent, and extensible platform for AI-powered assistance, demonstrating the practical application of clean architecture patterns and modern software development methodologies."
  },
  "documentation/scripts-reference.html": {
    "href": "documentation/scripts-reference.html",
    "title": "Scripts Reference | Jiro Documentation",
    "keywords": "Scripts Reference This document provides an overview of all development and automation scripts available in the Jiro AI Assistant project. Overview The scripts/ directory contains various PowerShell (.ps1) and Bash (.sh) scripts for development workflow automation, documentation generation, testing, and release management. All scripts are cross-platform compatible. Development Environment Scripts setup-dev.ps1 / setup-dev.sh Purpose: Automated development environment setup for new contributors What it does: Checks for required development tools (.NET SDK, Git, Node.js, Docker, PowerShell Core) Installs global .NET tools (DocFX) and Node.js tools (markdownlint-cli) Copies configuration files from examples (.env, appsettings.json) Restores .NET project dependencies Generates a DEV-SETUP.md guide with manual configuration steps Usage: # PowerShell .\\scripts\\setup-dev.ps1 # With options .\\scripts\\setup-dev.ps1 -Force -SkipToolCheck # Bash ./scripts/setup-dev.sh # With options ./scripts/setup-dev.sh --force --skip-tool-check Parameters: -SkipToolCheck / --skip-tool-check: Skip checking for required development tools -SkipDependencies / --skip-dependencies: Skip installing project dependencies -Force / --force: Overwrite existing configuration files -Verbose / --verbose: Show detailed output during setup Documentation Scripts docfx-gen.ps1 / docfx-gen.sh Purpose: Generate API documentation using DocFX What it does: Builds the DocFX documentation site from dev/docfx.json Outputs generated documentation to src/_site/ Supports both build-only and build-and-serve modes Usage: # PowerShell .\\scripts\\docfx-gen.ps1 # Build only .\\scripts\\docfx-gen.ps1 -Serve # Build and serve locally # Bash ./scripts/docfx-gen.sh # Build only ./scripts/docfx-gen.sh --serve # Build and serve locally Parameters: -Serve / --serve: Start a local web server after building documentation markdown-lint.ps1 / markdown-lint.sh Purpose: Lint markdown files for consistency and quality What it does: Runs markdownlint-cli on all markdown files in the project Uses configuration from src/.markdownlint.json Ignores generated files and build directories Supports fix mode for automatic corrections Usage: # PowerShell .\\scripts\\markdown-lint.ps1 # Check only .\\scripts\\markdown-lint.ps1 -Fix # Check and fix issues # Bash ./scripts/markdown-lint.sh # Check only ./scripts/markdown-lint.sh --fix # Check and fix issues Parameters: -Fix / --fix: Automatically fix markdown issues where possible generate-project-structure.ps1 / generate-project-structure.sh Purpose: Generate and update project structure documentation What it does: Uses eza (modern ls replacement) to generate a tree view of the project Auto-installs eza if not present (via cargo or winget) Outputs structure to docs/project-structure.md Filters out common ignore patterns (node_modules, .git, build artifacts) Usage: # PowerShell .\\scripts\\generate-project-structure.ps1 # Bash ./scripts/generate-project-structure.sh Testing and CI Scripts local-ci-test.ps1 / local-ci-test.sh Purpose: Run the complete CI/CD pipeline locally for testing What it does: Builds the .NET solution Runs all unit tests Generates documentation Lints markdown files Validates project structure Provides comprehensive error reporting Usage: # PowerShell .\\scripts\\local-ci-test.ps1 # Run all tests .\\scripts\\local-ci-test.ps1 -SkipBuild # Skip build step .\\scripts\\local-ci-test.ps1 -SkipTests # Skip unit tests .\\scripts\\local-ci-test.ps1 -SkipDocs # Skip documentation tests # Bash ./scripts/local-ci-test.sh # Run all tests ./scripts/local-ci-test.sh --skip-build # Skip build step ./scripts/local-ci-test.sh --skip-tests # Skip unit tests ./scripts/local-ci-test.sh --skip-docs # Skip documentation tests Parameters: -SkipBuild / --skip-build: Skip the build step -SkipTests / --skip-tests: Skip running unit tests -SkipDocs / --skip-docs: Skip documentation generation and linting -Verbose / --verbose: Show detailed output Release Management Scripts create-release.ps1 / create-release.sh Purpose: Automate the release process What it does: Validates the current state of the repository Updates version numbers in project files Creates git tags for releases Generates release notes Prepares release artifacts Usage: # PowerShell .\\scripts\\create-release.ps1 -Version \"1.2.3\" # Bash ./scripts/create-release.sh --version \"1.2.3\" Script Dependencies Required Tools .NET SDK: Required for building and running .NET projects Git: Required for version control operations PowerShell Core (recommended): For cross-platform PowerShell script execution Optional Tools Node.js: Required for markdown linting (markdownlint-cli) Docker: Required for containerized development and testing Cargo (Rust): For installing eza on systems without package managers Auto-Installed Tools The following tools are automatically installed by the scripts when needed: DocFX: .NET documentation generation tool markdownlint-cli: Markdown linting tool (if Node.js is available) eza: Modern directory listing tool Cross-Platform Compatibility All scripts are designed to work across platforms: Windows: Use PowerShell scripts (.ps1) with PowerShell Core or Windows PowerShell Linux/macOS: Use Bash scripts (.sh) or PowerShell scripts with PowerShell Core Path handling: Scripts automatically detect and use appropriate path separators Tool installation: Scripts use platform-appropriate package managers (winget, cargo, apt, brew, etc.) Configuration Files Scripts use and create the following configuration files: src/.env: Environment variables (copied from src/.env.example) src/Jiro.Kernel/Jiro.App/appsettings.json: Application settings (copied from example) src/.markdownlint.json: Markdown linting configuration dev/docfx.json: DocFX documentation configuration DEV-SETUP.md: Generated development setup guide (ignored by git) Error Handling All scripts include comprehensive error handling: Validation: Check for required tools and files before execution Fallbacks: Provide alternative methods when primary tools are unavailable Informative output: Clear success, warning, and error messages with color coding Exit codes: Proper exit codes for CI/CD integration Cleanup: Automatic cleanup of temporary files and state restoration Integration with CI/CD The scripts are designed to integrate seamlessly with GitHub Actions and other CI/CD systems: GitHub Actions: Used in .github/workflows/ for automated testing and deployment Exit codes: Proper exit codes for pipeline success/failure detection Logging: Structured output compatible with CI/CD log parsing Environment detection: Automatic detection of CI/CD environments Best Practices When using or modifying these scripts: Test locally: Always run local-ci-test before pushing changes Cross-platform testing: Test scripts on different operating systems when possible Error handling: Add appropriate error handling for new functionality Documentation: Update this reference when adding new scripts or parameters Consistency: Follow the established patterns for parameters and output formatting Troubleshooting Common Issues Tool not found: Run setup-dev to install required tools Permission denied: Make sure Bash scripts are executable (chmod +x) Path issues: Use the scripts from the project root directory Network issues: Some tools require internet access for installation Getting Help Run any script with -h or --help for usage information Check the DEV-SETUP.md file generated by setup-dev for configuration guidance Review the CI/CD logs in GitHub Actions for debugging pipeline issues For more detailed information about specific workflows, see Workflow Pipelines."
  },
  "documentation/user-guide.html": {
    "href": "documentation/user-guide.html",
    "title": "🤖 Jiro - Your AI Assistant: What It Does | Jiro Documentation",
    "keywords": "🤖 Jiro - Your AI Assistant: What It Does 🌟 What is Jiro? Imagine having a smart, helpful assistant that never gets tired, remembers your conversations, and can help you with everything from checking the weather to having meaningful discussions. That's Jiro - an AI-powered virtual assistant that combines the intelligence of advanced Large Language Models with powerful custom features to make your digital life easier. Think of Jiro as your personal AI companion that: Remembers who you are and your conversation history Learns your preferences over time Provides instant help with various tasks Speaks multiple \"languages\" - from casual chat to technical assistance Works wherever you are - on the web, in your terminal, or through APIs 💬 Having Conversations with Jiro Natural Dialogue Just like texting a friend, you can have natural conversations with Jiro. Ask questions, share thoughts, or simply chat about your day. Jiro understands context and maintains the flow of conversation, making interactions feel genuinely personal. Example interactions: \"How's the weather looking for my trip to Paris tomorrow?\" \"I'm feeling stressed about work. Can you help me think through this project?\" \"Explain quantum computing like I'm 10 years old\" \"What's a good recipe for dinner tonight?\" Memory That Matters Unlike many AI assistants that forget everything between conversations, Jiro remembers: Your previous conversations - Pick up where you left off days later Your preferences - Jiro learns how you like information presented Context from past interactions - No need to repeat background information Your personality - Jiro adapts its responses to match your communication style Smart Conversation Management Jiro automatically manages conversation flow by: Keeping relevant history while forgetting outdated information Summarizing long conversations to maintain context without overwhelming details Optimizing for cost by intelligently managing what information to keep Maintaining multiple conversation threads for different topics or projects 🌤️ Weather and Location Services Instant Weather Updates Ask Jiro about weather anywhere in the world, and get comprehensive information including: Current conditions - Temperature, wind, precipitation right now Detailed forecasts - Up to 7 days ahead with hourly breakdowns Visual weather data - Beautiful graphs showing temperature trends, rainfall patterns, and wind speeds Location intelligence - Just say \"Paris\" or \"New York\" - Jiro knows where you mean Smart Weather Insights Jiro doesn't just give you raw data. It provides: Contextual advice - \"It's going to rain this afternoon, you might want an umbrella\" Trend analysis - \"Temperatures are dropping over the weekend\" Planning assistance - \"Tuesday looks perfect for that outdoor event you mentioned\" Example weather requests: \"What's the weather like in Tokyo?\" \"Should I bring a jacket to London next week?\" \"Show me the weather forecast for my camping trip\" 🧠 Intelligent Features Adaptive Personality Jiro isn't just a robotic assistant - it has personality that adapts to you: Tone matching - Formal for business queries, casual for everyday chat Learning preferences - Notices if you prefer detailed explanations or quick summaries Relationship building - Develops a unique communication style based on your interactions Emotional intelligence - Recognizes when you need encouragement, information, or just someone to listen Cost-Conscious Operation Behind the scenes, Jiro is designed to be efficient: Smart token management - Only uses what's necessary for quality responses Conversation optimization - Automatically trims old, less relevant parts of long conversations Usage transparency - You can see how much each interaction costs (if you're curious) Efficient caching - Remembers frequently used information to reduce processing time Session Management Jiro organizes your interactions intelligently: Multiple conversation threads - Keep work discussions separate from personal chats Session continuity - Resume conversations even after closing and reopening Cross-device synchronization - Start a conversation on your phone, continue on your computer Privacy controls - Clear sensitive conversations when needed 🔧 How You Can Interact with Jiro Web Interface The easiest way to use Jiro is through its web interface: Clean, intuitive design - Just type and chat Real-time responses - See Jiro typing as it formulates responses Rich content display - Weather graphs, formatted text, and visual elements Session management - Easy access to your conversation history Command Line (For Tech Enthusiasts) If you're comfortable with terminals, Jiro offers a powerful command-line interface: Lightning-fast interaction - No web browser needed Colorful, organized output - Easy-to-read responses with visual formatting Graph visualization - Weather data and other visual information displayed in terminal Scriptable - Integrate Jiro into your workflows and automation API Access (For Developers) Developers can integrate Jiro into their own applications: gRPC streaming - Real-time communication for responsive apps RESTful endpoints - Standard web API access Token management - Built-in tools for cost optimization Extensible commands - Add your own custom functionality 🎯 Practical Use Cases Daily Assistant Tasks Weather planning - \"Should I bike to work or take the car?\" Quick information - \"What time is it in Sydney right now?\" Decision support - \"Help me choose between these restaurant options\" Learning assistance - \"Explain this concept in simple terms\" Professional Support Research assistance - \"Summarize the key points about renewable energy trends\" Problem-solving - \"I'm stuck on this coding issue, can you help?\" Communication drafting - \"Help me write a professional email about this topic\" Project planning - \"Break down this complex task into manageable steps\" Personal Companionship Casual conversation - \"I had an interesting experience today...\" Emotional support - \"I'm feeling overwhelmed, can we talk?\" Creative collaboration - \"Help me brainstorm ideas for my hobby project\" Learning companion - \"Teach me something new today\" 🚀 What Makes Jiro Special Real-Time Intelligence Jiro processes your requests instantly and streams responses as they're generated, making conversations feel natural and immediate. Memory Without Baggage While Jiro remembers important context, it's smart enough to forget irrelevant details, keeping conversations focused and efficient. Extensible by Design New capabilities can be added to Jiro through its plugin system, meaning it can grow and adapt to new needs over time. Privacy-Conscious Your conversations are managed securely, with clear control over what's remembered and what's forgotten. Multi-Modal Communication Whether you prefer typing, want visual graphs, or need structured data, Jiro adapts its communication style to your needs. 🌈 The Jiro Experience Using Jiro feels like having a conversation with a knowledgeable friend who: Never judges your questions, no matter how simple or complex Always has time to help, regardless of the hour Remembers what matters without cluttering the conversation with unnecessary details Adapts to your style of communication and information processing Grows with you as your needs and preferences evolve Whether you need quick weather updates, deep technical discussions, creative brainstorming, or just someone to chat with, Jiro is designed to be genuinely helpful while feeling natural and personable. 🎉 Getting Started is Simple Open Jiro in your web browser or terminal Start typing - no special commands or syntax needed Have a conversation - ask questions, share thoughts, request help Watch Jiro learn your preferences and communication style Enjoy the assistance - from weather updates to deep discussions Jiro is built to be powerful under the hood but simple to use on the surface. You don't need to understand the technology to benefit from the intelligence. Ready to meet your new AI assistant? Jiro is waiting to help make your digital interactions more intelligent, efficient, and enjoyable."
  },
  "documentation/websocket-communication.html": {
    "href": "documentation/websocket-communication.html",
    "title": "WebSocket Communication Architecture | Jiro Documentation",
    "keywords": "WebSocket Communication Architecture Overview Jiro implements a hybrid communication architecture that combines WebSocket connections for real-time bidirectional communication and gRPC for reliable service interactions. This design provides real-time command reception, live log streaming, and session management through SignalR WebSockets while ensuring reliable command result delivery via gRPC with retry mechanisms. Key Features (v1.0.0-beta) Real-time log streaming via StreamLogsAsync and StreamLogBatchesAsync Enhanced session management with client-side session ID generation Improved WebSocket contracts using IJiroInstance interface Bidirectional streaming for logs, sessions, and configuration updates Architecture Components Core Services JiroWebSocketService: Main orchestration service managing the entire communication lifecycle WebSocketConnection: Enhanced WebSocket implementation using SignalR for real-time bidirectional communication JiroGrpcService: gRPC client service for sending command results back to the server ICommandQueueMonitor: Interface for monitoring command execution metrics LogsProviderService: Real-time log streaming with continuous monitoring SessionManager: Enhanced session lifecycle management with caching MessageCacheService: Optimized message operations and caching Communication Flow %%{init: { \"theme\": \"base\", \"themeVariables\": { \"background\": \"#FFFFFF\", \"primaryColor\": \"#2E7D32\", \"primaryTextColor\": \"#000000\", \"primaryBorderColor\": \"#1B5E20\", \"lineColor\": \"#424242\", \"sectionBkgColor\": \"#E8F5E9\", \"altSectionBkgColor\": \"#C8E6C9\", \"gridColor\": \"#E0E0E0\", \"secondaryColor\": \"#1976D2\", \"tertiaryColor\": \"#7B1FA2\", \"actorBkg\": \"#E3F2FD\", \"actorBorder\": \"#1565C0\", \"actorTextColor\": \"#000000\", \"activationBkgColor\": \"#FFF3E0\", \"activationBorderColor\": \"#E65100\", \"noteBkgColor\": \"#FFFDE7\", \"noteBorderColor\": \"#F57C00\", \"noteTextColor\": \"#000000\", \"altColor\": \"#4CAF50\" } }}%% sequenceDiagram participant Server as Jiro Server participant WS as SignalR WebSocket participant WSService as JiroWebSocketService participant CmdHandler as Command Handler participant GrpcService as JiroGrpcService participant GrpcClient as gRPC Client Note over Server, GrpcClient: Command Execution Flow Server->>WS: Send Command (JSON) WS->>WSService: ReceiveCommand Event WSService->>WSService: Create Scope WSService->>CmdHandler: Execute Command CmdHandler->>WSService: Command Result WSService->>GrpcService: Send Result GrpcService->>GrpcClient: gRPC Call (with retry) GrpcClient->>Server: Command Response Note over WSService: Error Handling alt Command Execution Error CmdHandler-->>WSService: Exception WSService->>GrpcService: Send Error GrpcService->>GrpcClient: Error Response end Service Architecture %%{init: { \"theme\": \"base\", \"themeVariables\": { \"background\": \"#1C1E26\", \"primaryColor\": \"#FCD4B8\", \"primaryTextColor\": \"#D5D8DA\", \"primaryBorderColor\": \"#E95378\", \"lineColor\": \"#6C6F93\", \"sectionBkgColor\": \"#232530\", \"altSectionBkgColor\": \"#2E303E\", \"gridColor\": \"#16161C\", \"secondaryColor\": \"#26BBD9\", \"tertiaryColor\": \"#27D797\", \"cScale0\": \"#FFFFFF\", \"cScale1\": \"#F5F5F5\", \"cScale2\": \"#E0E0E0\", \"cScale3\": \"#9E9E9E\", \"cScale4\": \"#000000\" } }}%% graph TB subgraph \"Application Layer\" App[Jiro Application] HSvc[Hosted Services] end subgraph \"Communication Services\" WSService[JiroWebSocketService<br/>Background Service] WSConn[SignalRWebSocketConnection<br/>IWebSocketConnection] GrpcSvc[JiroGrpcService<br/>IJiroGrpcService] Monitor[ICommandQueueMonitor] end subgraph \"Core Services\" CmdHandler[ICommandHandlerService] CmdContext[ICommandContext] ScopeFactory[IServiceScopeFactory] end subgraph \"External Communication\" SignalR[SignalR Hub<br/>WebSocket Server] GrpcServer[gRPC Server<br/>JiroHubProto] end App --> HSvc HSvc --> WSService WSService --> WSConn WSService --> GrpcSvc WSService --> CmdHandler WSService --> ScopeFactory WSService -.-> Monitor WSConn <--> SignalR GrpcSvc --> GrpcServer %% High Contrast Styling classDef wsService fill:#2196F3,stroke:#0D47A1,stroke-width:2px,color:#FFFFFF classDef grpcService fill:#FF9800,stroke:#E65100,stroke-width:2px,color:#000000 classDef wsConn fill:#4CAF50,stroke:#1B5E20,stroke-width:2px,color:#FFFFFF class WSService wsService class GrpcSvc grpcService class WSConn wsConn Dependency Injection and Scoping %%{init: { \"theme\": \"base\", \"themeVariables\": { \"background\": \"#1C1E26\", \"primaryColor\": \"#FCD4B8\", \"primaryTextColor\": \"#D5D8DA\", \"primaryBorderColor\": \"#E95378\", \"lineColor\": \"#6C6F93\", \"sectionBkgColor\": \"#232530\", \"altSectionBkgColor\": \"#2E303E\", \"gridColor\": \"#16161C\", \"secondaryColor\": \"#26BBD9\", \"tertiaryColor\": \"#27D797\", \"cScale0\": \"#FFFFFF\", \"cScale1\": \"#F5F5F5\", \"cScale2\": \"#E0E0E0\", \"cScale3\": \"#9E9E9E\", \"cScale4\": \"#000000\", \"clusterBkg\": \"#F5F5F5\", \"clusterBorder\": \"#757575\" } }}%% graph LR subgraph \"Singleton Services\" WSService[JiroWebSocketService] WSConn[SignalR Connection] Monitor[Command Queue Monitor] end subgraph \"Scoped Services (Per Command)\" GrpcSvc[JiroGrpcService] CmdContext[ICommandContext] GrpcClient[gRPC Client] end subgraph \"Service Resolution\" ScopeFactory[IServiceScopeFactory] Scope[AsyncServiceScope] end WSService --> ScopeFactory ScopeFactory --> Scope Scope --> GrpcSvc Scope --> CmdContext GrpcSvc --> GrpcClient WSService -.-> Monitor WSService --> WSConn %% High Contrast Styling classDef scopeStyle fill:#2196F3,stroke:#0D47A1,stroke-width:2px,color:#FFFFFF classDef grpcStyle fill:#4CAF50,stroke:#1B5E20,stroke-width:2px,color:#FFFFFF classDef wsStyle fill:#FF9800,stroke:#E65100,stroke-width:2px,color:#000000 class Scope scopeStyle class GrpcSvc grpcStyle class WSService wsStyle Message Flow and Data Structures Command Message Structure { \"instanceId\": \"user-123\", \"command\": \"chat Hello Jiro\", \"commandSyncId\": \"cmd-456-789\", \"sessionId\": \"session-abc\", // Now generated client-side \"parameters\": { \"key1\": \"value1\", \"key2\": \"value2\" } } Command Response Structure (gRPC) message ClientMessage { string commandName = 1; CommandType commandType = 2; oneof result { TextResult textResult = 3; GraphResult graphResult = 4; } bool isSuccess = 5; string commandSyncId = 6; } Connection Management %%{init: { \"theme\": \"base\", \"themeVariables\": { \"background\": \"#1C1E26\", \"primaryColor\": \"#FCD4B8\", \"primaryTextColor\": \"#D5D8DA\", \"primaryBorderColor\": \"#E95378\", \"lineColor\": \"#6C6F93\", \"sectionBkgColor\": \"#232530\", \"altSectionBkgColor\": \"#2E303E\", \"gridColor\": \"#16161C\", \"secondaryColor\": \"#26BBD9\", \"tertiaryColor\": \"#27D797\", \"cScale0\": \"#FFFFFF\", \"cScale1\": \"#F5F5F5\", \"cScale2\": \"#E0E0E0\", \"cScale3\": \"#9E9E9E\", \"cScale4\": \"#000000\", \"stateLabelColor\": \"#000000\" } }}%% stateDiagram-v2 [*] --> Disconnected Disconnected --> Connecting: StartAsync() Connecting --> Connected: Connection Successful Connecting --> Failed: Connection Failed Connected --> Reconnecting: Connection Lost Connected --> Disconnecting: StopAsync() Reconnecting --> Connected: Reconnection Successful Reconnecting --> Failed: Max Retries Exceeded Failed --> Connecting: Retry Attempt Disconnecting --> Disconnected: Stop Complete note right of Connected - Receiving Commands - Sending Results - Monitoring Queue end note note right of Reconnecting - Exponential Backoff - Clear Active Commands - Event Notifications end note Error Handling and Retry Logic WebSocket Connection Retry %%{init: { \"theme\": \"base\", \"themeVariables\": { \"background\": \"#1C1E26\", \"primaryColor\": \"#FCD4B8\", \"primaryTextColor\": \"#D5D8DA\", \"primaryBorderColor\": \"#E95378\", \"lineColor\": \"#6C6F93\", \"sectionBkgColor\": \"#232530\", \"altSectionBkgColor\": \"#2E303E\", \"gridColor\": \"#16161C\", \"secondaryColor\": \"#26BBD9\", \"tertiaryColor\": \"#27D797\", \"cScale0\": \"#FFFFFF\", \"cScale1\": \"#F5F5F5\", \"cScale2\": \"#E0E0E0\", \"cScale3\": \"#9E9E9E\", \"cScale4\": \"#000000\", \"clusterBkg\": \"#F5F5F5\", \"clusterBorder\": \"#757575\" } }}%% flowchart TD Start[Connection Attempt] --> Try[Connect to Hub] Try --> Success{Connected?} Success -->|Yes| Monitor[Monitor Connection] Success -->|No| Retry{Max Retries?} Retry -->|No| Wait[Exponential Backoff] Wait --> Try Retry -->|Yes| Fail[Connection Failed] Monitor --> Lost{Connection Lost?} Lost -->|Yes| Auto[Auto Reconnect] Lost -->|No| Monitor Auto --> Try %% High Contrast Styling classDef successStyle fill:#4CAF50,stroke:#1B5E20,stroke-width:2px,color:#FFFFFF classDef failStyle fill:#F44336,stroke:#B71C1C,stroke-width:2px,color:#FFFFFF classDef waitStyle fill:#FFC107,stroke:#F57C00,stroke-width:2px,color:#000000 class Success successStyle class Fail failStyle class Wait waitStyle gRPC Result Sending Retry %%{init: { \"theme\": \"base\", \"themeVariables\": { \"background\": \"#1C1E26\", \"primaryColor\": \"#FCD4B8\", \"primaryTextColor\": \"#D5D8DA\", \"primaryBorderColor\": \"#E95378\", \"lineColor\": \"#6C6F93\", \"sectionBkgColor\": \"#232530\", \"altSectionBkgColor\": \"#2E303E\", \"gridColor\": \"#16161C\", \"secondaryColor\": \"#26BBD9\", \"tertiaryColor\": \"#27D797\", \"cScale0\": \"#FFFFFF\", \"cScale1\": \"#F5F5F5\", \"cScale2\": \"#E0E0E0\", \"cScale3\": \"#9E9E9E\", \"cScale4\": \"#000000\", \"clusterBkg\": \"#F5F5F5\", \"clusterBorder\": \"#757575\" } }}%% flowchart TD Send[Send gRPC Message] --> Attempt[gRPC Call] Attempt --> Response{Successful?} Response -->|Yes| Complete[Operation Complete] Response -->|No| RetryCheck{Retries Left?} RetryCheck -->|Yes| Backoff[Exponential Backoff] RetryCheck -->|No| Error[Throw Exception] Backoff --> Attempt %% High Contrast Styling classDef completeStyle fill:#4CAF50,stroke:#1B5E20,stroke-width:2px,color:#FFFFFF classDef errorStyle fill:#F44336,stroke:#B71C1C,stroke-width:2px,color:#FFFFFF classDef backoffStyle fill:#FFC107,stroke:#F57C00,stroke-width:2px,color:#000000 class Complete completeStyle class Error errorStyle class Backoff backoffStyle Configuration WebSocket Configuration { \"WebSocket\": { \"HubUrl\": \"https://localhost:5001/instanceHub\", \"ReconnectionDelayMs\": 5000, \"MaxReconnectionAttempts\": 5, \"HandshakeTimeoutMs\": 15000, \"KeepAliveIntervalMs\": 15000, \"ServerTimeoutMs\": 30000, \"AccessToken\": null, \"Headers\": { \"User-Agent\": \"Jiro-Bot/1.0\" } } } gRPC Configuration { \"Grpc\": { \"ServerUrl\": \"https://localhost:5001\", \"TimeoutMs\": 30000, \"MaxRetries\": 3 } } Service Registration The communication services are registered in the DI container as follows: // Configure options services.Configure<WebSocketOptions>(configuration.GetSection(\"WebSocket\")); services.Configure<GrpcOptions>(configuration.GetSection(\"Grpc\")); // Register scoped gRPC service (per command execution) services.AddScoped<IJiroGrpcService, JiroGrpcService>(); // Register singleton WebSocket connection services.AddSingleton<IWebSocketConnection, SignalRWebSocketConnection>(); // Register main orchestration service as hosted service services.AddHostedService<JiroWebSocketService>(); // Register command queue monitoring interface services.AddSingleton<ICommandQueueMonitor, JiroWebSocketService>(); Command Execution Lifecycle %%{init: { \"theme\": \"base\", \"themeVariables\": { \"background\": \"#1C1E26\", \"primaryColor\": \"#FCD4B8\", \"primaryTextColor\": \"#D5D8DA\", \"primaryBorderColor\": \"#E95378\", \"lineColor\": \"#6C6F93\", \"sectionBkgColor\": \"#232530\", \"altSectionBkgColor\": \"#2E303E\", \"gridColor\": \"#16161C\", \"secondaryColor\": \"#26BBD9\", \"tertiaryColor\": \"#27D797\", \"cScale0\": \"#FFFFFF\", \"cScale1\": \"#F5F5F5\", \"cScale2\": \"#E0E0E0\", \"cScale3\": \"#9E9E9E\", \"cScale4\": \"#000000\", \"actorBkg\": \"#2E303E\", \"actorBorder\": \"#6C6F93\", \"actorTextColor\": \"#D5D8DA\", \"activationBkgColor\": \"#FCD4B8\", \"activationBorderColor\": \"#E29A6B\", \"noteBkgColor\": \"#26BBD9\", \"noteBorderColor\": \"#1A9CB8\", \"noteTextColor\": \"#1C1E26\" } }}%% sequenceDiagram participant WS as WebSocket participant Service as JiroWebSocketService participant Scope as Service Scope participant Context as Command Context participant Handler as Command Handler participant gRPC as gRPC Service WS->>Service: Command Received Service->>Service: Add to Active Commands Service->>Scope: Create Async Scope Scope->>Context: Resolve ICommandContext Scope->>gRPC: Resolve IJiroGrpcService Service->>Context: Set Instance/Session Data Service->>Handler: Execute Command Handler-->>Service: Command Result Service->>gRPC: Send Result gRPC-->>Service: Result Sent Service->>Service: Remove from Active Commands Service->>Service: Update Metrics Note over Scope: Scope Disposed<br/>Resources Cleaned Up Command Queue Monitoring The ICommandQueueMonitor interface provides real-time insights into command execution: Monitoring Metrics Active Command Count: Number of currently executing commands Active Command IDs: List of command synchronization IDs being processed Total Commands Processed: Lifetime count of processed commands Successful Commands: Count of successfully completed commands Failed Commands: Count of commands that resulted in errors Usage Example public class MonitoringController : ControllerBase { private readonly ICommandQueueMonitor _monitor; [HttpGet(\"status\")] public IActionResult GetStatus() { return Ok(new { ActiveCommands = _monitor.ActiveCommandCount, TotalProcessed = _monitor.TotalCommandsProcessed, SuccessRate = _monitor.SuccessfulCommands / (double)_monitor.TotalCommandsProcessed }); } } Key Benefits Architecture Advantages Real-time Communication: WebSocket provides instant command delivery Reliable Result Delivery: gRPC ensures command results reach the server Automatic Reconnection: Built-in reconnection logic for WebSocket connections Retry Mechanisms: Exponential backoff for both WebSocket and gRPC operations Proper Resource Management: Scoped services ensure proper cleanup per command Monitoring and Observability: Built-in command queue monitoring Error Resilience: Comprehensive error handling at all levels Performance Characteristics Low Latency: Direct WebSocket connection for command reception High Reliability: gRPC with retry logic for result delivery Resource Efficient: Scoped dependency injection prevents resource leaks Concurrent Processing: Multiple commands can be processed simultaneously Graceful Degradation: System continues operating during temporary network issues Real-Time Log Streaming (v1.0.0-beta) Log Streaming Architecture The enhanced logging system provides real-time log streaming capabilities through WebSocket connections: %%{init: { \"theme\": \"base\", \"themeVariables\": { \"background\": \"#FFFFFF\", \"primaryColor\": \"#2E7D32\", \"primaryTextColor\": \"#000000\", \"primaryBorderColor\": \"#1B5E20\", \"lineColor\": \"#424242\", \"sectionBkgColor\": \"#E8F5E9\", \"altSectionBkgColor\": \"#C8E6C9\", \"gridColor\": \"#E0E0E0\", \"secondaryColor\": \"#1976D2\", \"tertiaryColor\": \"#7B1FA2\", \"cScale0\": \"#FFFFFF\", \"cScale1\": \"#F5F5F5\", \"cScale2\": \"#E0E0E0\", \"cScale3\": \"#9E9E9E\", \"cScale4\": \"#000000\" } }}%% flowchart TD subgraph \"Log Streaming Pipeline\" Client[WebSocket Client] -->|Request Logs| Hub[SignalR Hub] Hub --> LogService[LogsProviderService] LogService --> Stream{Streaming Mode} Stream -->|Continuous| Async[StreamLogsAsync] Stream -->|Batch| Batch[StreamLogBatchesAsync] Async --> Monitor[File Monitor] Batch --> BatchProc[Batch Processor] Monitor -->|New Entries| Parser[Log Parser] BatchProc -->|Batch Ready| Parser Parser -->|Structured Logs| Client end %% High Contrast Styling classDef clientStyle fill:#2196F3,stroke:#0D47A1,stroke-width:2px,color:#FFFFFF classDef serviceStyle fill:#4CAF50,stroke:#1B5E20,stroke-width:2px,color:#FFFFFF classDef processStyle fill:#FF9800,stroke:#E65100,stroke-width:2px,color:#000000 class Client clientStyle class LogService serviceStyle class Parser processStyle Streaming Methods Continuous Log Streaming public async IAsyncEnumerable<LogEntry> StreamLogsAsync( string? level = null, int initialLimit = 50, [EnumeratorCancellation] CancellationToken cancellationToken = default) { // Returns existing logs first // Then continuously monitors for new entries // Real-time delivery as logs are written } Batch Log Streaming public async IAsyncEnumerable<IEnumerable<LogEntry>> StreamLogBatchesAsync( string? level = null, int initialLimit = 50, int batchSize = 10, [EnumeratorCancellation] CancellationToken cancellationToken = default) { // Delivers logs in configurable batches // Optimized for high-volume scenarios // Reduces network overhead } Enhanced Log Parsing The log parser now supports: Timezone-aware timestamps: Handles logs with timezone offsets (e.g., +00:00) Multi-line log entries: Correctly groups stack traces and multi-line messages Regex pattern matching: Intelligent parsing of various log formats Level filtering: Real-time filtering by log level (INFO, WARN, ERROR, etc.) WebSocket Events for Logging // Request continuous log stream connection.On<GetLogsRequest>(\"LogsStreamRequested\", async (request) => { await foreach (var log in logsProvider.StreamLogsAsync(request.Level)) { await connection.SendAsync(\"LogEntry\", log); } }); // Request batch log stream connection.On<GetLogsRequest>(\"LogBatchesRequested\", async (request) => { await foreach (var batch in logsProvider.StreamLogBatchesAsync( request.Level, request.InitialLimit, request.BatchSize)) { await connection.SendAsync(\"LogBatch\", batch); } }); Integration Points Server-Side Integration The server must implement: SignalR Hub with ReceiveCommand method gRPC service implementing JiroHubProto service Proper authentication and authorization mechanisms Client Command Processing Commands flow through the following pipeline: WebSocket reception via SignalR JSON deserialization to CommandMessage Service scope creation for dependency injection Command context setup with instance and session data Command execution via ICommandHandlerService Result serialization and gRPC transmission Resource cleanup and metrics updating This architecture provides a robust, scalable, and maintainable communication layer for the Jiro application."
  },
  "documentation/workflow-pipelines.html": {
    "href": "documentation/workflow-pipelines.html",
    "title": "🔄 Jiro Workflow Pipelines Documentation | Jiro Documentation",
    "keywords": "🔄 Jiro Workflow Pipelines Documentation This document describes all the automated workflows and CI/CD pipelines configured for the Jiro project. Each workflow serves a specific purpose in maintaining code quality, security, and deployment automation. 📋 Overview The Jiro project utilizes multiple GitHub Actions workflows organized by responsibility to ensure code quality, security, and automated releases. The workflows are designed to work together to provide comprehensive coverage of the development lifecycle from PR creation to production deployment. 🚀 Pipeline Flow: PR → Merge → Deploy Phase 1: Pull Request Validation When a Pull Request is created, multiple validation workflows run in parallel: %%{init: { \"theme\": \"base\", \"themeVariables\": { \"background\": \"#FFFFFF\", \"primaryColor\": \"#2E7D32\", \"primaryTextColor\": \"#000000\", \"primaryBorderColor\": \"#1B5E20\", \"lineColor\": \"#424242\", \"sectionBkgColor\": \"#E8F5E9\", \"altSectionBkgColor\": \"#C8E6C9\", \"gridColor\": \"#E0E0E0\", \"secondaryColor\": \"#1976D2\", \"tertiaryColor\": \"#7B1FA2\", \"cScale0\": \"#FFFFFF\", \"cScale1\": \"#F5F5F5\", \"cScale2\": \"#E0E0E0\", \"cScale3\": \"#9E9E9E\", \"cScale4\": \"#000000\", \"clusterBkg\": \"#F5F5F5\", \"clusterBorder\": \"#757575\" } }}%% graph TD A[PR Created/Updated] --> B[.NET CI] A --> C[Docker Build] A --> D[Markdown Lint] A --> E[Security Scan] A --> F[Release Validation] B --> B1[✅ Build & Test & Quality Gate] C --> C1[✅ Container Build & Security] D --> D1[✅ Documentation Quality] E --> E1[✅ CodeQL & Security Audit] F --> F1[✅ Additional Validation] Phase 2: Post-Merge Automation When PR is merged to main, production workflows execute: %%{init: { \"theme\": \"base\", \"themeVariables\": { \"background\": \"#FFFFFF\", \"primaryColor\": \"#2E7D32\", \"primaryTextColor\": \"#000000\", \"primaryBorderColor\": \"#1B5E20\", \"lineColor\": \"#424242\", \"sectionBkgColor\": \"#E8F5E9\", \"altSectionBkgColor\": \"#C8E6C9\", \"gridColor\": \"#E0E0E0\", \"secondaryColor\": \"#1976D2\", \"tertiaryColor\": \"#7B1FA2\", \"cScale0\": \"#FFFFFF\", \"cScale1\": \"#F5F5F5\", \"cScale2\": \"#E0E0E0\", \"cScale3\": \"#9E9E9E\", \"cScale4\": \"#000000\", \"clusterBkg\": \"#F5F5F5\", \"clusterBorder\": \"#757575\" } }}%% graph TD A[Merge to Main] --> B[☁️ Auto-Versioning] A --> C[🐳 Docker Push] A --> D[📚 Documentation Deploy] A --> E[🔒 Security Monitoring] B --> B1[Version Bump + GitHub Release] C --> C1[Container Registry Push] D --> D1[GitHub Pages Update] E --> E1[Continuous Security Scanning] 🏗️ Workflow Catalog 🔧 Core .NET CI (jiro-kernel-ci.yml) Triggers: Push to main branch (src/** changes) Pull requests to main/dev (src/** changes) Purpose: Core .NET build, test, and code quality validation Jobs: 1. Build, Test & Format Check (build-and-test) Environment: Ubuntu Latest .NET Version: 9.0.x Steps: Checkout source code with GitHub token Setup .NET 9.0 SDK Prepare configuration files (Configuration/appsettings.json) Cache NuGet packages for performance Restore dependencies Build solution (Release configuration) Verify code formatting with dotnet format Run unit tests with code coverage Upload test results and coverage to Codecov 2. .NET Quality Gate (quality-gate) Purpose: Validate all .NET CI results Dependencies: build-and-test Behavior: ✅ SUCCESS: All build, test, format checks pass ❌ FAILURE: Any .NET CI component fails Provides detailed status reporting 🚀 Auto-Versioning & Release (create-release.yml) Triggers: Push to main branch Pull requests to main Purpose: Automated versioning, tagging, and GitHub release creation Jobs: 1. Test and Validate (PR Only) Condition: github.event_name == 'pull_request' Steps: .NET build and test validation Code formatting checks Security scanning with CodeQL 2. Pull Request Validation (PRs Only) Condition: github.event_name == 'pull_request' Permissions: contents: read Steps: .NET build and test validation Code formatting checks Security scanning with CodeQL 3. Release Artifact Build (Manual Tag Triggered) Condition: startsWith(github.ref, 'refs/tags/v') Permissions: contents: write Steps: Build release configuration Publish multi-platform binaries (Linux, Windows, macOS) Create release archives Generate release notes with changelog Create GitHub release with artifacts attached Manual Release Process: Developer manually creates git tag: git tag -a v1.2.3 -m \"Release v1.2.3\" Push tag to trigger build: git push origin v1.2.3 Workflow builds multi-platform binaries automatically GitHub release created with all artifacts attached Full control over release timing and version numbers Release Artifacts Generated: jiro-kernel-vX.X.X-linux-x64.tar.gz - Linux 64-bit self-contained binary jiro-kernel-vX.X.X-win-x64.zip - Windows 64-bit self-contained binary jiro-kernel-vX.X.X-osx-x64.tar.gz - macOS 64-bit self-contained binary 🐳 Container Build & Security (docker-build.yml) Triggers: Push to main (src/**, Dockerfile changes) Pull requests (src/**, Dockerfile changes) Purpose: Docker image building, testing, and security scanning Jobs: 1. Docker Build & Verification (docker-build) Environment: Ubuntu Latest Registry: GitHub Container Registry (ghcr.io) Steps: Setup Docker Buildx Login to GHCR (main branch only) Extract metadata and tags Build Docker image with caching Test container startup and health Run Trivy vulnerability scanner Upload security scan results Push to registry (main branch only) Image Tags Generated: ghcr.io/huebyte/jiro-kernel:latest (main branch) ghcr.io/huebyte/jiro-kernel:main (main branch) ghcr.io/huebyte/jiro-kernel:pr-123 (pull requests) ghcr.io/huebyte/jiro-kernel:sha-abcd123 (commit SHA) 🔒 Security Scanning (jiro-kernel-security.yml) Triggers: Weekly schedule (Mondays at 2 AM UTC) Manual workflow dispatch Push/PR to main (src/** changes) Purpose: Comprehensive security vulnerability detection Jobs: 1. Security Vulnerability Scan Environment: Ubuntu Latest Permissions: security-events: write Steps: .NET security audit (dotnet list package --vulnerable) Snyk security scanning (if token configured) CodeQL analysis with security-extended queries Upload security findings to GitHub Security tab 📝 Documentation Quality (markdown-lint.yml) Triggers: Push to main (**/*.md changes) Pull requests (**/*.md changes) Purpose: Documentation linting and quality assurance Jobs: 1. Markdown Linting Environment: Ubuntu Latest Node.js Version: 18 Steps: Setup Node.js and markdownlint-cli Create default config if missing Run markdown linting on all .md files Ignore build directories and node_modules 📚 Documentation Deployment (deploy-docs.yml) Triggers: Push to main (docs/API changes) Manual workflow dispatch Purpose: Build and deploy project documentation to GitHub Pages Jobs: 1. Publish Documentation Environment: Ubuntu Latest Target: GitHub Pages Steps: Setup .NET and DocFX Restore dependencies for API docs Build DocFX documentation Deploy to GitHub Pages 🎯 Deployment Ready Artifacts After successful pipeline execution, the following artifacts are available: 🐳 Container Images # Latest stable release docker pull ghcr.io/huebyte/jiro-kernel:latest # Specific version docker pull ghcr.io/huebyte/jiro-kernel:v0.1.3 # Development builds docker pull ghcr.io/huebyte/jiro-kernel:main 📦 GitHub Releases Semantic versioning with auto-incremented patch versions Comprehensive release notes with commit changelog Version metadata and build information Direct download links for assets 📚 Live Documentation GitHub Pages: Automatically updated API documentation API Reference: Generated from XML comments User Guides: Markdown-based documentation ⚡ Performance Optimizations Intelligent Triggers Path-based filtering: Workflows only run when relevant files change Parallel execution: Independent workflows run concurrently Conditional jobs: Jobs run only when necessary (PR vs. main branch) Caching Strategies NuGet packages: Cached across builds for faster dependency restoration Docker layers: GitHub Actions cache for container builds Build artifacts: Test results and coverage cached between jobs Resource Efficiency Targeted scans: Security scans run on schedule vs. every commit Optimized Docker builds: Multi-stage builds with layer caching Smart dependencies: Jobs run only after required dependencies complete 🛡️ Security & Compliance Comprehensive Security Coverage Static Analysis: CodeQL for source code security Dependency Scanning: Snyk and .NET audit for vulnerable packages Container Security: Trivy scanner for Docker image vulnerabilities Access Control: Proper GitHub token permissions and secrets management Quality Gates Automated Formatting: Enforced code style with dotnet format Test Coverage: Comprehensive unit test execution with coverage reporting Documentation Quality: Markdown linting for documentation consistency Build Verification: Multi-stage validation before release 🔧 Configuration Management Configuration File Structure Jiro uses an organized configuration structure with all settings centralized in the Configuration directory: src/Jiro.Kernel/Jiro.App/Configuration/ ├── appsettings.json # Main configuration (created from example) ├── appsettings.example.json # Configuration template ├── appsettings.dev.json # Development-specific overrides └── appsettings.backup.json # Backup configuration Configuration File Hierarchy: appsettings.json - Base configuration appsettings.{environment}.json - Environment-specific overrides Environment variables with JIRO_ prefix - Runtime overrides Workflow Integration: CI/CD pipelines automatically copy appsettings.example.json to appsettings.json The example file contains safe defaults for build and test environments Production deployments use environment variables for sensitive values Environment Variables DOTNET_VERSION: \"9.0.x\" - Consistent .NET version across all workflows SOLUTION_PATH: \"./src/Main.sln\" - Central solution file reference REGISTRY: ghcr.io - Container registry configuration Secrets Required GITHUB_TOKEN - Automatically provided, used for repository access SNYK_TOKEN - Optional, for enhanced security scanning CODECOV_TOKEN - Optional, for code coverage reporting Workflow Dependencies %%{init: { \"theme\": \"base\", \"themeVariables\": { \"background\": \"#FFFFFF\", \"primaryColor\": \"#2E7D32\", \"primaryTextColor\": \"#000000\", \"primaryBorderColor\": \"#1B5E20\", \"lineColor\": \"#424242\", \"sectionBkgColor\": \"#E8F5E9\", \"altSectionBkgColor\": \"#C8E6C9\", \"gridColor\": \"#E0E0E0\", \"secondaryColor\": \"#1976D2\", \"tertiaryColor\": \"#7B1FA2\", \"cScale0\": \"#FFFFFF\", \"cScale1\": \"#F5F5F5\", \"cScale2\": \"#E0E0E0\", \"cScale3\": \"#9E9E9E\", \"cScale4\": \"#000000\", \"clusterBkg\": \"#F5F5F5\", \"clusterBorder\": \"#757575\" } }}%% graph LR A[PR Created] --> B[All Validation Workflows] B --> C[Merge Approved] C --> D[Auto-Versioning] D --> E[Container Build] D --> F[Documentation Deploy] D --> G[Security Monitoring] 📈 Monitoring & Observability Workflow Status Quality Gates: Clear pass/fail indicators for each pipeline stage Artifact Tracking: Test results, coverage reports, and build outputs Security Alerts: Automated vulnerability detection and reporting Performance Metrics Build Times: Optimized with caching and parallel execution Test Coverage: Tracked and reported via Codecov Security Posture: Regular scanning with trend analysis This comprehensive pipeline ensures high code quality, security, and reliable deployment automation for the Jiro project. Setup Node.js environment Install markdownlint-cli globally Run markdownlint on all markdown files Create default configuration if not present Key Features: Comprehensive Coverage: Lints all *.md files in the repository Smart Exclusions: Ignores node_modules, TestResults, and src/docs/build directories Configurable Rules: Uses .markdownlint.json for custom rule configuration Non-blocking: Warnings are reported but don't fail the pipeline Auto-configuration: Creates sensible defaults if no config exists Default Rules: MD013 (line length): Disabled for flexibility MD033 (inline HTML): Allowed for enhanced formatting MD041 (first line heading): Not enforced MD024 (duplicate headings): Allowed for structured documents MD029 (ordered list prefixes): Flexible numbering allowed 3. Security Vulnerability Scanning (security-scan) Dependencies: Requires build-and-test to complete successfully Steps: Run .NET security audit for vulnerable packages Install and run Snyk CLI security scanning (if token is configured) Initialize and run CodeQL static analysis Perform comprehensive security analysis Security Tools: .NET Security Audit: Scans for vulnerable NuGet packages Snyk: Third-party vulnerability scanning (optional) CodeQL: GitHub's semantic code analysis engine 4. Docker Build and Verification (docker-build) Dependencies: Requires build-and-test to complete successfully Steps: Setup Docker Buildx for advanced Docker features Login to GitHub Container Registry (for non-PR events) Extract Docker metadata and generate tags Build Docker image with caching Test Docker container functionality Run Trivy vulnerability scanner on the built image Push Docker image to registry (for non-PR events) Docker Features: Multi-platform Support: Uses Docker Buildx Intelligent Tagging: Branch-based, PR-based, and SHA-based tags Build Caching: GitHub Actions cache for faster builds Container Testing: Automated health checks Security Scanning: Trivy vulnerability assessment Registry Integration: Automatic push to GitHub Container Registry 5. Quality Gate (quality-gate) Dependencies: Waits for all previous jobs to complete Purpose: Final validation and reporting Logic: Fails if build-and-test fails Warns but doesn't fail for markdown linting failures Warns but doesn't fail for security scan failures Fails if Docker build fails Provides comprehensive status summary 🚀 Release Automation Create Release on Main Branch (create-release.yml) Triggers: Direct push to main branch Pull request from dev to main branch (when merged) Purpose: Automated release creation when code is pushed or merged to the main branch. Process: Version Detection: Extracts version from Jiro.App.csproj Falls back to date-based versioning if no version found Prefixes version with 'v' (e.g., v1.0.0) Tag Management: Checks if the version tag already exists Skips release creation if tag exists Creates new Git tag if version is new Release Notes Generation: Automatically generates commit history since last release Includes merged commits from dev to main Adds link to full changelog GitHub Release Creation: Creates GitHub release with generated notes Links to the appropriate Git tag Provides downloadable assets Features: Intelligent Version Detection: Multiple fallback strategies Duplicate Prevention: Prevents duplicate releases Automated Documentation: Generated release notes Branch-aware: Handles both direct pushes and PR merges Auto Release on Main Push (auto-release.yml) Triggers: Push to main branch Purpose: Alternative release automation focused on immediate releases upon main branch updates. Key Differences from create-release.yml: Simplified version detection logic Searches multiple project files for version information More aggressive in creating releases Focuses on Main.sln structure compatibility 📚 Documentation Deployment Deploy Documentation to GitHub Pages (deploy-docs.yml) Triggers: Push to main branch (when changes are made to documentation files) Paths monitored: docs/** - Documentation content assets/** - Images and assets docfx.json - DocFX configuration index.md - Main homepage toc.yml - Table of contents src/**/*.cs - Source code for API documentation Manual trigger via workflow_dispatch Purpose: Automatically builds and deploys the DocFX documentation site to GitHub Pages whenever documentation changes are pushed to the main branch. Build Process: Environment Setup Ubuntu Latest runner .NET 9.x SDK installation DocFX tool installation (version 2.75.3) Project Preparation Restore NuGet dependencies for API documentation Build .NET projects to generate XML documentation files Continue on build errors (API docs still generate) Documentation Generation Run docfx docfx.json to build complete documentation Generate both documentation and API reference Create static website in _site/ directory Deployment to GitHub Pages Upload generated site as Pages artifact Deploy to GitHub Pages using official actions Provide deployment URL feedback Generated Content: Documentation Pages (/docs/): Project guides, architecture, user documentation API Reference (/api/): Auto-generated .NET API documentation from XML comments Assets: Images, logos, and styling assets Navigation: Organized table of contents and cross-references Features: Automatic API Documentation: Generated from XML comments in source code Asset Management: Proper handling of images and logos (including custom Jiro branding) Clean URLs: Organized structure with /docs/ and /api/ sections Modern Theme: DocFX modern template with custom branding Error Resilience: Continues deployment even if some .NET projects fail to build 🔒 Security Workflows Jiro Security Scan (jiro-kernel-security.yml) Triggers: Scheduled: Every Monday at 2 AM UTC Manual: Via workflow dispatch Purpose: Weekly comprehensive security audit of the codebase and dependencies. Security Checks: Package Vulnerability Scanning: Scans all NuGet packages for known vulnerabilities Includes transitive dependencies Generates detailed vulnerability reports Dependency Analysis: Analyzes all project dependencies Reports security advisories Provides remediation suggestions Regular Monitoring: Weekly automated execution Manual trigger capability for immediate scans GitHub Security tab integration CodeQL Integration (within main CI) Continuous Security Analysis: Static code analysis during every build Semantic code understanding Security vulnerability detection Integration with GitHub Security Advisory Database ⚡ Performance Monitoring Jiro Performance Test (jiro-kernel-performance.yml) Triggers: Scheduled: Every Sunday at 3 AM UTC Manual: Via workflow dispatch with optional benchmark filters Purpose: Regular performance monitoring and benchmarking of the Jiro application. Performance Testing: Benchmark Execution: Runs performance tests in Release configuration Supports filtered benchmark execution Measures execution time and resource usage Performance Regression Detection: Compares results against previous runs Identifies performance degradations Provides detailed performance reports Resource Monitoring: Memory usage analysis CPU utilization tracking Response time measurements 🛠️ Development and Debugging Simple Push Test (simple-test.yml) Triggers: Push to main branch (excluding src/** changes to avoid overlap) Purpose: Lightweight workflow for testing basic GitHub Actions functionality. Functionality: Verifies workflow trigger mechanisms Lists repository contents Searches for version information in project files Provides basic repository health checks Debug Workflow Triggers (debug-triggers.yml) Triggers: Push to main branch Pull requests to main or dev branches Purpose: Debugging and monitoring workflow trigger events. Debug Information: Event Details: Captures all GitHub event information Branch Information: Tracks branch changes and merges Pull Request Analysis: Monitors PR lifecycle events Commit Tracking: Logs commit SHAs and changes 🔄 Local Development Support Local CI Testing Scripts The project includes scripts for local testing of CI/CD workflows: local-ci-test.sh (Linux/macOS) Mimics GitHub Actions workflows locally Supports building, testing, and Docker operations Provides colored output for better readability Validates changes before pushing to remote Development Automation Scripts The scripts/ directory contains a comprehensive set of automation tools for developers and CI/CD workflows: Setup and Onboarding Scripts setup-dev.ps1 / setup-dev.sh Purpose: Automated development environment setup for new contributors Features: Tool validation, dependency installation, configuration file setup Usage: First-time developer onboarding and environment validation Integration: Used by CI/CD for environment preparation Documentation Scripts docfx-gen.ps1 / docfx-gen.sh Purpose: Generate API documentation using DocFX Features: Build and serve documentation locally Integration: Used by deploy-docs.yml workflow for documentation deployment markdown-lint.ps1 / markdown-lint.sh Purpose: Ensure markdown quality and consistency Features: Lint checking with auto-fix capabilities Integration: Used by markdown-lint.yml workflow for documentation quality generate-project-structure.ps1 / generate-project-structure.sh Purpose: Generate project structure documentation Features: Tree view generation with smart filtering Integration: Keeps project documentation up-to-date automatically Testing and Validation Scripts local-ci-test.ps1 / local-ci-test.sh Purpose: Run complete CI/CD pipeline locally Features: Build, test, documentation, and linting validation Benefits: Pre-push validation to catch issues early Parallel to: All GitHub Actions workflows Release Management Scripts create-release.ps1 / create-release.sh Purpose: Automated release process Features: Version management, tagging, and artifact preparation Integration: Supports the create-release.yml workflow Cross-Platform Compatibility All scripts are available in both PowerShell (.ps1) and Bash (.sh) versions: Windows: PowerShell scripts with Windows PowerShell or PowerShell Core Linux/macOS: Bash scripts or PowerShell Core CI/CD: Platform-appropriate scripts selected automatically Developer Choice: Use preferred shell environment Script Integration with Workflows %%{init: { \"theme\": \"base\", \"themeVariables\": { \"background\": \"#FFFFFF\", \"primaryColor\": \"#2E7D32\", \"primaryTextColor\": \"#000000\", \"primaryBorderColor\": \"#1B5E20\", \"lineColor\": \"#424242\", \"sectionBkgColor\": \"#E8F5E9\", \"altSectionBkgColor\": \"#C8E6C9\", \"gridColor\": \"#E0E0E0\", \"secondaryColor\": \"#1976D2\", \"tertiaryColor\": \"#7B1FA2\", \"cScale0\": \"#FFFFFF\", \"cScale1\": \"#F5F5F5\", \"cScale2\": \"#E0E0E0\", \"cScale3\": \"#9E9E9E\", \"cScale4\": \"#000000\", \"clusterBkg\": \"#F5F5F5\", \"clusterBorder\": \"#757575\" } }}%% graph TD A[Developer Scripts] --> B[Local Testing] A --> C[CI/CD Workflows] B --> B1[setup-dev.ps1/sh] B --> B2[local-ci-test.ps1/sh] B --> B3[docfx-gen.ps1/sh] B --> B4[markdown-lint.ps1/sh] C --> C1[deploy-docs.yml] C --> C2[markdown-lint.yml] C --> C3[jiro-kernel-ci.yml] C --> C4[create-release.yml] B1 --> |Environment Setup| C3 B2 --> |Local Validation| C3 B3 --> |Documentation Build| C1 B4 --> |Quality Check| C2 For detailed information about all available scripts, see Scripts Reference. 🔄 Workflow Integration Matrix The following table shows how development scripts integrate with GitHub Actions workflows: Script/Workflow jiro-kernel-ci.yml create-release.yml docker-build.yml jiro-kernel-security.yml markdown-lint.yml deploy-docs.yml setup-dev.ps1 / setup-dev.sh No No No No No No docfx-gen.ps1 / docfx-gen.sh No No No No No Yes markdown-lint.ps1 / markdown-lint.sh No No No No Yes No generate-project-structure.ps1 / generate-project-structure.sh No No No No No No local-ci-test.ps1 / local-ci-test.sh Yes No Yes Yes Yes Yes create-release.ps1 / create-release.sh No Yes No No No No This table summarizes the integration of development automation scripts with the various CI/CD workflows in the Jiro project. Scripts like local-ci-test are integral to multiple workflows for local testing, security scanning, and documentation generation. Other scripts, such as create-release, are specifically tied to release automation workflows. This modular approach allows for flexible and comprehensive automation coverage across the development lifecycle. Script GitHub Workflow Purpose Integration Type setup-dev.ps1/.sh Environment Setup Developer onboarding Manual/CI preparation local-ci-test.ps1/.sh All workflows Local validation Developer testing docfx-gen.ps1/.sh deploy-docs.yml Documentation build Automated deployment markdown-lint.ps1/.sh markdown-lint.yml Quality assurance Automated validation generate-project-structure.ps1/.sh Manual/Scheduled Documentation update Manual/Automated create-release.ps1/.sh create-release.yml Release management Manual/Triggered"
  },
  "index.html": {
    "href": "index.html",
    "title": "Welcome to Jiro | Jiro Documentation",
    "keywords": "Welcome to Jiro Jiro is a comprehensive application framework designed for building modern, scalable applications with powerful command handling, conversation management, and extensible architecture. 🚀 Quick Start Get started with Jiro in minutes: Documentation - Learn about Jiro's features and architecture API Reference - Explore the complete API documentation User Guide - Step-by-step implementation guide ✨ Key Features 🎯 Command System - Extensible command handling framework 💬 Conversation Management - Advanced chat session and message handling 🌤️ Weather Integration - Built-in weather services and data 👤 User Management - Complete authentication and authorization 🗄️ Database Integration - Entity Framework Core with repository pattern 🔌 Extensible Architecture - Plugin-based system for easy extension 📚 Documentation Sections 📖 Documentation Project overview and architecture Getting started guides User documentation Workflow and pipelines Changelog and version history 🔧 API Reference Complete .NET API documentation Class and interface references Method documentation with examples Generated from source code 🏗️ Architecture Overview Jiro follows a layered architecture with clear separation of concerns: Jiro.Core - Core business logic and domain models Jiro.Infrastructure - Data access and external services Jiro.App - Application configuration and startup 🎓 Engineering Thesis Project This project is developed as part of an engineering thesis demonstrating modern AI assistant development with clean architecture principles. Ready to dive in? Start with Documentation or explore the API Reference."
  }
}