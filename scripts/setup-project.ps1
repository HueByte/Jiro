#!/usr/bin/env pwsh
<#
.SYNOPSIS
    Setup script for Jiro project configuration
.DESCRIPTION
    Interactive setup script that prompts for critical configuration values and sets up the Jiro project
#>

param(
    [switch]$Help
)

if ($Help) {
    Write-Host "Jiro Project Setup Script" -ForegroundColor Cyan
    Write-Host ""
    Write-Host "This script will interactively configure your Jiro project by prompting for:"
    Write-Host "  - Jiro API Key (for instance and cloud services)"
    Write-Host "  - OpenAI API Key (for AI chat features)"
    Write-Host ""
    Write-Host "Usage: ./setup-project.ps1"
    Write-Host "       ./setup-project.ps1 -Help    (show this help)"
    exit 0
}

Write-Host "=== Jiro Project Setup ===" -ForegroundColor Cyan
Write-Host ""

# Configuration values
$config = @{
    # Main API Key for this Jiro instance (also used for JiroCloud)
    ApiKey = ""
    
    # Chat configuration
    ChatAuthToken = ""
    ChatSystemMessage = "I want you to act as personal assistant called Jiro. You are friendly, funny and sarcastic. You can ask me anything you want and engage in conversation."
    ChatTokenLimit = 2000
    ChatEnabled = $true
    JiroCloudGrpcServerUrl = "https://jiro.huebytes.com/grpc"
    JiroCloudGrpcMaxRetries = 3
    JiroCloudGrpcTimeoutMs = 30000
    JiroCloudWebSocketHubUrl = "https://jiro.huebytes.com/hubs/instanceHub"
    JiroCloudWebSocketHandshakeTimeoutMs = 15000
    JiroCloudWebSocketKeepAliveIntervalMs = 15000
    JiroCloudWebSocketReconnectionAttempts = 5
    JiroCloudWebSocketReconnectionDelayMs = 5000
    JiroCloudWebSocketServerTimeoutMs = 30000
}

# Generate secure defaults
function New-SecureString {
    param([int]$Length = 32)
    $chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789!@#$%^&*'
    $random = New-Object System.Random
    $result = ""
    for ($i = 0; $i -lt $Length; $i++) {
        $result += $chars[$random.Next($chars.Length)]
    }
    return $result
}

Write-Host "This script will configure your Jiro project with the necessary settings." -ForegroundColor Green
Write-Host "Press Enter to use default values shown in [brackets]" -ForegroundColor Gray
Write-Host ""

# Main API Key (used for both Jiro instance and JiroCloud)
Write-Host "=== Core Configuration ===" -ForegroundColor Cyan
$apiKey = Read-Host "Enter Jiro API Key (for instance and cloud services) [auto-generated]"
if ($apiKey) { 
    $config.ApiKey = $apiKey 
} else {
    $config.ApiKey = New-SecureString -Length 32
    Write-Host "Generated secure API key: $($config.ApiKey)" -ForegroundColor Green
}

# Chat Configuration
Write-Host ""
Write-Host "=== AI Chat Configuration ===" -ForegroundColor Cyan
$chatAuthToken = Read-Host "Enter OpenAI API Key (required for AI chat features) [leave empty to configure later]"
if ($chatAuthToken) { 
    $config.ChatAuthToken = $chatAuthToken 
    Write-Host "OpenAI API key configured successfully" -ForegroundColor Green
}

# Set JiroCloud URL defaults (non-configurable)
Write-Host ""
Write-Host "=== JiroCloud Configuration ===" -ForegroundColor Cyan
Write-Host "Setting JiroCloud service URLs to default production endpoints:" -ForegroundColor Gray
Write-Host "  • gRPC Server: $($config.JiroCloudGrpcServerUrl)" -ForegroundColor Gray
Write-Host "  • WebSocket Hub: $($config.JiroCloudWebSocketHubUrl)" -ForegroundColor Gray
Write-Host "  • API URL: https://jiro.huebytes.com/api" -ForegroundColor Gray

# Create .env file
Write-Host ""
Write-Host "Creating .env file..." -ForegroundColor Cyan

$envContent = @"
# Jiro Environment Configuration
# Generated by setup script on $(Get-Date -Format "yyyy-MM-dd HH:mm:ss")

# ======================
# Docker Ports Configuration  
# ======================
JIRO_HTTP_PORT=8080
JIRO_HTTPS_PORT=8443
JIRO_ADDITIONAL_PORT=18090

# ======================
# MySQL Database Configuration
# ======================
DB_SERVER=mysql
MYSQL_DATABASE=jiro
MYSQL_USER=jiro
MYSQL_PASSWORD=your-secure-password-here
MYSQL_ROOT_PASSWORD=your-root-password-here
MYSQL_PORT=3306

# ======================
# Jiro Application Configuration (JIRO_ prefix)
# ======================
# Application API Configuration
JIRO_ApiKey=$($config.ApiKey)

# OpenAI Configuration (for AI features)
$(if ($config.ChatAuthToken) { "OPENAI_API_KEY=$($config.ChatAuthToken)" } else { "# OPENAI_API_KEY=sk-your-openai-api-key-here" })

# Chat Configuration
$(if ($config.ChatAuthToken) { "JIRO_Chat__AuthToken=$($config.ChatAuthToken)" } else { "# JIRO_Chat__AuthToken=sk-your-openai-api-key-here" })
JIRO_Chat__SystemMessage=$($config.ChatSystemMessage)
JIRO_Chat__TokenLimit=$($config.ChatTokenLimit)
JIRO_Chat__Enabled=$($config.ChatEnabled.ToString().ToLower())

# JiroCloud Configuration
JIRO_JiroCloud__ApiKey=$($config.ApiKey)
JIRO_JiroCloud__Grpc__ServerUrl=$($config.JiroCloudGrpcServerUrl)
JIRO_JiroCloud__Grpc__MaxRetries=$($config.JiroCloudGrpcMaxRetries)
JIRO_JiroCloud__Grpc__TimeoutMs=$($config.JiroCloudGrpcTimeoutMs)
JIRO_JiroCloud__WebSocket__HubUrl=$($config.JiroCloudWebSocketHubUrl)
JIRO_JiroCloud__WebSocket__HandshakeTimeoutMs=$($config.JiroCloudWebSocketHandshakeTimeoutMs)
JIRO_JiroCloud__WebSocket__KeepAliveIntervalMs=$($config.JiroCloudWebSocketKeepAliveIntervalMs)
JIRO_JiroCloud__WebSocket__ReconnectionAttempts=$($config.JiroCloudWebSocketReconnectionAttempts)
JIRO_JiroCloud__WebSocket__ReconnectionDelayMs=$($config.JiroCloudWebSocketReconnectionDelayMs)
JIRO_JiroCloud__WebSocket__ServerTimeoutMs=$($config.JiroCloudWebSocketServerTimeoutMs)

# ======================
# Advanced JIRO_ Configuration Overrides
# ======================
# Custom Data Paths (optional - uncomment to customize)
# JIRO_DataPaths__Logs=Data/Logs
# JIRO_DataPaths__Messages=Data/Messages
# JIRO_DataPaths__Plugins=Data/Plugins
# JIRO_DataPaths__Themes=Data/Themes
"@

$envPath = Join-Path $PSScriptRoot ".." ".env"
Set-Content -Path $envPath -Value $envContent -Encoding UTF8

# Create appsettings.json from example
Write-Host "Creating appsettings.json..." -ForegroundColor Cyan

$appSettingsExamplePath = Join-Path $PSScriptRoot ".." "src" "Jiro.Kernel" "Jiro.App" "Configuration" "appsettings.example.json"
$appSettingsPath = Join-Path $PSScriptRoot ".." "src" "Jiro.Kernel" "Jiro.App" "Configuration" "appsettings.json"

if (Test-Path $appSettingsExamplePath) {
    $appSettings = Get-Content $appSettingsExamplePath -Raw | ConvertFrom-Json
    
    # Remove main API key property if it exists (consolidated to JiroCloud.ApiKey)
    if ($appSettings.PSObject.Properties["ApiKey"]) {
        $appSettings.PSObject.Properties.Remove("ApiKey")
    }
    
    # Update Chat settings
    if ($appSettings.Chat) {
        $appSettings.Chat.AuthToken = if ($config.ChatAuthToken) { $config.ChatAuthToken } else { "your-openai-api-key" }
        $appSettings.Chat.SystemMessage = $config.ChatSystemMessage
        $appSettings.Chat.TokenLimit = $config.ChatTokenLimit
        $appSettings.Chat.Enabled = $config.ChatEnabled
    }
    
    # Update JiroCloud settings
    if ($appSettings.JiroCloud) {
        $appSettings.JiroCloud.ApiKey = $config.ApiKey
        $appSettings.JiroCloud.ApiUrl = "https://jiro.huebytes.com/api"
        if ($appSettings.JiroCloud.Grpc) {
            $appSettings.JiroCloud.Grpc.ServerUrl = $config.JiroCloudGrpcServerUrl
            $appSettings.JiroCloud.Grpc.MaxRetries = $config.JiroCloudGrpcMaxRetries
            $appSettings.JiroCloud.Grpc.TimeoutMs = $config.JiroCloudGrpcTimeoutMs
        }
        if ($appSettings.JiroCloud.WebSocket) {
            $appSettings.JiroCloud.WebSocket.HubUrl = $config.JiroCloudWebSocketHubUrl
            $appSettings.JiroCloud.WebSocket.HandshakeTimeoutMs = $config.JiroCloudWebSocketHandshakeTimeoutMs
            $appSettings.JiroCloud.WebSocket.KeepAliveIntervalMs = $config.JiroCloudWebSocketKeepAliveIntervalMs
            $appSettings.JiroCloud.WebSocket.ReconnectionAttempts = $config.JiroCloudWebSocketReconnectionAttempts
            $appSettings.JiroCloud.WebSocket.ReconnectionDelayMs = $config.JiroCloudWebSocketReconnectionDelayMs
            $appSettings.JiroCloud.WebSocket.ServerTimeoutMs = $config.JiroCloudWebSocketServerTimeoutMs
        }
    }
    
    $appSettings | ConvertTo-Json -Depth 10 | Set-Content -Path $appSettingsPath -Encoding UTF8
    Write-Host "Created appsettings.json" -ForegroundColor Green
} else {
    Write-Warning "appsettings.example.json not found, skipping appsettings.json creation"
}

# Restore dependencies
Write-Host ""
Write-Host "Restoring NuGet packages..." -ForegroundColor Cyan
Push-Location (Join-Path $PSScriptRoot "..")
dotnet restore src/Main.sln
Pop-Location

# Build solution
Write-Host ""
Write-Host "Building solution..." -ForegroundColor Cyan
Push-Location (Join-Path $PSScriptRoot "..")
dotnet build src/Main.sln
Pop-Location

Write-Host ""
Write-Host "=== Setup Complete ===" -ForegroundColor Green
Write-Host ""
Write-Host "Configuration files created:" -ForegroundColor Cyan
Write-Host "  - .env (Docker environment)"
Write-Host "  - appsettings.json (Application settings)"
Write-Host ""

if (-not $config.ChatAuthToken) {
    Write-Host ""
    Write-Host "IMPORTANT: Configuration items to set manually:" -ForegroundColor Yellow
    Write-Host "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
    Write-Host "  • OpenAI API Key: Required for AI chat features" -ForegroundColor Red
    Write-Host "    - Update 'OPENAI_API_KEY' and 'JIRO_Chat__AuthToken' in .env file"
    Write-Host "    - Update 'Chat.AuthToken' in appsettings.json"
    Write-Host ""
    Write-Host "  Generated secure values:"
    Write-Host "  • Jiro API Key: $($config.ApiKey)"
    Write-Host ""
    Write-Host "  Service URLs:"
    Write-Host "  • JiroCloud gRPC: $($config.JiroCloudGrpcServerUrl)"
    Write-Host "  • JiroCloud WebSocket: $($config.JiroCloudWebSocketHubUrl)"
    Write-Host "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
    Write-Host ""
}

Write-Host "Next steps:" -ForegroundColor Yellow
Write-Host "1. Review the generated configuration files (.env and appsettings.json)"
if (-not $config.ChatAuthToken) {
    Write-Host "2. Configure OpenAI API Key (see above) for AI chat features"
    Write-Host "3. Run database migrations: dotnet ef database update -p src/Jiro.Kernel/Jiro.Infrastructure -s src/Jiro.Kernel/Jiro.App"
    Write-Host "4. Start the application:"
} else {
    Write-Host "2. Run database migrations: dotnet ef database update -p src/Jiro.Kernel/Jiro.Infrastructure -s src/Jiro.Kernel/Jiro.App"
    Write-Host "3. Start the application:"
}
Write-Host "   - Direct: cd src/Jiro.Kernel/Jiro.App && dotnet run"
Write-Host ""