#!/usr/bin/env pwsh
<#
.SYNOPSIS
    Setup script for Jiro project configuration
.DESCRIPTION
    Interactive setup script that prompts for critical configuration values and sets up the Jiro project
#>

param(
    [switch]$Help
)

if ($Help) {
    Write-Host "Jiro Project Setup Script" -ForegroundColor Cyan
    Write-Host ""
    Write-Host "This script will interactively configure your Jiro project by prompting for:"
    Write-Host "  - JiroCloud API Key (from Jiro Cloud web app - REQUIRED)"
    Write-Host "  - OpenAI API Key (for AI chat features - optional)"
    Write-Host ""
    Write-Host "Usage: ./setup-project.ps1"
    Write-Host "       ./setup-project.ps1 -Help    (show this help)"
    exit 0
}

Write-Host "=== Jiro Project Setup ===" -ForegroundColor Cyan
Write-Host ""

# Configuration values
$config = @{
    # JiroCloud API Key (provided by user from Jiro Cloud web app - required)
    JiroCloudApiKey = ""
    
    # Chat configuration
    ChatAuthToken = ""
    ChatSystemMessage = "I want you to act as personal assistant called Jiro. You are friendly, funny and sarcastic. You can ask me anything you want and engage in conversation."
    ChatTokenLimit = 2000
    ChatEnabled = $true
    JiroCloudApiUrl = "https://jiro.huebytes.com/api"
    JiroCloudGrpcServerUrl = "https://jiro.huebytes.com/grpc"
    JiroCloudGrpcMaxRetries = 3
    JiroCloudGrpcTimeoutMs = 30000
    JiroCloudWebSocketHubUrl = "https://jiro.huebytes.com/hubs/instanceHub"
    JiroCloudWebSocketHandshakeTimeoutMs = 15000
    JiroCloudWebSocketKeepAliveIntervalMs = 15000
    JiroCloudWebSocketReconnectionAttempts = 5
    JiroCloudWebSocketReconnectionDelayMs = 5000
    JiroCloudWebSocketServerTimeoutMs = 30000
}

# Generate secure defaults
function New-SecureString {
    param([int]$Length = 32)
    $chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789!@#$%^&*'
    $random = New-Object System.Random
    $result = ""
    for ($i = 0; $i -lt $Length; $i++) {
        $result += $chars[$random.Next($chars.Length)]
    }
    return $result
}

Write-Host "This script will configure your Jiro project with the necessary settings." -ForegroundColor Green
Write-Host "Press Enter to use default values shown in [brackets]" -ForegroundColor Gray
Write-Host ""

# JiroCloud API Key (required - from Jiro Cloud web app)
Write-Host "=== Core Configuration ===" -ForegroundColor Cyan
Write-Host "Get your JiroCloud API Key from the Jiro Cloud web application" -ForegroundColor Gray
$jiroCloudApiKey = Read-Host "Enter JiroCloud API Key (required for all cloud services)"
if ($jiroCloudApiKey) { 
    $config.JiroCloudApiKey = $jiroCloudApiKey 
    Write-Host "JiroCloud API key configured successfully" -ForegroundColor Green
} else {
    Write-Host "WARNING: JiroCloud API key is required for the application to function" -ForegroundColor Yellow
}

# Chat Configuration
Write-Host ""
Write-Host "=== AI Chat Configuration ===" -ForegroundColor Cyan
$chatAuthToken = Read-Host "Enter OpenAI API Key (required for AI chat features) [leave empty to configure later]"
if ($chatAuthToken) { 
    $config.ChatAuthToken = $chatAuthToken 
    Write-Host "OpenAI API key configured successfully" -ForegroundColor Green
}

# Set JiroCloud URL defaults (non-configurable)
Write-Host ""
Write-Host "=== JiroCloud Configuration ===" -ForegroundColor Cyan
Write-Host "Setting JiroCloud service URLs to default production endpoints:" -ForegroundColor Gray
Write-Host "  • gRPC Server: $($config.JiroCloudGrpcServerUrl)" -ForegroundColor Gray
Write-Host "  • WebSocket Hub: $($config.JiroCloudWebSocketHubUrl)" -ForegroundColor Gray
Write-Host "  • API URL: https://jiro.huebytes.com/api" -ForegroundColor Gray

# Create .env file
Write-Host ""
Write-Host "Creating .env file..." -ForegroundColor Cyan

$envContent = @"
# Jiro Client Environment Configuration
# Generated by setup script on $(Get-Date -Format "yyyy-MM-dd HH:mm:ss")
# All configuration values can override appsettings.json using JIRO_ prefix

# ======================
# Core Application Configuration
# ======================

# ======================
# OpenAI Configuration (for AI features)
# ======================
$(if ($config.ChatAuthToken) { "OPENAI_API_KEY=$($config.ChatAuthToken)" } else { "# OPENAI_API_KEY=sk-your-openai-api-key-here" })
$(if ($config.ChatAuthToken) { "JIRO_Chat__AuthToken=$($config.ChatAuthToken)" } else { "# JIRO_Chat__AuthToken=sk-your-openai-api-key-here" })
JIRO_Chat__SystemMessage=$($config.ChatSystemMessage)
JIRO_Chat__TokenLimit=$($config.ChatTokenLimit)
JIRO_Chat__Enabled=$($config.ChatEnabled.ToString().ToLower())

# ======================
# JiroCloud Service Configuration
# ======================
JIRO_JiroCloud__ApiKey=$($config.JiroCloudApiKey)
JIRO_JiroCloud__ApiUrl=$($config.JiroCloudApiUrl)
JIRO_JiroCloud__Grpc__ServerUrl=$($config.JiroCloudGrpcServerUrl)
JIRO_JiroCloud__Grpc__MaxRetries=$($config.JiroCloudGrpcMaxRetries)
JIRO_JiroCloud__Grpc__TimeoutMs=$($config.JiroCloudGrpcTimeoutMs)
JIRO_JiroCloud__WebSocket__HubUrl=$($config.JiroCloudWebSocketHubUrl)
JIRO_JiroCloud__WebSocket__HandshakeTimeoutMs=$($config.JiroCloudWebSocketHandshakeTimeoutMs)
JIRO_JiroCloud__WebSocket__KeepAliveIntervalMs=$($config.JiroCloudWebSocketKeepAliveIntervalMs)
JIRO_JiroCloud__WebSocket__ReconnectionAttempts=$($config.JiroCloudWebSocketReconnectionAttempts)
JIRO_JiroCloud__WebSocket__ReconnectionDelayMs=$($config.JiroCloudWebSocketReconnectionDelayMs)
JIRO_JiroCloud__WebSocket__ServerTimeoutMs=$($config.JiroCloudWebSocketServerTimeoutMs)

# ======================
# Database Configuration (SQLite for local development)
# ======================
JIRO_ConnectionStrings__JiroContext=Data Source=Data/Database/jiro.db

# ======================
# Optional Configuration Overrides
# ======================
# Uncomment and customize as needed:

# Custom Data Paths
# JIRO_DataPaths__Logs=Data/Logs
# JIRO_DataPaths__Messages=Data/Messages
# JIRO_DataPaths__Plugins=Data/Plugins
# JIRO_DataPaths__Themes=Data/Themes

# Logging Configuration
# JIRO_Serilog__MinimumLevel__Default=Information
# JIRO_Serilog__WriteTo__1__Args__path=Data/Logs/jiro-detailed_.txt
# JIRO_Serilog__WriteTo__2__Args__path=Data/Logs/jiro-errors_.txt
"@

$envPath = Join-Path $PSScriptRoot ".." ".env"
Set-Content -Path $envPath -Value $envContent -Encoding UTF8

# Create appsettings.json from example
Write-Host "Creating appsettings.json..." -ForegroundColor Cyan

$appSettingsExamplePath = Join-Path $PSScriptRoot ".." "src" "Jiro.Kernel" "Jiro.App" "Configuration" "appsettings.example.json"
$appSettingsPath = Join-Path $PSScriptRoot ".." "src" "Jiro.Kernel" "Jiro.App" "Configuration" "appsettings.json"

if (Test-Path $appSettingsExamplePath) {
    $appSettings = Get-Content $appSettingsExamplePath -Raw | ConvertFrom-Json
    
    # Remove main API key property if it exists (only JiroCloud.ApiKey is used)
    if ($appSettings.PSObject.Properties["ApiKey"]) {
        $appSettings.PSObject.Properties.Remove("ApiKey")
    }
    
    # Update Chat settings
    if ($appSettings.Chat) {
        $appSettings.Chat.AuthToken = if ($config.ChatAuthToken) { $config.ChatAuthToken } else { "your-openai-api-key" }
        $appSettings.Chat.SystemMessage = $config.ChatSystemMessage
        $appSettings.Chat.TokenLimit = $config.ChatTokenLimit
        $appSettings.Chat.Enabled = $config.ChatEnabled
    }
    
    # Update JiroCloud settings
    if ($appSettings.JiroCloud) {
        $appSettings.JiroCloud.ApiKey = $config.JiroCloudApiKey
        $appSettings.JiroCloud.ApiUrl = $config.JiroCloudApiUrl
        if ($appSettings.JiroCloud.Grpc) {
            $appSettings.JiroCloud.Grpc.ServerUrl = $config.JiroCloudGrpcServerUrl
            $appSettings.JiroCloud.Grpc.MaxRetries = $config.JiroCloudGrpcMaxRetries
            $appSettings.JiroCloud.Grpc.TimeoutMs = $config.JiroCloudGrpcTimeoutMs
        }
        if ($appSettings.JiroCloud.WebSocket) {
            $appSettings.JiroCloud.WebSocket.HubUrl = $config.JiroCloudWebSocketHubUrl
            $appSettings.JiroCloud.WebSocket.HandshakeTimeoutMs = $config.JiroCloudWebSocketHandshakeTimeoutMs
            $appSettings.JiroCloud.WebSocket.KeepAliveIntervalMs = $config.JiroCloudWebSocketKeepAliveIntervalMs
            $appSettings.JiroCloud.WebSocket.ReconnectionAttempts = $config.JiroCloudWebSocketReconnectionAttempts
            $appSettings.JiroCloud.WebSocket.ReconnectionDelayMs = $config.JiroCloudWebSocketReconnectionDelayMs
            $appSettings.JiroCloud.WebSocket.ServerTimeoutMs = $config.JiroCloudWebSocketServerTimeoutMs
        }
    }
    
    $appSettings | ConvertTo-Json -Depth 10 | Set-Content -Path $appSettingsPath -Encoding UTF8
    Write-Host "Created appsettings.json" -ForegroundColor Green
} else {
    Write-Warning "appsettings.example.json not found, skipping appsettings.json creation"
}

# Restore dependencies
Write-Host ""
Write-Host "Restoring NuGet packages..." -ForegroundColor Cyan
Push-Location (Join-Path $PSScriptRoot "..")
dotnet restore src/Main.sln
Pop-Location

# Build solution
Write-Host ""
Write-Host "Building solution..." -ForegroundColor Cyan
Push-Location (Join-Path $PSScriptRoot "..")
dotnet build src/Main.sln
Pop-Location

Write-Host ""
Write-Host "=== Setup Complete ===" -ForegroundColor Green
Write-Host ""
Write-Host "Configuration files created:" -ForegroundColor Cyan
Write-Host "  - .env (Environment variables - can override any appsettings.json value)"
Write-Host "  - appsettings.json (Application configuration)"
Write-Host ""
Write-Host "Service endpoints configured:" -ForegroundColor Cyan
Write-Host "  • JiroCloud API: $($config.JiroCloudApiUrl)"
Write-Host "  • JiroCloud gRPC: $($config.JiroCloudGrpcServerUrl)"
Write-Host "  • JiroCloud WebSocket: $($config.JiroCloudWebSocketHubUrl)"
Write-Host ""

$hasWarnings = $false

if (-not $config.JiroCloudApiKey) {
    if (-not $hasWarnings) {
        Write-Host "IMPORTANT: Missing required configuration" -ForegroundColor Yellow
        Write-Host "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
        $hasWarnings = $true
    }
    Write-Host "  • JiroCloud API Key: Required for cloud services connection" -ForegroundColor Red
    Write-Host "    - Update 'JIRO_JiroCloud__ApiKey' in .env file"
}

if (-not $config.ChatAuthToken) {
    if (-not $hasWarnings) {
        Write-Host "IMPORTANT: Missing optional configuration" -ForegroundColor Yellow
        Write-Host "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
        $hasWarnings = $true
    }
    Write-Host "  • OpenAI API Key: Required for AI chat features" -ForegroundColor Yellow
    Write-Host "    - Update 'OPENAI_API_KEY' and 'JIRO_Chat__AuthToken' in .env file"
}


Write-Host "Next steps:" -ForegroundColor Yellow
$stepNumber = 1

if (-not $config.JiroCloudApiKey) {
    Write-Host "$stepNumber. Add your JiroCloud API key to .env file (required for cloud services)"
    $stepNumber++
}

if (-not $config.ChatAuthToken) {
    Write-Host "$stepNumber. Add your OpenAI API key to .env file (optional for AI features)"
    $stepNumber++
}

Write-Host "$stepNumber. Run database migrations: dotnet ef database update -p src/Jiro.Kernel/Jiro.Infrastructure -s src/Jiro.Kernel/Jiro.App"
$stepNumber++
Write-Host "$stepNumber. Start the application: cd src/Jiro.Kernel/Jiro.App && dotnet run"
Write-Host ""
Write-Host "All configuration values can be overridden using environment variables with JIRO_ prefix." -ForegroundColor Gray
Write-Host ""