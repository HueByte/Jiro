#!/bin/bash

# Setup script for Jiro project configuration

set -e

# Color codes
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
CYAN='\033[0;36m'
GRAY='\033[0;90m'
NC='\033[0m' # No Color

# Parse arguments
HELP=false
DEFAULT=false
NON_INTERACTIVE=false

while [[ $# -gt 0 ]]; do
    case $1 in
        --default)
            DEFAULT=true
            shift
            ;;
        --non-interactive)
            NON_INTERACTIVE=true
            shift
            ;;
        --help|-h)
            HELP=true
            shift
            ;;
        *)
            echo -e "${RED}Unknown option: $1${NC}"
            echo "Use --help for usage information"
            exit 1
            ;;
    esac
done

if [ "$HELP" = true ]; then
    echo -e "${CYAN}Jiro Project Setup Script${NC}"
    echo ""
    echo "This script will interactively configure your Jiro project by prompting for:"
    echo "  - JiroCloud API Key (from Jiro Cloud web app - REQUIRED)"
    echo "  - OpenAI API Key (for AI chat features - optional)"
    echo ""
    echo "Usage: $0 [OPTIONS]"
    echo "       $0 --default         (interactive setup - recommended)"
    echo "       $0 --non-interactive (uses secure defaults only)"
    echo "       $0 --help            (show this help)"
    exit 0
fi

echo -e "${CYAN}=== Jiro Project Setup ===${NC}"
echo ""

# Get script directory
SCRIPT_DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"
PROJECT_ROOT="$(dirname "$SCRIPT_DIR")"

# Function to generate secure random string
generate_secure_string() {
    local length=${1:-32}
    tr -dc 'A-Za-z0-9!@#$%^&*' < /dev/urandom | head -c "$length"
}

# Configuration variables
declare -A config
# JiroCloud API Key (provided by user from Jiro Cloud web app - required)
config[JiroCloudApiKey]=""

# Chat configuration
config[ChatAuthToken]=""
config[ChatSystemMessage]="I want you to act as personal assistant called Jiro. You are friendly, funny and sarcastic. You can ask me anything you want and engage in conversation."
config[ChatTokenLimit]=2000
config[ChatEnabled]="true"

config[JiroCloudApiUrl]="https://jiro.huebytes.com/api"
config[JiroCloudGrpcServerUrl]="https://jiro.huebytes.com/grpc"
config[JiroCloudGrpcMaxRetries]=3
config[JiroCloudGrpcTimeoutMs]=30000
config[JiroCloudWebSocketHubUrl]="https://jiro.huebytes.com/hubs/instanceHub"
config[JiroCloudWebSocketHandshakeTimeoutMs]=15000
config[JiroCloudWebSocketKeepAliveIntervalMs]=15000
config[JiroCloudWebSocketReconnectionAttempts]=5
config[JiroCloudWebSocketReconnectionDelayMs]=5000
config[JiroCloudWebSocketServerTimeoutMs]=30000

if [ "$NON_INTERACTIVE" = false ]; then
    # Interactive setup
    echo -e "${GREEN}This script will configure your Jiro project with the necessary settings.${NC}"
    echo -e "${GRAY}Press Enter to use default values shown in [brackets]${NC}"
    echo ""

    # JiroCloud API Key (required - from Jiro Cloud web app)
    echo -e "${CYAN}=== Core Configuration ===${NC}"
    echo -e "${GRAY}Get your JiroCloud API Key from the Jiro Cloud web application${NC}"
    read -p "Enter JiroCloud API Key (required for all cloud services): " jiro_cloud_api_key
    if [ -n "$jiro_cloud_api_key" ]; then
        config[JiroCloudApiKey]="$jiro_cloud_api_key"
        echo -e "${GREEN}JiroCloud API key configured successfully${NC}"
    else
        echo -e "${YELLOW}WARNING: JiroCloud API key is required for the application to function${NC}"
    fi

    # Chat Configuration
    echo ""
    echo -e "${CYAN}=== AI Chat Configuration ===${NC}"
    read -p "Enter OpenAI API Key (required for AI chat features) [leave empty to configure later]: " chat_auth_token
    if [ -n "$chat_auth_token" ]; then
        config[ChatAuthToken]="$chat_auth_token"
        echo -e "${GREEN}OpenAI API key configured successfully${NC}"
    fi

    # Set JiroCloud URL defaults (non-configurable)
    echo ""
    echo -e "${CYAN}=== JiroCloud Configuration ===${NC}"
    echo -e "${GRAY}Setting JiroCloud service URLs to default production endpoints:${NC}"
    echo -e "  ${GRAY}• gRPC Server: ${config[JiroCloudGrpcServerUrl]}${NC}"
    echo -e "  ${GRAY}• WebSocket Hub: ${config[JiroCloudWebSocketHubUrl]}${NC}"
    echo -e "  ${GRAY}• API URL: ${config[JiroCloudApiUrl]}${NC}"
else
    # Non-interactive setup - warn about required configuration
    echo -e "${YELLOW}WARNING: JiroCloud API key must be configured manually in .env file${NC}"
    echo -e "${GRAY}Using default JiroCloud service endpoints${NC}"
fi

# Create .env file
echo ""
echo -e "${CYAN}Creating .env file...${NC}"

cat > "$PROJECT_ROOT/.env" << EOF
# Jiro Client Environment Configuration
# Generated by setup script on $(date '+%Y-%m-%d %H:%M:%S')
# All configuration values can override appsettings.json using JIRO_ prefix

# ======================
# Core Application Configuration
# ======================

# ======================
# OpenAI Configuration (for AI features)
# ======================
EOF

if [ -n "${config[ChatAuthToken]}" ]; then
    echo "OPENAI_API_KEY=${config[ChatAuthToken]}" >> "$PROJECT_ROOT/.env"
else
    echo "# OPENAI_API_KEY=sk-your-openai-api-key-here" >> "$PROJECT_ROOT/.env"
fi

echo "" >> "$PROJECT_ROOT/.env"
echo "# Chat Configuration" >> "$PROJECT_ROOT/.env"
if [ -n "${config[ChatAuthToken]}" ]; then
    echo "JIRO_Chat__AuthToken=${config[ChatAuthToken]}" >> "$PROJECT_ROOT/.env"
else
    echo "# JIRO_Chat__AuthToken=sk-your-openai-api-key-here" >> "$PROJECT_ROOT/.env"
fi

cat >> "$PROJECT_ROOT/.env" << EOF
JIRO_Chat__SystemMessage=${config[ChatSystemMessage]}
JIRO_Chat__TokenLimit=${config[ChatTokenLimit]}
JIRO_Chat__Enabled=${config[ChatEnabled]}

# ======================
# JiroCloud Service Configuration
# ======================
JIRO_JiroCloud__ApiKey=${config[JiroCloudApiKey]}
JIRO_JiroCloud__ApiUrl=${config[JiroCloudApiUrl]}
JIRO_JiroCloud__Grpc__ServerUrl=${config[JiroCloudGrpcServerUrl]}
JIRO_JiroCloud__Grpc__MaxRetries=${config[JiroCloudGrpcMaxRetries]}
JIRO_JiroCloud__Grpc__TimeoutMs=${config[JiroCloudGrpcTimeoutMs]}
JIRO_JiroCloud__WebSocket__HubUrl=${config[JiroCloudWebSocketHubUrl]}
JIRO_JiroCloud__WebSocket__HandshakeTimeoutMs=${config[JiroCloudWebSocketHandshakeTimeoutMs]}
JIRO_JiroCloud__WebSocket__KeepAliveIntervalMs=${config[JiroCloudWebSocketKeepAliveIntervalMs]}
JIRO_JiroCloud__WebSocket__ReconnectionAttempts=${config[JiroCloudWebSocketReconnectionAttempts]}
JIRO_JiroCloud__WebSocket__ReconnectionDelayMs=${config[JiroCloudWebSocketReconnectionDelayMs]}
JIRO_JiroCloud__WebSocket__ServerTimeoutMs=${config[JiroCloudWebSocketServerTimeoutMs]}

# ======================
# Database Configuration (SQLite for local development)
# ======================
JIRO_ConnectionStrings__JiroContext=Data Source=Data/Database/jiro.db

# ======================
# Optional Configuration Overrides
# ======================
# Uncomment and customize as needed:

# Custom Data Paths
# JIRO_DataPaths__Logs=Data/Logs
# JIRO_DataPaths__Messages=Data/Messages
# JIRO_DataPaths__Plugins=Data/Plugins
# JIRO_DataPaths__Themes=Data/Themes

# Logging Configuration
# JIRO_Serilog__MinimumLevel__Default=Information
# JIRO_Serilog__WriteTo__1__Args__path=Data/Logs/jiro-detailed_.txt
# JIRO_Serilog__WriteTo__2__Args__path=Data/Logs/jiro-errors_.txt
EOF

# Create appsettings.json from example
echo -e "${CYAN}Creating appsettings.json...${NC}"

APPSETTINGS_EXAMPLE="$PROJECT_ROOT/src/Jiro.Kernel/Jiro.App/Configuration/appsettings.example.json"
APPSETTINGS="$PROJECT_ROOT/src/Jiro.Kernel/Jiro.App/Configuration/appsettings.json"

if [ -f "$APPSETTINGS_EXAMPLE" ]; then
    # Copy and update appsettings.json using jq if available, otherwise use sed
    if command -v jq &> /dev/null; then
        jq "del(.ApiKey) | 
            .Chat.AuthToken = \"${config[ChatAuthToken]:-your-openai-api-key}\" |
            .Chat.SystemMessage = \"${config[ChatSystemMessage]}\" |
            .Chat.TokenLimit = ${config[ChatTokenLimit]} |
            .Chat.Enabled = ${config[ChatEnabled]} |
            .JiroCloud.ApiKey = \"${config[JiroCloudApiKey]}\" |
            .JiroCloud.ApiUrl = \"${config[JiroCloudApiUrl]}\" |
            .JiroCloud.Grpc.ServerUrl = \"${config[JiroCloudGrpcServerUrl]}\" |
            .JiroCloud.Grpc.MaxRetries = ${config[JiroCloudGrpcMaxRetries]} |
            .JiroCloud.Grpc.TimeoutMs = ${config[JiroCloudGrpcTimeoutMs]} |
            .JiroCloud.WebSocket.HubUrl = \"${config[JiroCloudWebSocketHubUrl]}\" |
            .JiroCloud.WebSocket.HandshakeTimeoutMs = ${config[JiroCloudWebSocketHandshakeTimeoutMs]} |
            .JiroCloud.WebSocket.KeepAliveIntervalMs = ${config[JiroCloudWebSocketKeepAliveIntervalMs]} |
            .JiroCloud.WebSocket.ReconnectionAttempts = ${config[JiroCloudWebSocketReconnectionAttempts]} |
            .JiroCloud.WebSocket.ReconnectionDelayMs = ${config[JiroCloudWebSocketReconnectionDelayMs]} |
            .JiroCloud.WebSocket.ServerTimeoutMs = ${config[JiroCloudWebSocketServerTimeoutMs]}" \
            "$APPSETTINGS_EXAMPLE" > "$APPSETTINGS"
    else
        # Fallback to sed-based approach
        cp "$APPSETTINGS_EXAMPLE" "$APPSETTINGS"
        
        # Update values using sed - escaping special characters in sed patterns
        ESCAPED_SYSTEM_MESSAGE=$(echo "${config[ChatSystemMessage]}" | sed 's/[[\.*^$()+?{|]/\\&/g')
        
        # Remove main ApiKey property (consolidated to JiroCloud.ApiKey)
        sed -i.bak '/\"ApiKey\": \".*\",$/d' "$APPSETTINGS"
        sed -i.bak "s|\"AuthToken\": \".*\"|\"AuthToken\": \"${config[ChatAuthToken]:-your-openai-api-key}\"|" "$APPSETTINGS"
        sed -i.bak "s|\"SystemMessage\": \".*\"|\"SystemMessage\": \"$ESCAPED_SYSTEM_MESSAGE\"|" "$APPSETTINGS"
        sed -i.bak "s|\"TokenLimit\": [0-9]*|\"TokenLimit\": ${config[ChatTokenLimit]}|" "$APPSETTINGS"
        sed -i.bak "s|\"Enabled\": [a-z]*|\"Enabled\": ${config[ChatEnabled]}|" "$APPSETTINGS"
        
        # Update JiroCloud values
        sed -i.bak "s|\"your-jirocloud-api-key-here\"|\"${config[JiroCloudApiKey]}\"|" "$APPSETTINGS"
        sed -i.bak "s|\"ApiUrl\": \"https://jiro.huebytes.com/api\"|\"ApiUrl\": \"${config[JiroCloudApiUrl]}\"|" "$APPSETTINGS"
        sed -i.bak "s|\"ServerUrl\": \"https://jiro.huebytes.com/grpc\"|\"ServerUrl\": \"${config[JiroCloudGrpcServerUrl]}\"|" "$APPSETTINGS"
        sed -i.bak "s|\"MaxRetries\": [0-9]*|\"MaxRetries\": ${config[JiroCloudGrpcMaxRetries]}|" "$APPSETTINGS"
        sed -i.bak "s|\"TimeoutMs\": [0-9]*|\"TimeoutMs\": ${config[JiroCloudGrpcTimeoutMs]}|" "$APPSETTINGS"
        sed -i.bak "s|\"HubUrl\": \"https://jiro.huebytes.com/hubs/instanceHub\"|\"HubUrl\": \"${config[JiroCloudWebSocketHubUrl]}\"|" "$APPSETTINGS"
        sed -i.bak "s|\"HandshakeTimeoutMs\": [0-9]*|\"HandshakeTimeoutMs\": ${config[JiroCloudWebSocketHandshakeTimeoutMs]}|" "$APPSETTINGS"
        sed -i.bak "s|\"KeepAliveIntervalMs\": [0-9]*|\"KeepAliveIntervalMs\": ${config[JiroCloudWebSocketKeepAliveIntervalMs]}|" "$APPSETTINGS"
        sed -i.bak "s|\"ReconnectionAttempts\": [0-9]*|\"ReconnectionAttempts\": ${config[JiroCloudWebSocketReconnectionAttempts]}|" "$APPSETTINGS"
        sed -i.bak "s|\"ReconnectionDelayMs\": [0-9]*|\"ReconnectionDelayMs\": ${config[JiroCloudWebSocketReconnectionDelayMs]}|" "$APPSETTINGS"
        sed -i.bak "s|\"ServerTimeoutMs\": [0-9]*|\"ServerTimeoutMs\": ${config[JiroCloudWebSocketServerTimeoutMs]}|" "$APPSETTINGS"
        
        # Remove backup files
        rm -f "$APPSETTINGS.bak"
    fi
    
    echo -e "${GREEN}Created appsettings.json${NC}"
else
    echo -e "${YELLOW}⚠️  appsettings.example.json not found, skipping appsettings.json creation${NC}"
fi

# Restore dependencies
echo ""
echo -e "${CYAN}Restoring NuGet packages...${NC}"
cd "$PROJECT_ROOT"
dotnet restore src/Main.sln

# Build solution
echo ""
echo -e "${CYAN}Building solution...${NC}"
dotnet build src/Main.sln


echo ""
echo -e "${GREEN}=== Setup Complete ===${NC}"
echo ""
echo -e "${CYAN}Configuration files created:${NC}"
echo "  - .env (Environment variables - can override any appsettings.json value)"
echo "  - appsettings.json (Application configuration)"
echo ""
echo -e "${CYAN}Service endpoints configured:${NC}"
echo "  • JiroCloud API: ${config[JiroCloudApiUrl]}"
echo "  • JiroCloud gRPC: ${config[JiroCloudGrpcServerUrl]}"
echo "  • JiroCloud WebSocket: ${config[JiroCloudWebSocketHubUrl]}"
echo ""

has_warnings=false

if [ -z "${config[JiroCloudApiKey]}" ]; then
    if [ "$has_warnings" = false ]; then
        echo -e "${YELLOW}IMPORTANT: Missing required configuration${NC}"
        echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
        has_warnings=true
    fi
    echo -e "  • ${RED}JiroCloud API Key: Required for cloud services connection${NC}"
    echo "    - Update 'JIRO_JiroCloud__ApiKey' in .env file"
fi

if [ -z "${config[ChatAuthToken]}" ]; then
    if [ "$has_warnings" = false ]; then
        echo -e "${YELLOW}IMPORTANT: Missing optional configuration${NC}"
        echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
        has_warnings=true
    fi
    echo -e "  • ${YELLOW}OpenAI API Key: Required for AI chat features${NC}"
    echo "    - Update 'OPENAI_API_KEY' and 'JIRO_Chat__AuthToken' in .env file"
fi


echo -e "${YELLOW}Next steps:${NC}"
step_number=1

if [ -z "${config[JiroCloudApiKey]}" ]; then
    echo "$step_number. Add your JiroCloud API key to .env file (required for cloud services)"
    step_number=$((step_number + 1))
fi

if [ -z "${config[ChatAuthToken]}" ]; then
    echo "$step_number. Add your OpenAI API key to .env file (optional for AI features)"
    step_number=$((step_number + 1))
fi

echo "$step_number. Run database migrations: dotnet ef database update -p src/Jiro.Kernel/Jiro.Infrastructure -s src/Jiro.Kernel/Jiro.App"
step_number=$((step_number + 1))
echo "$step_number. Start the application: cd src/Jiro.Kernel/Jiro.App && dotnet run"
echo ""
echo -e "${GRAY}All configuration values can be overridden using environment variables with JIRO_ prefix.${NC}"
echo ""