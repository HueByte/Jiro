name: CI/CD Pipeline

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  test-and-validate:
    name: Test and Validate
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: "9.0.x"

      - name: Restore dependencies
        run: dotnet restore src/Main.sln

      - name: Build
        run: dotnet build src/Main.sln --no-restore --configuration Release

      - name: Run tests
        run: dotnet test src/Main.sln --no-build --configuration Release --verbosity normal

      - name: Check code formatting
        run: dotnet format src/Main.sln --verify-no-changes --verbosity diagnostic

      - name: Security scan with CodeQL
        uses: github/codeql-action/analyze@v3
        continue-on-error: true

  release:
    name: Create Release
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    permissions:
      contents: write
      actions: read

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          fetch-depth: 0

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: "9.0.x"

      - name: Check if last commit was a version bump
        id: check_bot_commit
        run: |
          last_commit_message=$(git log -1 --pretty=format:"%s")
          if [[ "$last_commit_message" == *"[skip ci]"* ]] || [[ "$last_commit_message" == *"Bump version to"* ]] || [[ "$last_commit_message" == *"☁️ Bump version to"* ]]; then
              echo "is_bot_commit=true" >> $GITHUB_OUTPUT
              echo "Last commit was a version bump, skipping version increment"
          else
              echo "is_bot_commit=false" >> $GITHUB_OUTPUT
              echo "Last commit was not a version bump"
          fi

      - name: Auto-increment version
        if: steps.check_bot_commit.outputs.is_bot_commit == 'false'
        id: increment_version
        run: |
          # Extract current version
          current_version=$(grep -oPm1 "(?<=<Version>)[^<]+" src/Jiro.Kernel/Jiro.App/Jiro.App.csproj)
          echo "Current version: $current_version"

          # Split version into parts (major.minor.patch)
          IFS='.' read -ra VERSION_PARTS <<< "$current_version"
          major=${VERSION_PARTS[0]}
          minor=${VERSION_PARTS[1]}
          patch=${VERSION_PARTS[2]}

          # Increment patch version
          new_patch=$((patch + 1))
          new_version="$major.$minor.$new_patch"

          echo "New version: $new_version"
          echo "new_version=$new_version" >> $GITHUB_OUTPUT

          # Update the project file
          sed -i "s/<Version>$current_version<\/Version>/<Version>$new_version<\/Version>/" src/Jiro.Kernel/Jiro.App/Jiro.App.csproj

          # Verify the change
          updated_version=$(grep -oPm1 "(?<=<Version>)[^<]+" src/Jiro.Kernel/Jiro.App/Jiro.App.csproj)
          echo "Updated version in file: $updated_version"

      - name: Commit and push version bump
        if: steps.check_bot_commit.outputs.is_bot_commit == 'false'
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action Bot"
          git add src/Jiro.Kernel/Jiro.App/Jiro.App.csproj
          git commit -m "☁️ Bump version to ${{ steps.increment_version.outputs.new_version }} [skip ci]"
          git push

      - name: Extract final version
        id: get_version
        run: |
          version=$(grep -oPm1 "(?<=<Version>)[^<]+" src/Jiro.Kernel/Jiro.App/Jiro.App.csproj)
          echo "version=$version" >> $GITHUB_OUTPUT
          echo "Final version: $version"

      - name: Check if tag exists
        id: check_tag
        run: |
          if git rev-parse "v${{ steps.get_version.outputs.version }}" >/dev/null 2>&1; then
              echo "exists=true" >> $GITHUB_OUTPUT
              echo "Tag v${{ steps.get_version.outputs.version }} already exists"
          else
              echo "exists=false" >> $GITHUB_OUTPUT
              echo "Tag v${{ steps.get_version.outputs.version }} does not exist"
          fi

      - name: Create Git tag
        if: steps.check_tag.outputs.exists == 'false'
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action Bot"
          git tag -a "v${{ steps.get_version.outputs.version }}" -m "☁️ Release v${{ steps.get_version.outputs.version }}"
          git push origin "v${{ steps.get_version.outputs.version }}"

      - name: Generate release notes
        if: steps.check_tag.outputs.exists == 'false'
        id: release_notes
        run: |
          # Get the previous tag for changelog
          previous_tag=$(git describe --tags --abbrev=0 HEAD^ 2>/dev/null || echo "")

          if [ -n "$previous_tag" ]; then
              changelog=$(git log --pretty=format:"- %s" $previous_tag..HEAD)
          else
              changelog=$(git log --pretty=format:"- %s")
          fi

          # Create release notes
          {
              echo "## What's Changed"
              echo ""
              echo "$changelog"
              echo ""
              echo "## Version Information"
              echo "- Version: ${{ steps.get_version.outputs.version }}"
              echo "- Build Date: $(date -u +"%Y-%m-%d %H:%M:%S UTC")"
              echo "- Commit: ${{ github.sha }}"
          } > release_notes.md

          # Set output for release body
          {
              echo "RELEASE_NOTES<<EOF"
              cat release_notes.md
              echo "EOF"
          } >> $GITHUB_OUTPUT

      - name: Create GitHub Release
        if: steps.check_tag.outputs.exists == 'false'
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: "v${{ steps.get_version.outputs.version }}"
          release_name: "Release v${{ steps.get_version.outputs.version }}"
          body: ${{ steps.release_notes.outputs.RELEASE_NOTES }}
          draft: false
          prerelease: false
